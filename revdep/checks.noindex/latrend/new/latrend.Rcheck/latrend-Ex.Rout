
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "latrend"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('latrend')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PAP.adh")
> ### * PAP.adh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PAP.adh
> ### Title: Biweekly Mean Therapy Adherence of OSA Patients over 1 Year
> ### Aliases: PAP.adh PAP.adh1y
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(PAP.adh)
> 
> if (require("ggplot2")) {
+   plotTrajectories(PAP.adh, id = "Patient", time = "Biweek", response = "UsageHours")
+ 
+   # plot according to cluster ground truth
+   plotTrajectories(
+     PAP.adh,
+     id = "Patient",
+     time = "Biweek",
+     response = "UsageHours",
+     cluster = "Group"
+   )
+ }
Loading required package: ggplot2
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("as.list.lcMethod")
> ### * as.list.lcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.list.lcMethod
> ### Title: Extract the method arguments as a list
> ### Aliases: as.list.lcMethod
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> as.list(method)
$time
[1] "Time"

$id
[1] "Id"

$nClusters
[1] 2

$center
function (x, ...) 
{
    mean(x, ..., na.rm = TRUE)
}
<bytecode: 0x7fdcff7b3450>
<environment: namespace:latrend>

$standardize
function (x, center = TRUE, scale = TRUE) 
UseMethod("scale")
<bytecode: 0x7fdcff77eae8>
<environment: namespace:base>

$method
[1] "qr"

$model
[1] TRUE

$y
[1] FALSE

$qr
[1] TRUE

$singular.ok
[1] TRUE

$contrasts
NULL

$iter.max
[1] 10

$nstart
[1] 1

$algorithm
[1] "Hartigan-Wong" "Lloyd"         "Forgy"         "MacQueen"     

$formula
Y ~ Time
<environment: 0x7fdd05010d30>

> 
> as.list(method, args = c("id", "time"))
$id
[1] "Id"

$time
[1] "Time"

> 
> if (require("kml")) {
+   method <- lcMethodKML("Y", id = "Id", time = "Time")
+   as.list(method)
+ 
+   # select arguments used by kml()
+   as.list(method, args = kml::kml)
+ 
+   # select arguments used by either kml() or parALGO()
+   as.list(method, args = c(kml::kml, kml::parALGO))
+ }
Loading required package: kml
Loading required package: clv
Loading required package: cluster
Loading required package: class
Loading required package: longitudinalData
Loading required package: rgl
Loading required package: misc3d
Warning in fun(libname, pkgname) : couldn't connect to display ""

Attaching package: ‘longitudinalData’

The following object is masked from ‘package:latrend’:

    meanNA

$nbRedrawing
[1] 20

$maxIt
[1] 200

$imputationMethod
[1] "copyMean"

$distanceName
[1] "euclidean"

$power
[1] 2

$distance
function () 
{
}
<environment: 0x7fdd08d151a8>

$centerMethod
function (x) 
{
    mean(x, na.rm = TRUE)
}
<bytecode: 0x7fdd089ccf68>
<environment: namespace:longitudinalData>

$startingCond
[1] "nearlyAll"

$nbCriterion
[1] 1000

$scale
[1] TRUE

> 
> 
> 
> cleanEx()

detaching ‘package:kml’, ‘package:longitudinalData’, ‘package:misc3d’,
  ‘package:rgl’, ‘package:clv’, ‘package:class’, ‘package:cluster’

> nameEx("clusterNames-set")
> ### * clusterNames-set
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterNames<-
> ### Title: Update the cluster names
> ### Aliases: clusterNames<-
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.023 secs)
---------------------------------------------------------------------------
> clusterNames(model) <- c("Group 1", "Group 2")
> 
> 
> 
> cleanEx()
> nameEx("clusterNames")
> ### * clusterNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterNames
> ### Title: Get the cluster names
> ### Aliases: clusterNames
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.018 secs)
---------------------------------------------------------------------------
> clusterNames(model) # A, B
[1] "A" "B"
> 
> 
> 
> cleanEx()
> nameEx("clusterProportions")
> ### * clusterProportions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterProportions
> ### Title: Proportional size of each cluster
> ### Aliases: clusterProportions clusterProportions,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.017 secs)
---------------------------------------------------------------------------
> clusterProportions(model)
  A   B 
0.4 0.6 
> 
> 
> 
> cleanEx()
> nameEx("clusterSizes")
> ### * clusterSizes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterSizes
> ### Title: Number of trajectories per cluster
> ### Aliases: clusterSizes
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.018 secs)
---------------------------------------------------------------------------
> clusterSizes(model)
  A   B 
 80 120 
> 
> 
> 
> cleanEx()
> nameEx("clusterTrajectories")
> ### * clusterTrajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterTrajectories
> ### Title: Extract the cluster trajectories
> ### Aliases: clusterTrajectories clusterTrajectories,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.018 secs)
---------------------------------------------------------------------------
> 
> clusterTrajectories(model)
   Cluster      Time           Y
1        A 0.0000000 -0.97975135
2        A 0.2222222 -0.63534769
3        A 0.4444444 -0.38525328
4        A 0.6666667 -0.16233773
5        A 0.8888889  0.05903586
6        A 1.1111111  0.17918673
7        A 1.3333333  0.31069966
8        A 1.5555556  0.39004675
9        A 1.7777778  0.42939022
10       A 2.0000000  0.43011898
11       B 0.0000000  0.09202386
12       B 0.2222222  0.10921565
13       B 0.4444444  0.11104821
14       B 0.6666667  0.09712083
15       B 0.8888889  0.06140180
16       B 1.1111111  0.01318545
17       B 1.3333333 -0.05804444
18       B 1.5555556 -0.13662404
19       B 1.7777778 -0.24801613
20       B 2.0000000 -0.34779054
> 
> clusterTrajectories(model, at = c(0, .5, 1))
  Cluster Time           Y
1       A  0.0 -0.97975135
2       A  0.5 -0.32952439
3       A  1.0  0.11911130
4       B  0.0  0.09202386
5       B  0.5  0.10756637
6       B  1.0  0.03729362
> 
> 
> 
> cleanEx()
> nameEx("coef.lcModel")
> ### * coef.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coef.lcModel
> ### Title: Extract lcModel coefficients
> ### Aliases: coef.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.017 secs)
---------------------------------------------------------------------------
> coef(model)
                    A          B
(Intercept) -1.027661  0.6851075
Time         1.095947 -0.7306316
> 
> 
> 
> cleanEx()
> nameEx("confusionMatrix")
> ### * confusionMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confusionMatrix
> ### Title: Compute the posterior confusion matrix
> ### Aliases: confusionMatrix
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (rlang::is_installed("lcmm")) {
+   method <- lcMethodLcmmGMM(
+     fixed = Y ~ Time,
+     mixture = ~ Time,
+     random = ~ 1,
+     id = "Id",
+     time = "Time"
+   )
+   model <- latrend(method, latrendData)
+   confusionMatrix(model)
+ }
---------------------------------------------------------------------------
- Longitudinal clustering using: growth mixture model
---------------------------------------------------------------------------
Method arguments:
 mixture:        ~Time
 random:         ~1
 classmb:        ~1
 time:           "Time"
 id:             "Id"
 init:           "lme"
 nClusters:      2
 idiag:          FALSE
 nwg:            FALSE
 cor:            NULL
 convB:          1e-04
 convL:          1e-04
 convG:          1e-04
 pprior:         NULL
 maxiter:        500
 na.action:      1
 posfix:         NULL
 var.time:       NULL
 partialH:       FALSE
 nproc:          1
 clustertype:    NULL
 fixed:          Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
 Fitting standard linear mixed model for initializing the mixture estimation...
------------------ iteration  0 ------------------
Function value  -2211.674 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295723
parameter2  0.00000000
parameter3  1.00000000
parameter4  1.00000000

------------------ iteration  1 ------------------
Function value  -2211.661 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01365446 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295781
parameter2  0.00000137
parameter3  0.99999000
parameter4  0.99999246

------------------ iteration  2 ------------------
Function value  -2211.643 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01733755 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295808
parameter2  0.00000233
parameter3  0.99998055
parameter4  0.99998246

------------------ iteration  3 ------------------
Function value  -1439.862 
Convergence criteria: parameters stability= 0.280072 
                    : function stability= 771.7816 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.04031975
parameter2  0.04576697
parameter3  0.64986537
parameter4  0.60584696

------------------ iteration  4 ------------------
Function value  -1439.841 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.02074656 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.04032027
parameter2  0.04576783
parameter3  0.64985797
parameter4  0.60583696

------------------ iteration  5 ------------------
Function value  -1259.308 
Convergence criteria: parameters stability= 0.1423089 
                    : function stability= 180.5326 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.05020431
parameter2  0.06607079
parameter3  0.47182147
parameter4  0.27402077

------------------ iteration  6 ------------------
Function value  -1182.724 
Convergence criteria: parameters stability= 1.186942 
                    : function stability= 76.58411 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17261108
parameter2  0.09024304
parameter3 -0.61021076
parameter4  0.29811228

------------------ iteration  7 ------------------
Function value  -1182.721 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00300208 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17261028
parameter2  0.09024312
parameter3 -0.61020076
parameter4  0.29811233

------------------ iteration  8 ------------------
Function value  -1182.718 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00380941 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17260961
parameter2  0.09024344
parameter3 -0.61019076
parameter4  0.29811260

------------------ iteration  9 ------------------
Function value  -1070.899 
Convergence criteria: parameters stability= 0.05788247 
                    : function stability= 111.819 
                    : relative distance to maximum(RDM)= 735.0503 
                 coef
parameter1 -0.1578944
parameter2  0.1032584
parameter3 -0.3706614
parameter4  0.3091681

------------------ iteration  10 ------------------
Function value  -1070.895 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00369269 
                    : relative distance to maximum(RDM)= 734.1069 
                 coef
parameter1 -0.1578937
parameter2  0.1032586
parameter3 -0.3706514
parameter4  0.3091682

------------------ iteration  11 ------------------
Function value  -1070.891 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00379712 
                    : relative distance to maximum(RDM)= 732.7804 
                 coef
parameter1 -0.1578932
parameter2  0.1032587
parameter3 -0.3706414
parameter4  0.3091683

------------------ iteration  12 ------------------
Function value  -1044.445 
Convergence criteria: parameters stability= 0.5764923 
                    : function stability= 26.44575 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270200
parameter2  0.1190798
parameter3  0.3877042
parameter4  0.3233399

------------------ iteration  13 ------------------
Function value  -1044.442 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00348247 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270206
parameter2  0.1190798
parameter3  0.3876942
parameter4  0.3233399

------------------ iteration  14 ------------------
Function value  -1044.438 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00354728 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270210
parameter2  0.1190798
parameter3  0.3876842
parameter4  0.3233400

------------------ iteration  15 ------------------
Function value  -1044.435 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00359666 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270214
parameter2  0.1190799
parameter3  0.3876742
parameter4  0.3233402

------------------ iteration  16 ------------------
Function value  -990.0216 
Convergence criteria: parameters stability= 0.03537848 
                    : function stability= 54.41312 
                    : relative distance to maximum(RDM)= 12.63568 
                 coef
parameter1 -0.1312689
parameter2  0.1205435
parameter3  0.1996607
parameter4  0.3263760

------------------ iteration  17 ------------------
Function value  -973.447 
Convergence criteria: parameters stability= 0.00032527 
                    : function stability= 16.5746 
                    : relative distance to maximum(RDM)= 5.923463 
                 coef
parameter1 -0.1424467
parameter2  0.1250521
parameter3  0.1966761
parameter4  0.3394560

------------------ iteration  18 ------------------
Function value  -961.3928 
Convergence criteria: parameters stability= 0.00105038 
                    : function stability= 12.05426 
                    : relative distance to maximum(RDM)= 0.5934875 
                 coef
parameter1 -0.1651657
parameter2  0.1362990
parameter3  0.1897439
parameter4  0.3584212

------------------ iteration  19 ------------------
Function value  -960.1702 
Convergence criteria: parameters stability= 0.00024153 
                    : function stability= 1.22258 
                    : relative distance to maximum(RDM)= 0.00468293 
                 coef
parameter1 -0.1762450
parameter2  0.1435650
parameter3  0.1871355
parameter4  0.3661144

------------------ iteration  20 ------------------
Function value  -960.1608 
Convergence criteria: parameters stability= 2.61e-06 
                    : function stability= 0.00939257 
                    : relative distance to maximum(RDM)= 5.3e-07 
                 coef
parameter1 -0.1773901
parameter2  0.1444374
parameter3  0.1869344
parameter4  0.3668221

------------------ iteration  21 ------------------
Function value  -960.1608 
Convergence criteria: parameters stability= 0 
                    : function stability= 1.06e-06 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1 -0.1774069
parameter2  0.1444497
parameter3  0.1869323
parameter4  0.3668285

The program took 0.61 seconds 
------------------ iteration  0 ------------------
Function value  -959.2723 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1  0.0000000
parameter2 -0.1874958
parameter3 -0.1673180
parameter4  0.1380242
parameter5  0.1508751
parameter6  0.1869323
parameter7  0.3668285

------------------ iteration  1 ------------------
Function value  -957.1753 
Convergence criteria: parameters stability= 6.129e-05 
                    : function stability= 2.096957 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00000062
parameter2 -0.18754771
parameter3 -0.16726570
parameter4  0.13249696
parameter5  0.15640299
parameter6  0.18678235
parameter7  0.36643190

------------------ iteration  2 ------------------
Function value  -939.833 
Convergence criteria: parameters stability= 0.00086888 
                    : function stability= 17.34234 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00005619
parameter2 -0.18764866
parameter3 -0.16715783
parameter4  0.11167008
parameter5  0.17722906
parameter6  0.18612622
parameter7  0.36546029

------------------ iteration  3 ------------------
Function value  -920.4693 
Convergence criteria: parameters stability= 0.00046287 
                    : function stability= 19.36369 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.00005138
parameter2 -0.18638636
parameter3 -0.16848311
parameter4  0.09661454
parameter5  0.19246104
parameter6  0.18589482
parameter7  0.36457997

------------------ iteration  4 ------------------
Function value  -871.5999 
Convergence criteria: parameters stability= 0.00215893 
                    : function stability= 48.86941 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.00007543
parameter2 -0.18536968
parameter3 -0.16960355
parameter4  0.06493828
parameter5  0.22641521
parameter6  0.18585693
parameter7  0.36397647

------------------ iteration  5 ------------------
Function value  -807.588 
Convergence criteria: parameters stability= 0.00298216 
                    : function stability= 64.01191 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00102682
parameter2 -0.17310219
parameter3 -0.18293716
parameter4  0.03023777
parameter5  0.26375491
parameter6  0.18741815
parameter7  0.35677548

------------------ iteration  6 ------------------
Function value  -237.3395 
Convergence criteria: parameters stability= 0.2142391 
                    : function stability= 570.2485 
                    : relative distance to maximum(RDM)= 90.6668 
                  coef
parameter1  0.04942916
parameter2  0.03542505
parameter3 -0.40107813
parameter4 -0.17659645
parameter5  0.51490386
parameter6  0.24019594
parameter7  0.24638741

------------------ iteration  7 ------------------
Function value  -122.3375 
Convergence criteria: parameters stability= 0.3104587 
                    : function stability= 115.002 
                    : relative distance to maximum(RDM)= 15.18437 
                 coef
parameter1  0.3041221
parameter2  0.2220450
parameter3 -0.7842628
parameter4 -0.2303117
parameter5  0.7456562
parameter6  0.1869164
parameter7  0.1759455

------------------ iteration  8 ------------------
Function value  -61.37525 
Convergence criteria: parameters stability= 0.0110935 
                    : function stability= 60.96221 
                    : relative distance to maximum(RDM)= 1.503595 
                 coef
parameter1  0.3888843
parameter2  0.1996796
parameter3 -0.7470719
parameter4 -0.2256203
parameter5  0.7092421
parameter6  0.2038002
parameter7  0.1957557

------------------ iteration  9 ------------------
Function value  -55.7481 
Convergence criteria: parameters stability= 0.00068913 
                    : function stability= 5.627153 
                    : relative distance to maximum(RDM)= 0.02132023 
                 coef
parameter1  0.4051420
parameter2  0.1937573
parameter3 -0.7347525
parameter4 -0.2241003
parameter5  0.6982025
parameter6  0.2096329
parameter7  0.2046874

------------------ iteration  10 ------------------
Function value  -55.67276 
Convergence criteria: parameters stability= 5.11e-06 
                    : function stability= 0.07533719 
                    : relative distance to maximum(RDM)= 5.03e-06 
                 coef
parameter1  0.4054644
parameter2  0.1932930
parameter3 -0.7334677
parameter4 -0.2239391
parameter5  0.6970453
parameter6  0.2101179
parameter7  0.2059298

------------------ iteration  11 ------------------
Function value  -55.67274 
Convergence criteria: parameters stability= 0 
                    : function stability= 1.761e-05 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1  0.4054651
parameter2  0.1932891
parameter3 -0.7334510
parameter4 -0.2239371
parameter5  0.6970299
parameter6  0.2101202
parameter7  0.2059496

The program took 0.53 seconds 
Done fitting the method (1.2 secs)
---------------------------------------------------------------------------
             A            B
A 1.000000e+00 7.016737e-09
B 1.065267e-11 1.000000e+00
> 
> 
> 
> cleanEx()
> nameEx("converged")
> ### * converged
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: converged
> ### Title: Check model convergence
> ### Aliases: converged converged,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.02 secs)
---------------------------------------------------------------------------
> converged(model)
[1] TRUE
> 
> 
> 
> cleanEx()
> nameEx("createTestDataFold")
> ### * createTestDataFold
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createTestDataFold
> ### Title: Create the test fold data for validation
> ### Aliases: createTestDataFold
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("caret")) {
+   trainDataList <- createTrainDataFolds(latrendData, id = "Id", folds = 10)
+   testData1 <- createTestDataFold(latrendData, trainDataList[[1]], id = "Id")
+ }
Loading required package: caret
Loading required package: ggplot2
Loading required package: lattice

Attaching package: ‘caret’

The following object is masked from ‘package:latrend’:

    confusionMatrix

> 
> 
> 
> cleanEx()

detaching ‘package:caret’, ‘package:lattice’, ‘package:ggplot2’

> nameEx("createTestDataFolds")
> ### * createTestDataFolds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createTestDataFolds
> ### Title: Create all k test folds from the training data
> ### Aliases: createTestDataFolds
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("caret")) {
+   trainDataList <- createTrainDataFolds(latrendData, folds = 10, id = "Id")
+   testDataList <- createTestDataFolds(latrendData, trainDataList)
+ }
Loading required package: caret
Loading required package: ggplot2
Loading required package: lattice

Attaching package: ‘caret’

The following object is masked from ‘package:latrend’:

    confusionMatrix

> 
> 
> 
> cleanEx()

detaching ‘package:caret’, ‘package:lattice’, ‘package:ggplot2’

> nameEx("createTrainDataFolds")
> ### * createTrainDataFolds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createTrainDataFolds
> ### Title: Create the training data for each of the k models in k-fold
> ###   cross validation evaluation
> ### Aliases: createTrainDataFolds
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> 
> if (require("caret")) {
+   trainFolds <- createTrainDataFolds(latrendData, folds = 5, id = "Id", seed = 1)
+ 
+   foldModels <- latrendBatch(method, data = trainFolds)
+   testDataFolds <- createTestDataFolds(latrendData, trainFolds)
+ }
Loading required package: caret
Loading required package: ggplot2
Loading required package: lattice

Attaching package: ‘caret’

The following object is masked from ‘package:latrend’:

    confusionMatrix

---------------------------------------------------------------------------
- Longitudinal clustering of 5 dataset(s) using 1 method(s)
---------------------------------------------------------------------------

Fitting 5 models...
 --------------------------------------------------------------------------
 Fitting model 1/5 (20%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           778402354
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 778402354.
  Cluster step...
 Fitting model 1/5 (20%) using lm-kmeans...done (0.26 secs)
 Fitting model 2/5 (40%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1162807070
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1162807070.
  Cluster step...
 Fitting model 2/5 (40%) using lm-kmeans...done (0.27 secs)
 Fitting model 3/5 (60%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           117301597
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 117301597.
  Cluster step...
 Fitting model 3/5 (60%) using lm-kmeans...done (0.29 secs)
 Fitting model 4/5 (80%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1602292808
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1602292808.
  Cluster step...
 Fitting model 4/5 (80%) using lm-kmeans...done (0.26 secs)
 Fitting model 5/5 (100%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           595415630
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 595415630.
  Cluster step...
 Fitting model 5/5 (100%) using lm-kmeans...done (0.26 secs)
Fitting 5 models...done (1.4 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:caret’, ‘package:lattice’, ‘package:ggplot2’

> nameEx("defineInternalMetric")
> ### * defineInternalMetric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: defineInternalMetric
> ### Title: Define an internal metric for lcModels
> ### Aliases: defineInternalMetric
> 
> ### ** Examples
> 
> defineInternalMetric("BIC", fun = BIC)
Warning in .defineMetric(name, fun = fun, warnIfExists = warnIfExists, envir = intMetricsEnv) :
  ovewriting existing metric definition for BIC
> 
> mae <- function(object) {
+   mean(abs(residuals(object)))
+ }
> defineInternalMetric("MAE", fun = mae)
Warning in .defineMetric(name, fun = fun, warnIfExists = warnIfExists, envir = intMetricsEnv) :
  ovewriting existing metric definition for MAE
> 
> 
> 
> cleanEx()
> nameEx("estimationTime")
> ### * estimationTime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: estimationTime
> ### Title: Get the model estimation time
> ### Aliases: estimationTime estimationTime,lcModel-method
> ###   estimationTime,lcModels-method estimationTime,list-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.017 secs)
---------------------------------------------------------------------------
> 
> estimationTime(model)
[1] 0.013
> estimationTime(model, unit = 'mins')
[1] 0.0002166667
> estimationTime(model, unit = 'days')
[1] 1.50463e-07
> 
> 
> 
> cleanEx()
> nameEx("externalMetric")
> ### * externalMetric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: externalMetric,lcModel,lcModel-method
> ### Title: Compute external model metric(s)
> ### Aliases: externalMetric,lcModel,lcModel-method externalMetric
> ###   externalMetric,lcModels,missing-method
> ###   externalMetric,lcModels,character-method
> ###   externalMetric,lcModels,lcModel-method
> ###   externalMetric,lcModels,lcModels-method
> ###   externalMetric,list,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model2 <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.019 secs)
---------------------------------------------------------------------------
> model3 <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.016 secs)
---------------------------------------------------------------------------
> 
> if (require("mclustcomp")) {
+   externalMetric(model2, model3, "adjustedRand")
+ }
Loading required package: mclustcomp
adjustedRand 
   0.6227153 
> 
> 
> 
> cleanEx()

detaching ‘package:mclustcomp’

> nameEx("fitted.lcModel")
> ### * fitted.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitted.lcModel
> ### Title: Extract lcModel fitted values
> ### Aliases: fitted.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.019 secs)
---------------------------------------------------------------------------
> fitted(model)
   [1] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
   [7]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
  [13] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
  [19]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
  [25]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
  [31] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
  [37]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
  [43] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
  [49]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
  [55]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
  [61] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
  [67]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
  [73] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
  [79]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
  [85]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
  [91] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
  [97]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [103] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [109]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [115]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [121] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [127]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [133] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [139]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [145]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [151] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [157]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [163] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [169]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [175]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [181] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [187]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [193] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [199]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [205]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [211] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [217]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [223] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [229]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [235]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [241] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [247]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [253] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [259]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [265]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [271] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [277]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [283] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [289]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [295]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [301] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [307]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [313] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [319]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [325]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [331] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [337]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [343] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [349]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [355]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [361] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [367]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [373] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [379]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [385]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [391] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [397]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [403] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [409]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [415]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [421] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [427]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [433] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [439]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [445]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [451] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [457]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [463] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [469]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [475]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [481] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [487]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [493] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [499]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [505]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [511] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [517]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [523] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [529]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [535]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [541] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [547]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [553] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [559]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [565]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [571] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [577]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [583] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [589]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [595]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [601] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [607]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [613] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [619]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [625]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [631] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [637]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [643] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [649]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [655]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [661] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [667]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [673] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [679]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [685]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [691] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [697]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [703] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [709]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [715]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [721] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [727]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [733] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [739]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [745]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [751] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [757]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [763] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [769]  0.42939022  0.43011898 -0.97975135 -0.63534769 -0.38525328 -0.16233773
 [775]  0.05903586  0.17918673  0.31069966  0.39004675  0.42939022  0.43011898
 [781] -0.97975135 -0.63534769 -0.38525328 -0.16233773  0.05903586  0.17918673
 [787]  0.31069966  0.39004675  0.42939022  0.43011898 -0.97975135 -0.63534769
 [793] -0.38525328 -0.16233773  0.05903586  0.17918673  0.31069966  0.39004675
 [799]  0.42939022  0.43011898  0.09202386  0.10921565  0.11104821  0.09712083
 [805]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [811]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [817] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [823]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [829] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [835]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [841]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [847] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [853]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [859] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [865]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [871]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [877] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [883]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [889] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [895]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [901]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [907] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [913]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [919] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [925]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [931]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [937] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [943]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [949] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [955]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [961]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [967] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [973]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [979] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [985]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [991]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [997] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1003]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1009] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1015]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1021]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1027] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1033]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1039] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1045]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1051]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1057] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1063]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1069] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1075]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1081]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1087] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1093]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1099] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1105]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1111]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1117] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1123]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1129] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1135]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1141]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1147] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1153]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1159] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1165]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1171]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1177] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1183]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1189] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1195]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1201]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1207] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1213]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1219] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1225]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1231]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1237] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1243]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1249] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1255]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1261]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1267] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1273]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1279] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1285]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1291]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1297] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1303]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1309] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1315]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1321]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1327] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1333]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1339] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1345]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1351]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1357] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1363]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1369] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1375]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1381]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1387] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1393]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1399] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1405]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1411]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1417] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1423]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1429] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1435]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1441]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1447] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1453]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1459] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1465]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1471]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1477] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1483]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1489] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1495]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1501]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1507] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1513]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1519] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1525]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1531]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1537] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1543]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1549] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1555]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1561]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1567] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1573]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1579] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1585]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1591]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1597] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1603]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1609] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1615]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1621]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1627] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1633]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1639] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1645]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1651]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1657] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1663]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1669] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1675]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1681]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1687] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1693]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1699] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1705]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1711]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1717] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1723]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1729] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1735]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1741]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1747] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1753]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1759] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1765]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1771]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1777] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1783]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1789] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1795]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1801]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1807] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1813]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1819] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1825]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1831]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1837] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1843]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1849] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1855]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1861]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1867] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1873]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1879] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1885]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1891]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1897] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1903]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1909] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1915]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1921]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1927] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1933]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1939] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1945]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1951]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1957] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1963]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1969] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1975]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1981]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1987] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1993]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1999] -0.24801613 -0.34779054
> 
> 
> 
> cleanEx()
> nameEx("fittedTrajectories")
> ### * fittedTrajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fittedTrajectories
> ### Title: Extract the fitted trajectories for all strata
> ### Aliases: fittedTrajectories fittedTrajectories,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> # Note: not a great example because the fitted trajectories
> # are identical to the respective cluster trajectory
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.021 secs)
---------------------------------------------------------------------------
> fittedTrajectories(model)
       Id      Time           Y Cluster
   1:   1 0.0000000 -0.97975135       A
   2:   1 0.2222222 -0.63534769       A
   3:   1 0.4444444 -0.38525328       A
   4:   1 0.6666667 -0.16233773       A
   5:   1 0.8888889  0.05903586       A
  ---                                  
1996: 200 1.1111111  0.01318545       B
1997: 200 1.3333333 -0.05804444       B
1998: 200 1.5555556 -0.13662404       B
1999: 200 1.7777778 -0.24801613       B
2000: 200 2.0000000 -0.34779054       B
> 
> fittedTrajectories(model, at = time(model)[c(1, 2)])
      Id      Time           Y Cluster
  1:   1 0.0000000 -0.97975135       A
  2:   1 0.2222222 -0.63534769       A
  3:   2 0.0000000 -0.97975135       A
  4:   2 0.2222222 -0.63534769       A
  5:   3 0.0000000 -0.97975135       A
 ---                                  
396: 198 0.2222222  0.10921565       B
397: 199 0.0000000  0.09202386       B
398: 199 0.2222222  0.10921565       B
399: 200 0.0000000  0.09202386       B
400: 200 0.2222222  0.10921565       B
> 
> 
> 
> cleanEx()
> nameEx("formula.lcMethod")
> ### * formula.lcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.lcMethod
> ### Title: Extract formula
> ### Aliases: formula.lcMethod
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> formula(method) # Y ~ Time
Y ~ Time
> 
> 
> 
> cleanEx()
> nameEx("formula.lcModel")
> ### * formula.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.lcModel
> ### Title: Extract the formula of a lcModel
> ### Aliases: formula.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.015 secs)
---------------------------------------------------------------------------
> formula(model) # Y ~ Time
Y ~ Time
<environment: 0x7fdcf3cd4170>
> 
> 
> 
> cleanEx()
> nameEx("generateLongData")
> ### * generateLongData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateLongData
> ### Title: Generate longitudinal test data
> ### Aliases: generateLongData
> 
> ### ** Examples
> 
> longdata <- generateLongData(
+   sizes = c(40, 70), id = "Id",
+   cluster = ~poly(Time, 2, raw = TRUE),
+   clusterCoefs = cbind(c(1, 2, 5), c(-3, 4, .2))
+ )
> 
> if (require("ggplot2")) {
+   plotTrajectories(longdata, response = "Value", id = "Id", time = "Time")
+ }
Loading required package: ggplot2
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("getCall.lcModel")
> ### * getCall.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getCall.lcModel
> ### Title: Get the model call
> ### Aliases: getCall.lcModel
> ### Keywords: internal
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodRandom("Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.013 secs)
---------------------------------------------------------------------------
> getCall(model)
latrend(method = lcMethodRandom(alpha = 10, center = function (x, 
    ...) 
{
    mean(x, ..., na.rm = TRUE)
}, time = "Time", id = "Id", nClusters = 2, name = "random", 
    response = "Y"), data = latrendData, envir = NULL)
> 
> 
> 
> cleanEx()
> nameEx("getLabel")
> ### * getLabel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLabel
> ### Title: Extract the method label.
> ### Aliases: getLabel getLabel,lcMethod-method getLabel,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time, time = "Time")
> getLabel(method) # ""
[1] ""
> 
> getLabel(update(method, label = "v2")) # "v2"
[1] "v2"
> 
> 
> 
> cleanEx()
> nameEx("getLcMethod")
> ### * getLcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLcMethod
> ### Title: Get the method specification of a lcModel
> ### Aliases: getLcMethod getLcMethod,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodRandom("Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.006 secs)
---------------------------------------------------------------------------
> getLcMethod(model)
lcMethodRandom specifying "random"
 alpha:          10
 center:         `meanNA`
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
> 
> 
> 
> cleanEx()
> nameEx("getName")
> ### * getName
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getName
> ### Title: Get the (short) name of the lcMethod or Model
> ### Aliases: getName getName,lcMethod-method getShortName
> ###   getShortName,lcMethod-method getName,lcModel-method
> ###   getShortName,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time)
> getName(method) # "lm-kmeans"
[1] "lm-kmeans"
> method <- lcMethodLMKM(Y ~ Time)
> getShortName(method) # "LMKM"
[1] "lmkm"
> 
> 
> 
> cleanEx()
> nameEx("idVariable")
> ### * idVariable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: idVariable
> ### Title: Extract the trajectory identifier variable
> ### Aliases: idVariable idVariable,lcMethod-method
> ###   idVariable,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time, id = "Traj")
> idVariable(method) # "Traj"
[1] "Traj"
> 
> method <- lcMethodRandom("Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.009 secs)
---------------------------------------------------------------------------
> idVariable(model) # "Id"
[1] "Id"
> 
> 
> 
> cleanEx()
> nameEx("ids")
> ### * ids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ids
> ### Title: Get the trajectory ids on which the model was fitted
> ### Aliases: ids
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodRandom("Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.009 secs)
---------------------------------------------------------------------------
> ids(model) # 1, 2, ..., 200
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108
[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126
[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198
[199] 199 200
> 
> 
> 
> cleanEx()
> nameEx("indexy")
> ### * indexy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: [[,lcMethod-method
> ### Title: Retrieve and evaluate a lcMethod argument by name
> ### Aliases: [[,lcMethod-method $,lcMethod-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
> method$nClusters # 3
[1] 3
> m = lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 5)
> m[["nClusters"]] # 5
[1] 5
> 
> k = 2
> m = lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = k)
> m[["nClusters", eval=FALSE]] # k
k
> 
> 
> 
> cleanEx()
> nameEx("initialize-lcMethod-method")
> ### * initialize-lcMethod-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: initialize,lcMethod-method
> ### Title: lcMethod initialization
> ### Aliases: initialize,lcMethod-method
> 
> ### ** Examples
> 
> new("lcMethodLMKM", formula = Y ~ Time, id = "Id", time = "Time")
lcMethodLMKM specifying "lm-kmeans"
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
> 
> 
> 
> cleanEx()
> nameEx("latrend-parallel")
> ### * latrend-parallel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrend-parallel
> ### Title: Parallel computing using latrend
> ### Aliases: latrend-parallel
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("latrend")
> ### * latrend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrend
> ### Title: Cluster longitudinal data
> ### Aliases: latrend
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodLMKM(Y ~ Time, id = "Id", time = "Time"), data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.017 secs)
---------------------------------------------------------------------------
> 
> model <- latrend("lcMethodLMKM", formula = Y ~ Time, id = "Id", time = "Time", data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 formula:        Y ~ Time
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.017 secs)
---------------------------------------------------------------------------
> 
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, data = latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.019 secs)
---------------------------------------------------------------------------
> 
> model <- latrend(method, data = latrendData, nClusters = 3, seed = 1)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 seed:           1
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Setting seed 1.
 Cluster step...
Done fitting the method (0.02 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("latrendBatch")
> ### * latrendBatch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendBatch
> ### Title: Cluster longitudinal data for a list of method specifications
> ### Aliases: latrendBatch
> 
> ### ** Examples
> 
> data(latrendData)
> refMethod <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> methods <- lcMethods(refMethod, nClusters = 1:2)
> models <- latrendBatch(methods, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering of 1 dataset(s) using 2 method(s)
---------------------------------------------------------------------------

Fitting 2 models...
 --------------------------------------------------------------------------
 Fitting model 1/2 (50%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1140350788
   - time:           "Time"
   - id:             "Id"
   - nClusters:      1
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1140350788.
  Cluster step...
 Fitting model 1/2 (50%) using lm-kmeans...done (0.3 secs)
 Fitting model 2/2 (100%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           312928385
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 312928385.
  Cluster step...
 Fitting model 2/2 (100%) using lm-kmeans...done (0.33 secs)
Fitting 2 models...done (0.66 secs)
---------------------------------------------------------------------------
> 
> # different dataset per method
> models <- latrendBatch(
+    methods,
+    data = .(
+      subset(latrendData, Time > .5),
+      subset(latrendData, Time < .5)
+    )
+ )
---------------------------------------------------------------------------
- Longitudinal clustering of 2 dataset(s) using 2 method(s)
---------------------------------------------------------------------------

Fitting 4 models...
 --------------------------------------------------------------------------
 Fitting model 1/4 (25%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1638490142
   - time:           "Time"
   - id:             "Id"
   - nClusters:      1
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1638490142.
  Cluster step...
 Fitting model 1/4 (25%) using lm-kmeans...done (0.31 secs)
 Fitting model 2/4 (50%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           989392707
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 989392707.
  Cluster step...
 Fitting model 2/4 (50%) using lm-kmeans...done (0.3 secs)
 Fitting model 3/4 (75%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1361261877
   - time:           "Time"
   - id:             "Id"
   - nClusters:      1
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1361261877.
  Cluster step...
 Fitting model 3/4 (75%) using lm-kmeans...done (0.3 secs)
 Fitting model 4/4 (100%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1489525854
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1489525854.
  Cluster step...
 Fitting model 4/4 (100%) using lm-kmeans...done (0.29 secs)
Fitting 4 models...done (1.2 secs)
---------------------------------------------------------------------------
> 
> 
> 
> 
> cleanEx()
> nameEx("latrendBoot")
> ### * latrendBoot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendBoot
> ### Title: Cluster longitudinal data using bootstrapping
> ### Aliases: latrendBoot
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> bootModels <- latrendBoot(method, latrendData, samples = 10)
---------------------------------------------------------------------------
- Longitudinal cluster estimation using 10 bootstrap samples
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering of 10 dataset(s) using 10 method(s)
---------------------------------------------------------------------------

Fitting 10 models...
 --------------------------------------------------------------------------
 Fitting model 1/10 (10%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1454669357
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1454669357.
  Cluster step...
 Fitting model 1/10 (10%) using lm-kmeans...done (0.22 secs)
 Fitting model 2/10 (20%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           295877382
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 295877382.
  Cluster step...
 Fitting model 2/10 (20%) using lm-kmeans...done (0.21 secs)
 Fitting model 3/10 (30%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           441165587
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 441165587.
  Cluster step...
 Fitting model 3/10 (30%) using lm-kmeans...done (0.22 secs)
 Fitting model 4/10 (40%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           663270440
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 663270440.
  Cluster step...
 Fitting model 4/10 (40%) using lm-kmeans...done (0.22 secs)
 Fitting model 5/10 (50%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1543695780
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1543695780.
  Cluster step...
 Fitting model 5/10 (50%) using lm-kmeans...done (0.21 secs)
 Fitting model 6/10 (60%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1315842594
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1315842594.
  Cluster step...
 Fitting model 6/10 (60%) using lm-kmeans...done (0.21 secs)
 Fitting model 7/10 (70%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1252367230
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1252367230.
  Cluster step...
 Fitting model 7/10 (70%) using lm-kmeans...done (0.22 secs)
 Fitting model 8/10 (80%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1610844829
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1610844829.
  Cluster step...
 Fitting model 8/10 (80%) using lm-kmeans...done (0.22 secs)
 Fitting model 9/10 (90%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           631041790
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 631041790.
  Cluster step...
 Fitting model 9/10 (90%) using lm-kmeans...done (0.22 secs)
 Fitting model 10/10 (100%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           419724847
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 419724847.
  Cluster step...
 Fitting model 10/10 (100%) using lm-kmeans...done (0.33 secs)
Fitting 10 models...done (2.4 secs)
---------------------------------------------------------------------------
> 
> bootMAE <- metric(bootModels, name = "MAE")
> mean(bootMAE)
[1] 0.2135171
> sd(bootMAE)
[1] 0.006683718
> 
> 
> 
> cleanEx()
> nameEx("latrendCV")
> ### * latrendCV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendCV
> ### Title: Cluster longitudinal data over k folds
> ### Aliases: latrendCV
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> 
> if (require("caret")) {
+   model <- latrendCV(method, latrendData, folds = 5, seed = 1)
+ 
+   model <- latrendCV(method, subset(latrendData, Time < .5), folds = 5)
+ }
Loading required package: caret
Loading required package: ggplot2
Loading required package: lattice

Attaching package: ‘caret’

The following object is masked from ‘package:latrend’:

    confusionMatrix

---------------------------------------------------------------------------
- Longitudinal clustering with 5-fold cross validation
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering of 5 dataset(s) using 1 method(s)
---------------------------------------------------------------------------

Fitting 5 models...
 --------------------------------------------------------------------------
 Fitting model 1/5 (20%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           778402354
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 778402354.
  Cluster step...
 Fitting model 1/5 (20%) using lm-kmeans...done (0.39 secs)
 Fitting model 2/5 (40%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1162807070
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1162807070.
  Cluster step...
 Fitting model 2/5 (40%) using lm-kmeans...done (0.3 secs)
 Fitting model 3/5 (60%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           117301597
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 117301597.
  Cluster step...
 Fitting model 3/5 (60%) using lm-kmeans...done (0.33 secs)
 Fitting model 4/5 (80%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1602292808
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1602292808.
  Cluster step...
 Fitting model 4/5 (80%) using lm-kmeans...done (0.33 secs)
 Fitting model 5/5 (100%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           595415630
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 595415630.
  Cluster step...
 Fitting model 5/5 (100%) using lm-kmeans...done (0.31 secs)
Fitting 5 models...done (1.7 secs)
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering with 5-fold cross validation
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering of 5 dataset(s) using 1 method(s)
---------------------------------------------------------------------------

Fitting 5 models...
 --------------------------------------------------------------------------
 Fitting model 1/5 (20%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           412954681
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 412954681.
  Cluster step...
 Fitting model 1/5 (20%) using lm-kmeans...done (0.36 secs)
 Fitting model 2/5 (40%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           766244996
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 766244996.
  Cluster step...
 Fitting model 2/5 (40%) using lm-kmeans...done (0.36 secs)
 Fitting model 3/5 (60%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1516145999
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1516145999.
  Cluster step...
 Fitting model 3/5 (60%) using lm-kmeans...done (0.34 secs)
 Fitting model 4/5 (80%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1981434963
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1981434963.
  Cluster step...
 Fitting model 4/5 (80%) using lm-kmeans...done (0.3 secs)
 Fitting model 5/5 (100%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           461750913
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 461750913.
  Cluster step...
 Fitting model 5/5 (100%) using lm-kmeans...done (0.32 secs)
Fitting 5 models...done (1.7 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:caret’, ‘package:lattice’, ‘package:ggplot2’

> nameEx("latrendData")
> ### * latrendData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendData
> ### Title: Artificial longitudinal dataset comprising three classes
> ### Aliases: latrendData
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("ggplot2")) {
+   plotTrajectories(latrendData, id = "Id", time = "Time", response = "Y")
+ 
+   # plot according to the reference class
+   plotTrajectories(latrendData, id = "Id", time = "Time", response = "Y", cluster = "Class")
+ }
Loading required package: ggplot2
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("latrendRep")
> ### * latrendRep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendRep
> ### Title: Cluster longitudinal data repeatedly
> ### Aliases: latrendRep
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> models <- latrendRep(method, data = latrendData, .rep = 5) # 5 repeated runs
---------------------------------------------------------------------------
- Repeated (5) longitudinal clustering using "lm-kmeans"
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------

Checking the training data and ensuring the standard data format.
Preparing the training data for fitting...
 Representation step...
Fitting the methods...
 Fitting model 1/5 (20%)...
  Setting seed 1140350788.
  Cluster step...
 Fitting model 2/5 (40%)...
  Setting seed 312928385.
  Cluster step...
 Fitting model 3/5 (60%)...
  Setting seed 866248189.
  Cluster step...
 Fitting model 4/5 (80%)...
  Setting seed 1909893419.
  Cluster step...
 Fitting model 5/5 (100%)...
  Setting seed 554504146.
  Cluster step...
Done fitting the methods (0.2 secs)
---------------------------------------------------------------------------
> 
> models <- latrendRep(method, data = latrendData, .seed = 1, .rep = 3)
---------------------------------------------------------------------------
- Repeated (3) longitudinal clustering using "lm-kmeans"
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Generating method seeds for seed = 1.
Checking the training data and ensuring the standard data format.
Preparing the training data for fitting...
 Representation step...
Fitting the methods...
 Fitting model 1/3 (33%)...
  Setting seed 1140350788.
  Cluster step...
 Fitting model 2/3 (67%)...
  Setting seed 312928385.
  Cluster step...
 Fitting model 3/3 (100%)...
  Setting seed 866248189.
  Cluster step...
Done fitting the methods (0.12 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("lcFitMethods")
> ### * lcFitMethods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcFitMethods
> ### Title: Method fit modifiers
> ### Aliases: lcFitMethods lcFitConverged-class lcFitConverged
> ###   lcFitRep-class lcFitRep lcFitRepMin lcFitRepMax
> 
> ### ** Examples
> 
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 2)
> metaMethod <- lcFitConverged(method, maxRep = 10)
> metaMethod
lcFitConverged encapsulating:
 lcMethodLMKM specifying "lm-kmeans"
  time:           "Time"
  id:             "Id"
  nClusters:      2
  center:         meanNA
  standardize:    scale
  method:         "qr"
  model:          TRUE
  y:              FALSE
  qr:             TRUE
  singular.ok:    TRUE
  contrasts:      NULL
  iter.max:       10
  nstart:         1
  algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
  formula:        Y ~ Time
 with meta-method arguments:
  maxRep:         10
> model <- latrend(metaMethod, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
  lcMethodLMKM specifying "lm-kmeans"
  time:           "Time"
  id:             "Id"
  nClusters:      2
  center:         meanNA
  standardize:    scale
  method:         "qr"
  model:          TRUE
  y:              FALSE
  qr:             TRUE
  singular.ok:    TRUE
  contrasts:      NULL
  iter.max:       10
  nstart:         1
  algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
  formula:        Y ~ Time
  with meta-method arguments:
   maxRep:         10
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
  Cluster step...
Done fitting the method (0.033 secs)
---------------------------------------------------------------------------
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 2)
> repMethod <- lcFitRep(method, rep = 10, metric = "RSS", maximize = FALSE)
> repMethod
lcFitRep encapsulating:
 lcMethodLMKM specifying "lm-kmeans"
  time:           "Time"
  id:             "Id"
  nClusters:      2
  center:         meanNA
  standardize:    scale
  method:         "qr"
  model:          TRUE
  y:              FALSE
  qr:             TRUE
  singular.ok:    TRUE
  contrasts:      NULL
  iter.max:       10
  nstart:         1
  algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
  formula:        Y ~ Time
 with meta-method arguments:
  rep:            10
  metric:         "RSS"
  maximize:       FALSE
> model <- latrend(repMethod, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
  lcMethodLMKM specifying "lm-kmeans"
  time:           "Time"
  id:             "Id"
  nClusters:      2
  center:         meanNA
  standardize:    scale
  method:         "qr"
  model:          TRUE
  y:              FALSE
  qr:             TRUE
  singular.ok:    TRUE
  contrasts:      NULL
  iter.max:       10
  nstart:         1
  algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
  formula:        Y ~ Time
  with meta-method arguments:
   rep:            10
   metric:         "RSS"
   maximize:       FALSE
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Repeated fitting 1 / 10
  Cluster step...
 Repeated fitting 2 / 10
  Cluster step...
 Repeated fitting 3 / 10
  Cluster step...
 Repeated fitting 4 / 10
  Cluster step...
 Repeated fitting 5 / 10
  Cluster step...
 Repeated fitting 6 / 10
  Cluster step...
 Repeated fitting 7 / 10
  Cluster step...
 Repeated fitting 8 / 10
  Cluster step...
 Repeated fitting 9 / 10
  Cluster step...
 Repeated fitting 10 / 10
  Cluster step...
Done fitting the method (1 secs)
---------------------------------------------------------------------------
> 
> minMethod <- lcFitRepMin(method, rep = 10, metric = "RSS")
> 
> maxMethod <- lcFitRepMax(method, rep = 10, metric = "ASW")
> 
> 
> 
> cleanEx()
> nameEx("lcMethod-class")
> ### * lcMethod-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethod-class
> ### Title: lcMethod class
> ### Aliases: lcMethod-class lcMethod
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 2)
> method
lcMethodLMKM specifying "lm-kmeans"
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
> 
> method <- new("lcMethodLMKM", formula = Y ~ Time, id = "Id", time = "Time", nClusters = 2)
> 
> # get argument names
> names(method)
 [1] "time"        "id"          "nClusters"   "center"      "standardize"
 [6] "method"      "model"       "y"           "qr"          "singular.ok"
[11] "contrasts"   "iter.max"    "nstart"      "algorithm"   "formula"    
> 
> # evaluate argument
> method$nClusters
[1] 2
> 
> # create a copy with updated nClusters argument
> method3 <- update(method, nClusters = 3)
> 
> 
> 
> cleanEx()
> nameEx("lcMethodAkmedoids")
> ### * lcMethodAkmedoids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodAkmedoids
> ### Title: Specify AKMedoids method
> ### Aliases: lcMethodAkmedoids
> 
> ### ** Examples
> 
> data(latrendData)
> if (require("akmedoids")) {
+   method <- lcMethodAkmedoids(response = "Y", time = "Time", id = "Id", nClusters = 3)
+   model <- latrend(method, data = latrendData)
+ }
Loading required package: akmedoids
---------------------------------------------------------------------------
- Longitudinal clustering using: anchored k-medoids
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 clusterCenter:  median
 crit:           "Calinski_Harabasz"
 method:         "linear"
 quality_plot:   FALSE
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
[1] "Processing...."
[1] ".............."
[1] "solution of k = 3 determined!"
Done fitting the method (0.96 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:akmedoids’

> nameEx("lcMethodCrimCV")
> ### * lcMethodCrimCV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodCrimCV
> ### Title: Specify a zero-inflated repeated-measures GBTM method
> ### Aliases: lcMethodCrimCV
> 
> ### ** Examples
> 
> # This example is not tested because crimCV sometimes fails
> # to converge and throws the error "object 'Frtr' not found"
> ## Not run: 
> ##D data(latrendData)
> ##D if (require("crimCV")) {
> ##D   method <- lcMethodCrimCV("Y", id = "Id", time = "Time", nClusters = 3, dpolyp = 1, init = 2)
> ##D   model <- latrend(method, data = subset(latrendData, Time > .5))
> ##D 
> ##D   if (require("ggplot2")) {
> ##D     plot(model)
> ##D   }
> ##D 
> ##D   data(TO1adj)
> ##D   method <- lcMethodCrimCV(response = "Offenses", time = "Offense", id = "Subject",
> ##D     nClusters = 2, dpolyp = 1, init = 2)
> ##D   model <- latrend(method, data = TO1adj[1:100, ])
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("lcMethodDtwclust")
> ### * lcMethodDtwclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodDtwclust
> ### Title: Specify time series clustering via dtwclust
> ### Aliases: lcMethodDtwclust
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("dtwclust")) {
+   method <- lcMethodDtwclust("Y", id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ }
Loading required package: dtwclust
Loading required package: proxy

Attaching package: ‘proxy’

The following objects are masked from ‘package:stats’:

    as.dist, dist

The following object is masked from ‘package:base’:

    as.matrix

Loading required package: dtw
Loaded dtw v1.23-1. See ?dtw for help, citation("dtw") for use in publication.

dtwclust:
Setting random number generator to L'Ecuyer-CMRG (see RNGkind()).
To read the included vignettes type: browseVignettes("dtwclust").
See news(package = "dtwclust") after package updates.
---------------------------------------------------------------------------
- Longitudinal clustering using: time series clustering with dtw_basic-dissimilarity
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 type:           "partitional"
 preproc:        NULL
 distance:       "dtw_basic"
 centroid:       ifelse(type == "fuzzy", "fcm", "pam")
 control:        do.call(paste0(type, "_control"), list()
 args:           tsclust_args()
 seed:           NULL
 error.check:    TRUE
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
 

	Precomputing distance matrix...

Iteration 1: Changes / Distsum = 200 / 503.6816
Iteration 2: Changes / Distsum = 15 / 433.2011
Iteration 3: Changes / Distsum = 12 / 422.8487
Iteration 4: Changes / Distsum = 8 / 416.0618
Iteration 5: Changes / Distsum = 6 / 413.7749
Iteration 6: Changes / Distsum = 13 / 409.3693
Iteration 7: Changes / Distsum = 7 / 407.0692
Iteration 8: Changes / Distsum = 0 / 407.0692

	Elapsed time is 0.261 seconds.

Done fitting the method (0.33 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:dtwclust’, ‘package:dtw’, ‘package:proxy’

> nameEx("lcMethodFlexmix")
> ### * lcMethodFlexmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodFlexmix
> ### Title: Method interface to flexmix()
> ### Aliases: lcMethodFlexmix
> 
> ### ** Examples
> 
> data(latrendData)
> if (require("flexmix")) {
+   method <- lcMethodFlexmix(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ }
Loading required package: flexmix
Loading required package: lattice
---------------------------------------------------------------------------
- Longitudinal clustering using: flexmix
---------------------------------------------------------------------------
Method arguments:
 formula.mb:     ~1
 time:           "Time"
 id:             "Id"
 nClusters:      3
 cluster:        NULL
 model:          NULL
 control:        NULL
 weights:        NULL
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.95 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:flexmix’, ‘package:lattice’

> nameEx("lcMethodFlexmixGBTM")
> ### * lcMethodFlexmixGBTM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodFlexmixGBTM
> ### Title: Group-based trajectory modeling using flexmix
> ### Aliases: lcMethodFlexmixGBTM
> 
> ### ** Examples
> 
> data(latrendData)
> if (require("flexmix")) {
+   method <- lcMethodFlexmixGBTM(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ }
Loading required package: flexmix
Loading required package: lattice
---------------------------------------------------------------------------
- Longitudinal clustering using: group-based trajectory model
---------------------------------------------------------------------------
Method arguments:
 formula.mb:     ~1
 time:           "Time"
 id:             "Id"
 nClusters:      3
 cluster:        NULL
 model:          NULL
 control:        NULL
 weights:        NULL
 formula:        Y ~ Time
 family:         c("gaussian", "binomial", "poisson", "Ga
 offset:         NULL
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.32 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:flexmix’, ‘package:lattice’

> nameEx("lcMethodFunFEM")
> ### * lcMethodFunFEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodFunFEM
> ### Title: Specify a FunFEM method
> ### Aliases: lcMethodFunFEM
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("funFEM") && require("fda")) {
+   method <- lcMethodFunFEM("Y", id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ 
+   method <- lcMethodFunFEM("Y",
+    basis = function(time) {
+       create.bspline.basis(time, nbasis = 10, norder = 4)
+    }
+   )
+ }
Loading required package: funFEM
Loading required package: MASS
Loading required package: fda
Loading required package: splines
Loading required package: fds
Loading required package: rainbow
Loading required package: pcaPP
Loading required package: RCurl
Loading required package: deSolve

Attaching package: ‘fda’

The following object is masked from ‘package:graphics’:

    matplot

Loading required package: elasticnet
Loading required package: lars
Loaded lars 1.3

---------------------------------------------------------------------------
- Longitudinal clustering using: functional subspace clustering with FunFEM
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 basis:          function(time) fda::create.bspline.basis
 model:          "AkjBk"
 crit:           "bic"
 init:           "kmeans"
 Tinit:          c()
 maxit:          50
 eps:            1e-06
 lambda:         0
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (1 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:funFEM’, ‘package:elasticnet’, ‘package:lars’,
  ‘package:fda’, ‘package:deSolve’, ‘package:fds’, ‘package:RCurl’,
  ‘package:rainbow’, ‘package:pcaPP’, ‘package:splines’, ‘package:MASS’

> nameEx("lcMethodFunction")
> ### * lcMethodFunction
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodFunction
> ### Title: Specify a custom method based on a function
> ### Aliases: lcMethodFunction
> 
> ### ** Examples
> 
> data(latrendData)
> # Stratification based on the mean response level
> clusfun <- function(data, response, id, time, ...) {
+   clusters <- data.table::as.data.table(data)[, mean(Y) > 0, by = Id]$V1
+   lcModelPartition(
+     data = data,
+     trajectoryAssignments = factor(
+       clusters,
+       levels = c(FALSE, TRUE),
+       labels = c("Low", "High")
+     ),
+     response = response,
+     time = time,
+     id = id
+   )
+ }
> method <- lcMethodFunction(response = "Y", fun = clusfun, id = "Id", time = "Time")
> model <- latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: custom
---------------------------------------------------------------------------
Method arguments:
 center:         meanNA
 time:           "Time"
 id:             "Id"
 name:           "custom"
 response:       "Y"
 fun:            clusfun
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.023 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("lcMethodGCKM")
> ### * lcMethodGCKM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodGCKM
> ### Title: Two-step clustering through latent growth curve modeling and
> ###   k-means
> ### Aliases: lcMethodGCKM
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("lme4")) {
+   method <- lcMethodGCKM(Y ~ (Time | Id), id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ }
Loading required package: lme4
Loading required package: Matrix
---------------------------------------------------------------------------
- Longitudinal clustering using: two-step using LME and k-means
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 REML:           TRUE
 control:        lmerControl()
 start:          NULL
 contrasts:      NULL
 devFunOnly:     FALSE
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 formula:        Y ~ (Time | Id)
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.029 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’

> nameEx("lcMethodKML")
> ### * lcMethodKML
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodKML
> ### Title: Specify a longitudinal k-means (KML) method
> ### Aliases: lcMethodKML
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("kml")) {
+   method <- lcMethodKML("Y", id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ }
Loading required package: kml
Loading required package: clv
Loading required package: cluster
Loading required package: class
Loading required package: longitudinalData
Loading required package: rgl
Loading required package: misc3d

Attaching package: ‘longitudinalData’

The following object is masked from ‘package:latrend’:

    meanNA

---------------------------------------------------------------------------
- Longitudinal clustering using: longitudinal k-means (KML)
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
 ~ Fast KmL ~
********************S
Done fitting the method (1 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:kml’, ‘package:longitudinalData’, ‘package:misc3d’,
  ‘package:rgl’, ‘package:clv’, ‘package:class’, ‘package:cluster’

> nameEx("lcMethodLMKM")
> ### * lcMethodLMKM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodLMKM
> ### Title: Two-step clustering through linear regression modeling and
> ###   k-means
> ### Aliases: lcMethodLMKM
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.022 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("lcMethodLcmmGBTM")
> ### * lcMethodLcmmGBTM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodLcmmGBTM
> ### Title: Specify GBTM method
> ### Aliases: lcMethodLcmmGBTM
> 
> ### ** Examples
> 
> data(latrendData)
> if (rlang::is_installed("lcmm")) {
+   method <- lcMethodLcmmGBTM(
+     fixed = Y ~ Time,
+     mixture = ~ 1,
+    id = "Id",
+    time = "Time",
+    nClusters = 3
+   )
+   gbtm <- latrend(method, data = latrendData)
+   summary(gbtm)
+ 
+   method <- lcMethodLcmmGBTM(
+     fixed = Y ~ Time,
+     mixture = ~ Time,
+     id = "Id",
+     time = "Time",
+     nClusters = 3
+   )
+ }
---------------------------------------------------------------------------
- Longitudinal clustering using: group-based trajectory modeling using lcmm
---------------------------------------------------------------------------
Method arguments:
 mixture:        ~1
 classmb:        ~1
 time:           "Time"
 id:             "Id"
 nClusters:      3
 init:           "default"
 idiag:          FALSE
 nwg:            FALSE
 cor:            NULL
 convB:          1e-04
 convL:          1e-04
 convG:          1e-04
 pprior:         NULL
 maxiter:        500
 subset:         NULL
 na.action:      1
 posfix:         NULL
 var.time:       NULL
 partialH:       FALSE
 nproc:          1
 clustertype:    NULL
 fixed:          Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
 Fitting standard linear mixed model for initializing the mixture estimation...
------------------ iteration  0 ------------------
Function value  -3305.592 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295723
parameter2  1.00000000
parameter3  1.00000000

------------------ iteration  1 ------------------
Function value  -1734.439 
Convergence criteria: parameters stability= 0.4549852 
                    : function stability= 1571.153 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.4572794
parameter2  0.5232458
parameter3  0.7817312

------------------ iteration  2 ------------------
Function value  -1734.421 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01789124 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.4572795
parameter2  0.5232431
parameter3  0.7817212

------------------ iteration  3 ------------------
Function value  -1514.243 
Convergence criteria: parameters stability= 2.098398 
                    : function stability= 220.1778 
                    : relative distance to maximum(RDM)= 4093.049 
                 coef
parameter1 -0.5198895
parameter2  0.2393904
parameter3 -0.6374000

------------------ iteration  4 ------------------
Function value  -1514.22 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.02332214 
                    : relative distance to maximum(RDM)= 4090.921 
                 coef
parameter1 -0.5198816
parameter2  0.2393909
parameter3 -0.6373901

------------------ iteration  5 ------------------
Function value  -1514.197 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.02332088 
                    : relative distance to maximum(RDM)= 4088.837 
                 coef
parameter1 -0.5198747
parameter2  0.2393924
parameter3 -0.6373800

------------------ iteration  6 ------------------
Function value  -1383.633 
Convergence criteria: parameters stability= 0.155725 
                    : function stability= 130.5639 
                    : relative distance to maximum(RDM)= 149.4479 
                 coef
parameter1 -0.3091971
parameter2  0.3138116
parameter3 -0.3121082

------------------ iteration  7 ------------------
Function value  -1140.381 
Convergence criteria: parameters stability= 0.00852576 
                    : function stability= 243.2518 
                    : relative distance to maximum(RDM)= 41.51194 
                 coef
parameter1 -0.2705361
parameter2  0.2424892
parameter3 -0.3562011

------------------ iteration  8 ------------------
Function value  -1069.856 
Convergence criteria: parameters stability= 0.01032877 
                    : function stability= 70.52481 
                    : relative distance to maximum(RDM)= 4.209667 
                 coef
parameter1 -0.2060939
parameter2  0.1727871
parameter3 -0.3924999

------------------ iteration  9 ------------------
Function value  -1063.11 
Convergence criteria: parameters stability= 0.00158953 
                    : function stability= 6.746472 
                    : relative distance to maximum(RDM)= 0.06222483 
                 coef
parameter1 -0.1803781
parameter2  0.1473150
parameter3 -0.4092151

------------------ iteration  10 ------------------
Function value  -1063.015 
Convergence criteria: parameters stability= 2.256e-05 
                    : function stability= 0.09433224 
                    : relative distance to maximum(RDM)= 1.788e-05 
                 coef
parameter1 -0.1774510
parameter2  0.1444913
parameter3 -0.4116683

------------------ iteration  11 ------------------
Function value  -1063.015 
Convergence criteria: parameters stability= 1e-08 
                    : function stability= 2.683e-05 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1 -0.1774070
parameter2  0.1444497
parameter3 -0.4117121

The program took 0.23 seconds 
------------------ iteration  0 ------------------
Function value  -1060.942 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1  0.0000000
parameter2  0.0000000
parameter3 -0.1945179
parameter4 -0.1774070
parameter5 -0.1602960
parameter6  0.1444497
parameter7 -0.4117121

------------------ iteration  1 ------------------
Function value  -1040.277 
Convergence criteria: parameters stability= 0.00439791 
                    : function stability= 20.6654 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00023465
parameter2 -0.00045418
parameter3 -0.24152489
parameter4 -0.17692004
parameter5 -0.11377959
parameter6  0.14445231
parameter7 -0.40681583

------------------ iteration  2 ------------------
Function value  -993.7736 
Convergence criteria: parameters stability= 0.03849861 
                    : function stability= 46.5031 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00650092
parameter2 -0.01971082
parameter3 -0.32285769
parameter4 -0.21896099
parameter5  0.05840982
parameter6  0.14185636
parameter7 -0.39973532

------------------ iteration  3 ------------------
Function value  -983.4672 
Convergence criteria: parameters stability= 0.05513769 
                    : function stability= 10.3064 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.02714328
parameter2  0.20456900
parameter3 -0.36668886
parameter4 -0.18010908
parameter5  0.05940519
parameter6  0.14173240
parameter7 -0.38322232

------------------ iteration  4 ------------------
Function value  -983.4671 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.0001445 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.02714951
parameter2  0.20457900
parameter3 -0.36668985
parameter4 -0.18010934
parameter5  0.05940559
parameter6  0.14173237
parameter7 -0.38322226

------------------ iteration  5 ------------------
Function value  -967.6235 
Convergence criteria: parameters stability= 2.02493 
                    : function stability= 15.84353 
                    : relative distance to maximum(RDM)= 1.131383 
                 coef
parameter1 -0.5824433
parameter2  1.5075284
parameter3 -0.4869535
parameter4 -0.2032992
parameter5  0.1204690
parameter6  0.1387673
parameter7 -0.3704416

------------------ iteration  6 ------------------
Function value  -963.2659 
Convergence criteria: parameters stability= 0.0544265 
                    : function stability= 4.357653 
                    : relative distance to maximum(RDM)= 0.2916272 
                 coef
parameter1 -0.7906077
parameter2  1.5438908
parameter3 -0.5837541
parameter4 -0.2045180
parameter5  0.1397605
parameter6  0.1438441
parameter7 -0.3718892

------------------ iteration  7 ------------------
Function value  -962.2846 
Convergence criteria: parameters stability= 0.4451523 
                    : function stability= 0.9812986 
                    : relative distance to maximum(RDM)= 0.00878651 
                 coef
parameter1 -1.4330421
parameter2  1.3909273
parameter3 -0.6746616
parameter4 -0.2230504
parameter5  0.1191933
parameter6  0.1442983
parameter7 -0.3731912

------------------ iteration  8 ------------------
Function value  -962.2536 
Convergence criteria: parameters stability= 0.00174615 
                    : function stability= 0.03101885 
                    : relative distance to maximum(RDM)= 7.43e-06 
                 coef
parameter1 -1.4604543
parameter2  1.3611574
parameter3 -0.6849029
parameter4 -0.2227449
parameter5  0.1173345
parameter6  0.1444489
parameter7 -0.3733110

------------------ iteration  9 ------------------
Function value  -962.2536 
Convergence criteria: parameters stability= 7.17e-06 
                    : function stability= 2.606e-05 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1 -1.4630262
parameter2  1.3606610
parameter3 -0.6854437
parameter4 -0.2228127
parameter5  0.1172473
parameter6  0.1444497
parameter7 -0.3733210

The program took 0.67 seconds 
Done fitting the method (0.95 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("lcMethodLcmmGMM")
> ### * lcMethodLcmmGMM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodLcmmGMM
> ### Title: Specify GMM method using lcmm
> ### Aliases: lcMethodLcmmGMM
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (rlang::is_installed("lcmm")) {
+   method <- lcMethodLcmmGMM(
+     fixed = Y ~ Time,
+     mixture = ~ Time,
+     random = ~ 1,
+     id = "Id",
+     time = "Time", ,
+     nClusters = 2
+   )
+   gmm <- latrend(method, data = latrendData)
+   summary(gmm)
+ 
+   method <- lcMethodLcmmGMM(
+     fixed = Y ~ Time,
+     mixture = ~ Time,
+     random = ~ Time,
+     id = "Id",
+     time = "Time",
+     nClusters = 3
+   )
+ }
---------------------------------------------------------------------------
- Longitudinal clustering using: growth mixture model
---------------------------------------------------------------------------
Method arguments:
 mixture:        ~Time
 random:         ~1
 classmb:        ~1
 time:           "Time"
 id:             "Id"
 init:           "lme"
 nClusters:      2
 idiag:          FALSE
 nwg:            FALSE
 cor:            NULL
 convB:          1e-04
 convL:          1e-04
 convG:          1e-04
 pprior:         NULL
 maxiter:        500
 na.action:      1
 posfix:         NULL
 var.time:       NULL
 partialH:       FALSE
 nproc:          1
 clustertype:    NULL
 fixed:          Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
 Fitting standard linear mixed model for initializing the mixture estimation...
------------------ iteration  0 ------------------
Function value  -2211.674 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295723
parameter2  0.00000000
parameter3  1.00000000
parameter4  1.00000000

------------------ iteration  1 ------------------
Function value  -2211.661 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01365446 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295781
parameter2  0.00000137
parameter3  0.99999000
parameter4  0.99999246

------------------ iteration  2 ------------------
Function value  -2211.643 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01733755 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295808
parameter2  0.00000233
parameter3  0.99998055
parameter4  0.99998246

------------------ iteration  3 ------------------
Function value  -1439.862 
Convergence criteria: parameters stability= 0.280072 
                    : function stability= 771.7816 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.04031975
parameter2  0.04576697
parameter3  0.64986537
parameter4  0.60584696

------------------ iteration  4 ------------------
Function value  -1439.841 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.02074656 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.04032027
parameter2  0.04576783
parameter3  0.64985797
parameter4  0.60583696

------------------ iteration  5 ------------------
Function value  -1259.308 
Convergence criteria: parameters stability= 0.1423089 
                    : function stability= 180.5326 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.05020431
parameter2  0.06607079
parameter3  0.47182147
parameter4  0.27402077

------------------ iteration  6 ------------------
Function value  -1182.724 
Convergence criteria: parameters stability= 1.186942 
                    : function stability= 76.58411 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17261108
parameter2  0.09024304
parameter3 -0.61021076
parameter4  0.29811228

------------------ iteration  7 ------------------
Function value  -1182.721 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00300208 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17261028
parameter2  0.09024312
parameter3 -0.61020076
parameter4  0.29811233

------------------ iteration  8 ------------------
Function value  -1182.718 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00380941 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17260961
parameter2  0.09024344
parameter3 -0.61019076
parameter4  0.29811260

------------------ iteration  9 ------------------
Function value  -1070.899 
Convergence criteria: parameters stability= 0.05788247 
                    : function stability= 111.819 
                    : relative distance to maximum(RDM)= 735.0503 
                 coef
parameter1 -0.1578944
parameter2  0.1032584
parameter3 -0.3706614
parameter4  0.3091681

------------------ iteration  10 ------------------
Function value  -1070.895 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00369269 
                    : relative distance to maximum(RDM)= 734.1069 
                 coef
parameter1 -0.1578937
parameter2  0.1032586
parameter3 -0.3706514
parameter4  0.3091682

------------------ iteration  11 ------------------
Function value  -1070.891 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00379712 
                    : relative distance to maximum(RDM)= 732.7804 
                 coef
parameter1 -0.1578932
parameter2  0.1032587
parameter3 -0.3706414
parameter4  0.3091683

------------------ iteration  12 ------------------
Function value  -1044.445 
Convergence criteria: parameters stability= 0.5764923 
                    : function stability= 26.44575 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270200
parameter2  0.1190798
parameter3  0.3877042
parameter4  0.3233399

------------------ iteration  13 ------------------
Function value  -1044.442 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00348247 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270206
parameter2  0.1190798
parameter3  0.3876942
parameter4  0.3233399

------------------ iteration  14 ------------------
Function value  -1044.438 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00354728 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270210
parameter2  0.1190798
parameter3  0.3876842
parameter4  0.3233400

------------------ iteration  15 ------------------
Function value  -1044.435 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00359666 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270214
parameter2  0.1190799
parameter3  0.3876742
parameter4  0.3233402

------------------ iteration  16 ------------------
Function value  -990.0216 
Convergence criteria: parameters stability= 0.03537848 
                    : function stability= 54.41312 
                    : relative distance to maximum(RDM)= 12.63568 
                 coef
parameter1 -0.1312689
parameter2  0.1205435
parameter3  0.1996607
parameter4  0.3263760

------------------ iteration  17 ------------------
Function value  -973.447 
Convergence criteria: parameters stability= 0.00032527 
                    : function stability= 16.5746 
                    : relative distance to maximum(RDM)= 5.923463 
                 coef
parameter1 -0.1424467
parameter2  0.1250521
parameter3  0.1966761
parameter4  0.3394560

------------------ iteration  18 ------------------
Function value  -961.3928 
Convergence criteria: parameters stability= 0.00105038 
                    : function stability= 12.05426 
                    : relative distance to maximum(RDM)= 0.5934875 
                 coef
parameter1 -0.1651657
parameter2  0.1362990
parameter3  0.1897439
parameter4  0.3584212

------------------ iteration  19 ------------------
Function value  -960.1702 
Convergence criteria: parameters stability= 0.00024153 
                    : function stability= 1.22258 
                    : relative distance to maximum(RDM)= 0.00468293 
                 coef
parameter1 -0.1762450
parameter2  0.1435650
parameter3  0.1871355
parameter4  0.3661144

------------------ iteration  20 ------------------
Function value  -960.1608 
Convergence criteria: parameters stability= 2.61e-06 
                    : function stability= 0.00939257 
                    : relative distance to maximum(RDM)= 5.3e-07 
                 coef
parameter1 -0.1773901
parameter2  0.1444374
parameter3  0.1869344
parameter4  0.3668221

------------------ iteration  21 ------------------
Function value  -960.1608 
Convergence criteria: parameters stability= 0 
                    : function stability= 1.06e-06 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1 -0.1774069
parameter2  0.1444497
parameter3  0.1869323
parameter4  0.3668285

The program took 0.63 seconds 
------------------ iteration  0 ------------------
Function value  -959.2723 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1  0.0000000
parameter2 -0.1874958
parameter3 -0.1673180
parameter4  0.1380242
parameter5  0.1508751
parameter6  0.1869323
parameter7  0.3668285

------------------ iteration  1 ------------------
Function value  -957.1753 
Convergence criteria: parameters stability= 6.129e-05 
                    : function stability= 2.096957 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00000062
parameter2 -0.18754771
parameter3 -0.16726570
parameter4  0.13249696
parameter5  0.15640299
parameter6  0.18678235
parameter7  0.36643190

------------------ iteration  2 ------------------
Function value  -939.833 
Convergence criteria: parameters stability= 0.00086888 
                    : function stability= 17.34234 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00005619
parameter2 -0.18764866
parameter3 -0.16715783
parameter4  0.11167008
parameter5  0.17722906
parameter6  0.18612622
parameter7  0.36546029

------------------ iteration  3 ------------------
Function value  -920.4693 
Convergence criteria: parameters stability= 0.00046287 
                    : function stability= 19.36369 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.00005138
parameter2 -0.18638636
parameter3 -0.16848311
parameter4  0.09661454
parameter5  0.19246104
parameter6  0.18589482
parameter7  0.36457997

------------------ iteration  4 ------------------
Function value  -871.5999 
Convergence criteria: parameters stability= 0.00215893 
                    : function stability= 48.86941 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.00007543
parameter2 -0.18536968
parameter3 -0.16960355
parameter4  0.06493828
parameter5  0.22641521
parameter6  0.18585693
parameter7  0.36397647

------------------ iteration  5 ------------------
Function value  -807.588 
Convergence criteria: parameters stability= 0.00298216 
                    : function stability= 64.01191 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00102682
parameter2 -0.17310219
parameter3 -0.18293716
parameter4  0.03023777
parameter5  0.26375491
parameter6  0.18741815
parameter7  0.35677548

------------------ iteration  6 ------------------
Function value  -237.3395 
Convergence criteria: parameters stability= 0.2142391 
                    : function stability= 570.2485 
                    : relative distance to maximum(RDM)= 90.6668 
                  coef
parameter1  0.04942916
parameter2  0.03542505
parameter3 -0.40107813
parameter4 -0.17659645
parameter5  0.51490386
parameter6  0.24019594
parameter7  0.24638741

------------------ iteration  7 ------------------
Function value  -122.3375 
Convergence criteria: parameters stability= 0.3104587 
                    : function stability= 115.002 
                    : relative distance to maximum(RDM)= 15.18437 
                 coef
parameter1  0.3041221
parameter2  0.2220450
parameter3 -0.7842628
parameter4 -0.2303117
parameter5  0.7456562
parameter6  0.1869164
parameter7  0.1759455

------------------ iteration  8 ------------------
Function value  -61.37525 
Convergence criteria: parameters stability= 0.0110935 
                    : function stability= 60.96221 
                    : relative distance to maximum(RDM)= 1.503595 
                 coef
parameter1  0.3888843
parameter2  0.1996796
parameter3 -0.7470719
parameter4 -0.2256203
parameter5  0.7092421
parameter6  0.2038002
parameter7  0.1957557

------------------ iteration  9 ------------------
Function value  -55.7481 
Convergence criteria: parameters stability= 0.00068913 
                    : function stability= 5.627153 
                    : relative distance to maximum(RDM)= 0.02132023 
                 coef
parameter1  0.4051420
parameter2  0.1937573
parameter3 -0.7347525
parameter4 -0.2241003
parameter5  0.6982025
parameter6  0.2096329
parameter7  0.2046874

------------------ iteration  10 ------------------
Function value  -55.67276 
Convergence criteria: parameters stability= 5.11e-06 
                    : function stability= 0.07533719 
                    : relative distance to maximum(RDM)= 5.03e-06 
                 coef
parameter1  0.4054644
parameter2  0.1932930
parameter3 -0.7334677
parameter4 -0.2239391
parameter5  0.6970453
parameter6  0.2101179
parameter7  0.2059298

------------------ iteration  11 ------------------
Function value  -55.67274 
Convergence criteria: parameters stability= 0 
                    : function stability= 1.761e-05 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1  0.4054651
parameter2  0.1932891
parameter3 -0.7334510
parameter4 -0.2239371
parameter5  0.6970299
parameter6  0.2101202
parameter7  0.2059496

The program took 0.55 seconds 
Done fitting the method (1.2 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("lcMethodMclustLLPA")
> ### * lcMethodMclustLLPA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMclustLLPA
> ### Title: Longitudinal latent profile analysis
> ### Aliases: lcMethodMclustLLPA
> 
> ### ** Examples
> 
> data(latrendData)
> if (require("mclust")) {
+   method <- lcMethodMclustLLPA("Y", id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ }
Loading required package: mclust
Package 'mclust' version 6.0.0
Type 'citation("mclust")' for citing this R package in publications.
---------------------------------------------------------------------------
- Longitudinal clustering using: longitudinal latent profile analysis
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 modelNames:     NULL
 prior:          NULL
 control:        emControl()
 initialization: NULL
 warn:           mclust.options("warn")
 x:              NULL
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.84 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:mclust’

> nameEx("lcMethodMixAK_GLMM")
> ### * lcMethodMixAK_GLMM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixAK_GLMM
> ### Title: Specify a GLMM iwht a normal mixture in the random effects
> ### Aliases: lcMethodMixAK_GLMM
> 
> ### ** Examples
> 
> data(latrendData)
> # this example only runs when the mixAK package is installed
> try({
+  method <- lcMethodMixAK_GLMM(fixed = Y ~ 1, random = ~ Time,
+   id = "Id", time = "Time", nClusters = 3)
+  model <- latrend(method, latrendData)
+  summary(model)
+ })
Error in loadNamespace(x) : there is no package called ‘mixAK’
> 
> 
> 
> cleanEx()
> nameEx("lcMethodMixTVEM")
> ### * lcMethodMixTVEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixTVEM
> ### Title: Specify a MixTVEM
> ### Aliases: lcMethodMixTVEM
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lcMethodMixtoolsGMM")
> ### * lcMethodMixtoolsGMM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixtoolsGMM
> ### Title: Specify mixed mixture regression model using mixtools
> ### Aliases: lcMethodMixtoolsGMM
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lcMethodMixtoolsNPRM")
> ### * lcMethodMixtoolsNPRM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixtoolsNPRM
> ### Title: Specify non-parametric estimation for independent repeated
> ###   measures
> ### Aliases: lcMethodMixtoolsNPRM
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("mixtools")) {
+   method <- lcMethodMixtoolsNPRM("Y", id = "Id", time = "Time", nClusters = 3)
+   model <- latrend(method, latrendData)
+ }
Loading required package: mixtools
mixtools package, version 2.0.0, Released 2022-12-04
This package is based upon work supported by the National Science Foundation under Grant No. SES-0518772 and the Chan Zuckerberg Initiative: Essential Open Source Software for Science (Grant No. 2020-255193).

---------------------------------------------------------------------------
- Longitudinal clustering using: non-parametric estimation for independent repeated measurements using mixtools
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 blockid:        NULL
 bw:             NULL
 h:              NULL
 samebw:         TRUE
 eps:            1e-08
 maxiter:        500
 stochastic:     FALSE
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.28 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:mixtools’

> nameEx("lcMethodRandom")
> ### * lcMethodRandom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodRandom
> ### Title: Specify a random-partitioning method
> ### Aliases: lcMethodRandom
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodRandom(response = "Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.008 secs)
---------------------------------------------------------------------------
> 
> # uniform clusters
> method <- lcMethodRandom(
+   alpha = 1e3,
+   nClusters = 3,
+   response = "Y",
+   id = "Id",
+   time = "Time"
+ )
> 
> # single large cluster
> method <- lcMethodRandom(
+   alpha = c(100, 1, 1, 1),
+   nClusters = 4,
+   response = "Y",
+   id = "Id",
+   time = "Time"
+ )
> 
> 
> 
> cleanEx()
> nameEx("lcMethodStratify")
> ### * lcMethodStratify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodStratify
> ### Title: Specify a stratification method
> ### Aliases: lcMethodStratify
> 
> ### ** Examples
> 
> data(latrendData)
> # Stratification based on the mean response level
> method <- lcMethodStratify(
+   "Y",
+   mean(Y) > 0,
+   clusterNames = c("Low", "High"),
+   id = "Id",
+   time = "Time"
+ )
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: stratify
---------------------------------------------------------------------------
Method arguments:
 center:         meanNA
 nClusters:      NaN
 clusterNames:   c("Low", "High")
 time:           "Time"
 id:             "Id"
 name:           "stratify"
 response:       "Y"
 stratify:       mean(Y) > 0
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.018 secs)
---------------------------------------------------------------------------
> summary(model)
Longitudinal cluster model using stratify
lcMethodStratify specifying "stratify"
 center:         `meanNA`
 nClusters:      NaN
 clusterNames:   "Low", "High"
 time:           "Time"
 id:             "Id"
 name:           "stratify"
 response:       "Y"
 stratify:       mean(Y) > 0

Cluster sizes (K=2):
        Low        High 
119 (59.5%)  81 (40.5%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-3.85807 -0.57074  0.08278  0.00000  0.65266  2.90961 

> 
> # Stratification function
> stratfun <- function(trajdata) {
+    trajmean <- mean(trajdata$Y)
+    factor(
+      trajmean > 1.7,
+      levels = c(FALSE, TRUE),
+      labels = c("Low", "High")
+    )
+ }
> method <- lcMethodStratify("Y", stratfun, id = "Id", time = "Time")
> 
> # Multiple clusters
> stratfun3 <- function(trajdata) {
+    trajmean <- mean(trajdata$Y)
+    cut(
+      trajmean,
+      c(-Inf, .5, 2, Inf),
+      labels = c("Low", "Medium", "High")
+    )
+ }
> method <- lcMethodStratify("Y", stratfun3, id = "Id", time = "Time")
> 
> 
> 
> cleanEx()
> nameEx("lcMethods")
> ### * lcMethods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethods
> ### Title: Generate a list of lcMethod objects
> ### Aliases: lcMethods
> 
> ### ** Examples
> 
> data(latrendData)
> baseMethod <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> methods <- lcMethods(baseMethod, nClusters = 1:6)
> 
> nclus <- 1:6
> methods <- lcMethods(baseMethod, nClusters = nclus)
> 
> # list notation, useful for providing functions
> methods <- lcMethods(baseMethod, nClusters = .(1, 3, 5))
> length(methods) # 3
[1] 3
> 
> 
> 
> cleanEx()
> nameEx("lcModelPartition")
> ### * lcModelPartition
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcModelPartition
> ### Title: Create a lcModel with pre-defined partitioning
> ### Aliases: lcModelPartition
> 
> ### ** Examples
> 
> # comparing a model to the ground truth using the adjusted Rand index
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.019 secs)
---------------------------------------------------------------------------
> 
> # extract the reference class from the Class column
> trajLabels <- aggregate(Class ~ Id, head, 1, data = latrendData)
> trajLabels$Cluster <- trajLabels$Class
> refModel <- lcModelPartition(latrendData, response = "Y", trajectoryAssignments = trajLabels)
> 
> if (require("mclustcomp")) {
+   externalMetric(model, refModel, "adjustedRand")
+ }
Loading required package: mclustcomp
adjustedRand 
   0.9669189 
> 
> 
> 
> cleanEx()

detaching ‘package:mclustcomp’

> nameEx("lcModels")
> ### * lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcModels
> ### Title: Construct a flat (named) list of lcModel objects
> ### Aliases: lcModels lcModels-class
> 
> ### ** Examples
> 
> data(latrendData)
> lmkmMethod <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> lmkmModel <- latrend(lmkmMethod, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.019 secs)
---------------------------------------------------------------------------
> rngMethod <- lcMethodRandom("Y", id = "Id", time = "Time")
> rngModel <- latrend(rngMethod, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.009 secs)
---------------------------------------------------------------------------
> 
> lcModels(lmkmModel, rngModel)
List of 2 lcModels with
  .name .method                                                  standardize
1     1    lmkm function (x, center = TRUE, scale = TRUE) UseMethod("scale")
2     2    part                                                         <NA>
  method model     y   qr singular.ok iter.max nstart
1     qr  TRUE FALSE TRUE        TRUE       10      1
2   <NA>    NA    NA   NA          NA       NA     NA
                                         algorithm  formula alpha   name
1 c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen") Y ~ Time    NA   <NA>
2                                             <NA>     <NA>    10 random
  response
1     <NA>
2        Y
> 
> lcModels(defaults = c(lmkmModel, rngModel))
List of 2 lcModels with
      .name .method
1 defaults1    lmkm
2 defaults2    part
                                                   standardize method model
1 function (x, center = TRUE, scale = TRUE) UseMethod("scale")     qr  TRUE
2                                                         <NA>   <NA>    NA
      y   qr singular.ok iter.max nstart
1 FALSE TRUE        TRUE       10      1
2    NA   NA          NA       NA     NA
                                         algorithm  formula alpha   name
1 c("Hartigan-Wong", "Lloyd", "Forgy", "MacQueen") Y ~ Time    NA   <NA>
2                                             <NA>     <NA>    10 random
  response
1     <NA>
2        Y
> 
> 
> 
> cleanEx()
> nameEx("logLik.lcModel")
> ### * logLik.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLik.lcModel
> ### Title: Extract the log-likelihood of a lcModel
> ### Aliases: logLik.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (rlang::is_installed("lcmm")) {
+   method <- lcMethodLcmmGBTM(
+     fixed = Y ~ Time,
+     mixture = ~ 1,
+     id = "Id",
+     time = "Time",
+     nClusters = 3
+   )
+   gbtm <- latrend(method, data = latrendData)
+   logLik(gbtm)
+ }
---------------------------------------------------------------------------
- Longitudinal clustering using: group-based trajectory modeling using lcmm
---------------------------------------------------------------------------
Method arguments:
 mixture:        ~1
 classmb:        ~1
 time:           "Time"
 id:             "Id"
 nClusters:      3
 init:           "default"
 idiag:          FALSE
 nwg:            FALSE
 cor:            NULL
 convB:          1e-04
 convL:          1e-04
 convG:          1e-04
 pprior:         NULL
 maxiter:        500
 subset:         NULL
 na.action:      1
 posfix:         NULL
 var.time:       NULL
 partialH:       FALSE
 nproc:          1
 clustertype:    NULL
 fixed:          Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
 Fitting standard linear mixed model for initializing the mixture estimation...
------------------ iteration  0 ------------------
Function value  -3305.592 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295723
parameter2  1.00000000
parameter3  1.00000000

------------------ iteration  1 ------------------
Function value  -1734.439 
Convergence criteria: parameters stability= 0.4549852 
                    : function stability= 1571.153 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.4572794
parameter2  0.5232458
parameter3  0.7817312

------------------ iteration  2 ------------------
Function value  -1734.421 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01789124 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.4572795
parameter2  0.5232431
parameter3  0.7817212

------------------ iteration  3 ------------------
Function value  -1514.243 
Convergence criteria: parameters stability= 2.098398 
                    : function stability= 220.1778 
                    : relative distance to maximum(RDM)= 4093.049 
                 coef
parameter1 -0.5198895
parameter2  0.2393904
parameter3 -0.6374000

------------------ iteration  4 ------------------
Function value  -1514.22 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.02332214 
                    : relative distance to maximum(RDM)= 4090.921 
                 coef
parameter1 -0.5198816
parameter2  0.2393909
parameter3 -0.6373901

------------------ iteration  5 ------------------
Function value  -1514.197 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.02332088 
                    : relative distance to maximum(RDM)= 4088.837 
                 coef
parameter1 -0.5198747
parameter2  0.2393924
parameter3 -0.6373800

------------------ iteration  6 ------------------
Function value  -1383.633 
Convergence criteria: parameters stability= 0.155725 
                    : function stability= 130.5639 
                    : relative distance to maximum(RDM)= 149.4479 
                 coef
parameter1 -0.3091971
parameter2  0.3138116
parameter3 -0.3121082

------------------ iteration  7 ------------------
Function value  -1140.381 
Convergence criteria: parameters stability= 0.00852576 
                    : function stability= 243.2518 
                    : relative distance to maximum(RDM)= 41.51194 
                 coef
parameter1 -0.2705361
parameter2  0.2424892
parameter3 -0.3562011

------------------ iteration  8 ------------------
Function value  -1069.856 
Convergence criteria: parameters stability= 0.01032877 
                    : function stability= 70.52481 
                    : relative distance to maximum(RDM)= 4.209667 
                 coef
parameter1 -0.2060939
parameter2  0.1727871
parameter3 -0.3924999

------------------ iteration  9 ------------------
Function value  -1063.11 
Convergence criteria: parameters stability= 0.00158953 
                    : function stability= 6.746472 
                    : relative distance to maximum(RDM)= 0.06222483 
                 coef
parameter1 -0.1803781
parameter2  0.1473150
parameter3 -0.4092151

------------------ iteration  10 ------------------
Function value  -1063.015 
Convergence criteria: parameters stability= 2.256e-05 
                    : function stability= 0.09433224 
                    : relative distance to maximum(RDM)= 1.788e-05 
                 coef
parameter1 -0.1774510
parameter2  0.1444913
parameter3 -0.4116683

------------------ iteration  11 ------------------
Function value  -1063.015 
Convergence criteria: parameters stability= 1e-08 
                    : function stability= 2.683e-05 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1 -0.1774070
parameter2  0.1444497
parameter3 -0.4117121

The program took 0.23 seconds 
------------------ iteration  0 ------------------
Function value  -1060.942 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1  0.0000000
parameter2  0.0000000
parameter3 -0.1945179
parameter4 -0.1774070
parameter5 -0.1602960
parameter6  0.1444497
parameter7 -0.4117121

------------------ iteration  1 ------------------
Function value  -1040.277 
Convergence criteria: parameters stability= 0.00439791 
                    : function stability= 20.6654 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00023465
parameter2 -0.00045418
parameter3 -0.24152489
parameter4 -0.17692004
parameter5 -0.11377959
parameter6  0.14445231
parameter7 -0.40681583

------------------ iteration  2 ------------------
Function value  -993.7736 
Convergence criteria: parameters stability= 0.03849861 
                    : function stability= 46.5031 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00650092
parameter2 -0.01971082
parameter3 -0.32285769
parameter4 -0.21896099
parameter5  0.05840982
parameter6  0.14185636
parameter7 -0.39973532

------------------ iteration  3 ------------------
Function value  -983.4672 
Convergence criteria: parameters stability= 0.05513769 
                    : function stability= 10.3064 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.02714328
parameter2  0.20456900
parameter3 -0.36668886
parameter4 -0.18010908
parameter5  0.05940519
parameter6  0.14173240
parameter7 -0.38322232

------------------ iteration  4 ------------------
Function value  -983.4671 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.0001445 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.02714951
parameter2  0.20457900
parameter3 -0.36668985
parameter4 -0.18010934
parameter5  0.05940559
parameter6  0.14173237
parameter7 -0.38322226

------------------ iteration  5 ------------------
Function value  -967.6235 
Convergence criteria: parameters stability= 2.02493 
                    : function stability= 15.84353 
                    : relative distance to maximum(RDM)= 1.131383 
                 coef
parameter1 -0.5824433
parameter2  1.5075284
parameter3 -0.4869535
parameter4 -0.2032992
parameter5  0.1204690
parameter6  0.1387673
parameter7 -0.3704416

------------------ iteration  6 ------------------
Function value  -963.2659 
Convergence criteria: parameters stability= 0.0544265 
                    : function stability= 4.357653 
                    : relative distance to maximum(RDM)= 0.2916272 
                 coef
parameter1 -0.7906077
parameter2  1.5438908
parameter3 -0.5837541
parameter4 -0.2045180
parameter5  0.1397605
parameter6  0.1438441
parameter7 -0.3718892

------------------ iteration  7 ------------------
Function value  -962.2846 
Convergence criteria: parameters stability= 0.4451523 
                    : function stability= 0.9812986 
                    : relative distance to maximum(RDM)= 0.00878651 
                 coef
parameter1 -1.4330421
parameter2  1.3909273
parameter3 -0.6746616
parameter4 -0.2230504
parameter5  0.1191933
parameter6  0.1442983
parameter7 -0.3731912

------------------ iteration  8 ------------------
Function value  -962.2536 
Convergence criteria: parameters stability= 0.00174615 
                    : function stability= 0.03101885 
                    : relative distance to maximum(RDM)= 7.43e-06 
                 coef
parameter1 -1.4604543
parameter2  1.3611574
parameter3 -0.6849029
parameter4 -0.2227449
parameter5  0.1173345
parameter6  0.1444489
parameter7 -0.3733110

------------------ iteration  9 ------------------
Function value  -962.2536 
Convergence criteria: parameters stability= 7.17e-06 
                    : function stability= 2.606e-05 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1 -1.4630262
parameter2  1.3606610
parameter3 -0.6854437
parameter4 -0.2228127
parameter5  0.1172473
parameter6  0.1444497
parameter7 -0.3733210

The program took 0.66 seconds 
Done fitting the method (0.93 secs)
---------------------------------------------------------------------------
'log Lik.' -962.2536 (df=7)
> 
> 
> 
> cleanEx()
> nameEx("max.lcModels")
> ### * max.lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: max.lcModels
> ### Title: Select the lcModel with the highest metric value
> ### Aliases: max.lcModels
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> 
> model1 <- latrend(method, latrendData, nClusters = 1)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      1
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.012 secs)
---------------------------------------------------------------------------
> model2 <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.023 secs)
---------------------------------------------------------------------------
> model3 <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.02 secs)
---------------------------------------------------------------------------
> 
> models <- lcModels(model1, model2, model3)
> 
> if (require("clusterCrit")) {
+   max(models, "Dunn")
+ }
Loading required package: clusterCrit
Longitudinal cluster model using lmkm
lcMethodLMKM specifying "lm-kmeans"
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         `meanNA`
 standardize:    `scale`
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
 formula:        Y ~ Time

Cluster sizes (K=2):
        A         B 
120 (60%)  80 (40%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-3.57615 -0.62971  0.05638  0.00000  0.65400  3.20251 

> 
> 
> 
> cleanEx()

detaching ‘package:clusterCrit’

> nameEx("metric")
> ### * metric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: metric
> ### Title: Compute internal model metric(s)
> ### Aliases: metric metric,lcModel-method metric,list-method
> ###   metric,lcModels-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.021 secs)
---------------------------------------------------------------------------
> metric(model, "WMAE")
     WMAE 
0.2158127 
> 
> if (require("clusterCrit")) {
+   metric(model, c("WMAE", "Dunn"))
+ }
Loading required package: clusterCrit
     WMAE      Dunn 
0.2158127 0.2204919 
> 
> 
> 
> cleanEx()

detaching ‘package:clusterCrit’

> nameEx("min.lcModels")
> ### * min.lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min.lcModels
> ### Title: Select the lcModel with the lowest metric value
> ### Aliases: min.lcModels
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> 
> model1 <- latrend(method, latrendData, nClusters = 1)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      1
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.012 secs)
---------------------------------------------------------------------------
> model2 <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.019 secs)
---------------------------------------------------------------------------
> model3 <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.02 secs)
---------------------------------------------------------------------------
> 
> models <- lcModels(model1, model2, model3)
> 
> min(models, "WMAE")
Longitudinal cluster model using lmkm
lcMethodLMKM specifying "lm-kmeans"
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         `meanNA`
 standardize:    `scale`
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
 formula:        Y ~ Time

Cluster sizes (K=3):
         A          B          C 
 120 (60%) 39 (19.5%) 41 (20.5%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-4.07173 -0.63323  0.03828  0.00000  0.66900  3.44575 

> 
> 
> 
> cleanEx()
> nameEx("model.data.lcModel")
> ### * model.data.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.data.lcModel
> ### Title: Extract the model data that was used for fitting
> ### Aliases: model.data.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.023 secs)
---------------------------------------------------------------------------
> model.data(model)
      Id      Time             Y   Class
1      1 0.0000000 -1.080492e+00 Class 1
2      1 0.2222222 -6.802415e-01 Class 1
3      1 0.4444444 -6.514837e-01 Class 1
4      1 0.6666667 -3.911540e-01 Class 1
5      1 0.8888889 -1.940788e-01 Class 1
6      1 1.1111111 -2.991783e-02 Class 1
7      1 1.3333333  9.158311e-02 Class 1
8      1 1.5555556  1.797706e-01 Class 1
9      1 1.7777778  3.951063e-01 Class 1
10     1 2.0000000  1.832502e-01 Class 1
11     2 0.0000000 -9.837238e-01 Class 1
12     2 0.2222222 -5.473079e-01 Class 1
13     2 0.4444444 -2.072449e-01 Class 1
14     2 0.6666667 -1.436001e-01 Class 1
15     2 0.8888889  9.662936e-02 Class 1
16     2 1.1111111  3.741209e-01 Class 1
17     2 1.3333333  5.583489e-01 Class 1
18     2 1.5555556  5.267654e-01 Class 1
19     2 1.7777778  4.646849e-01 Class 1
20     2 2.0000000  7.948924e-01 Class 1
21     3 0.0000000 -1.107182e+00 Class 1
22     3 0.2222222 -9.905167e-01 Class 1
23     3 0.4444444 -6.342835e-01 Class 1
24     3 0.6666667 -5.515270e-01 Class 1
25     3 0.8888889 -1.059173e-01 Class 1
26     3 1.1111111  1.715294e-01 Class 1
27     3 1.3333333 -1.975520e-02 Class 1
28     3 1.5555556  1.601880e-01 Class 1
29     3 1.7777778  2.286929e-01 Class 1
30     3 2.0000000  2.398571e-01 Class 1
31     4 0.0000000 -7.247443e-01 Class 1
32     4 0.2222222 -1.614159e-01 Class 1
33     4 0.4444444 -9.429476e-02 Class 1
34     4 0.6666667  2.872764e-01 Class 1
35     4 0.8888889  5.404596e-01 Class 1
36     4 1.1111111  6.132204e-01 Class 1
37     4 1.3333333  8.346134e-01 Class 1
38     4 1.5555556  8.157076e-01 Class 1
39     4 1.7777778  7.868733e-01 Class 1
40     4 2.0000000  9.101294e-01 Class 1
41     5 0.0000000 -9.445309e-01 Class 1
42     5 0.2222222 -4.356978e-01 Class 1
43     5 0.4444444 -3.661023e-01 Class 1
44     5 0.6666667 -6.981846e-02 Class 1
45     5 0.8888889  3.508655e-02 Class 1
46     5 1.1111111 -1.560706e-01 Class 1
47     5 1.3333333  9.878099e-02 Class 1
48     5 1.5555556  2.441337e-01 Class 1
49     5 1.7777778  3.218698e-01 Class 1
50     5 2.0000000  3.605647e-02 Class 1
51     6 0.0000000 -1.149971e+00 Class 1
52     6 0.2222222 -9.652510e-01 Class 1
53     6 0.4444444 -6.782703e-01 Class 1
54     6 0.6666667 -4.962241e-01 Class 1
55     6 0.8888889 -2.632388e-01 Class 1
56     6 1.1111111  7.109115e-02 Class 1
57     6 1.3333333  2.601961e-01 Class 1
58     6 1.5555556  1.037659e-01 Class 1
59     6 1.7777778  2.779068e-01 Class 1
60     6 2.0000000  4.572028e-01 Class 1
61     7 0.0000000 -8.990750e-01 Class 1
62     7 0.2222222 -3.162423e-01 Class 1
63     7 0.4444444 -1.267186e-01 Class 1
64     7 0.6666667  5.023628e-02 Class 1
65     7 0.8888889  1.936485e-01 Class 1
66     7 1.1111111  3.840635e-01 Class 1
67     7 1.3333333  4.089981e-01 Class 1
68     7 1.5555556  6.263455e-01 Class 1
69     7 1.7777778  7.560140e-01 Class 1
70     7 2.0000000  7.212783e-01 Class 1
71     8 0.0000000 -8.598270e-01 Class 1
72     8 0.2222222 -6.207953e-01 Class 1
73     8 0.4444444 -1.897843e-01 Class 1
74     8 0.6666667  1.058528e-01 Class 1
75     8 0.8888889  3.979398e-01 Class 1
76     8 1.1111111  2.925497e-01 Class 1
77     8 1.3333333  5.829132e-01 Class 1
78     8 1.5555556  6.523827e-01 Class 1
79     8 1.7777778  7.914801e-01 Class 1
80     8 2.0000000  6.728391e-01 Class 1
81     9 0.0000000 -8.629955e-01 Class 1
82     9 0.2222222 -6.285156e-01 Class 1
83     9 0.4444444 -2.916511e-01 Class 1
84     9 0.6666667 -4.170240e-02 Class 1
85     9 0.8888889  4.244783e-01 Class 1
86     9 1.1111111  5.894826e-01 Class 1
87     9 1.3333333  4.440597e-01 Class 1
88     9 1.5555556  4.327576e-01 Class 1
89     9 1.7777778  3.767190e-01 Class 1
90     9 2.0000000  6.228616e-01 Class 1
91    10 0.0000000 -1.200674e+00 Class 1
92    10 0.2222222 -5.439025e-01 Class 1
93    10 0.4444444 -5.811882e-01 Class 1
94    10 0.6666667 -2.412800e-01 Class 1
95    10 0.8888889  3.293666e-01 Class 1
96    10 1.1111111 -1.328653e-03 Class 1
97    10 1.3333333  2.620363e-01 Class 1
98    10 1.5555556  2.028012e-01 Class 1
99    10 1.7777778  3.909610e-01 Class 1
100   10 2.0000000  2.720679e-01 Class 1
101   11 0.0000000 -5.387353e-01 Class 1
102   11 0.2222222 -2.643987e-01 Class 1
103   11 0.4444444 -8.078835e-02 Class 1
104   11 0.6666667  2.714066e-01 Class 1
105   11 0.8888889  5.626728e-01 Class 1
106   11 1.1111111  7.766386e-01 Class 1
107   11 1.3333333  5.941937e-01 Class 1
108   11 1.5555556  7.812206e-01 Class 1
109   11 1.7777778  9.573348e-01 Class 1
110   11 2.0000000  7.256745e-01 Class 1
111   12 0.0000000 -1.135897e+00 Class 1
112   12 0.2222222 -6.583827e-01 Class 1
113   12 0.4444444 -3.827679e-01 Class 1
114   12 0.6666667 -4.205279e-02 Class 1
115   12 0.8888889  1.125608e-01 Class 1
116   12 1.1111111  3.363140e-01 Class 1
117   12 1.3333333  3.916509e-01 Class 1
118   12 1.5555556  5.525176e-01 Class 1
119   12 1.7777778  5.202166e-01 Class 1
120   12 2.0000000  6.780326e-01 Class 1
121   13 0.0000000 -1.260105e+00 Class 1
122   13 0.2222222 -8.481724e-01 Class 1
123   13 0.4444444 -6.960972e-01 Class 1
124   13 0.6666667 -3.566909e-01 Class 1
125   13 0.8888889 -1.916500e-01 Class 1
126   13 1.1111111 -2.042207e-01 Class 1
127   13 1.3333333  6.141094e-02 Class 1
128   13 1.5555556  2.659510e-01 Class 1
129   13 1.7777778  2.486595e-01 Class 1
130   13 2.0000000  1.879279e-01 Class 1
131   14 0.0000000 -1.783642e+00 Class 1
132   14 0.2222222 -1.249131e+00 Class 1
133   14 0.4444444 -1.099285e+00 Class 1
134   14 0.6666667 -9.330387e-01 Class 1
135   14 0.8888889 -5.438213e-01 Class 1
136   14 1.1111111 -6.446524e-01 Class 1
137   14 1.3333333 -4.365322e-01 Class 1
138   14 1.5555556 -2.773758e-01 Class 1
139   14 1.7777778 -3.235148e-01 Class 1
140   14 2.0000000 -4.321330e-01 Class 1
141   15 0.0000000 -7.043625e-01 Class 1
142   15 0.2222222 -3.024509e-01 Class 1
143   15 0.4444444 -1.566331e-03 Class 1
144   15 0.6666667  1.944902e-01 Class 1
145   15 0.8888889  5.305120e-01 Class 1
146   15 1.1111111  5.586155e-01 Class 1
147   15 1.3333333  6.221944e-01 Class 1
148   15 1.5555556  8.334759e-01 Class 1
149   15 1.7777778  6.075780e-01 Class 1
150   15 2.0000000  8.754605e-01 Class 1
151   16 0.0000000 -9.637840e-01 Class 1
152   16 0.2222222 -7.055013e-01 Class 1
153   16 0.4444444 -5.037680e-01 Class 1
154   16 0.6666667 -1.800992e-01 Class 1
155   16 0.8888889  2.263311e-01 Class 1
156   16 1.1111111  1.694383e-01 Class 1
157   16 1.3333333  1.435539e-01 Class 1
158   16 1.5555556  5.513790e-01 Class 1
159   16 1.7777778  4.739464e-01 Class 1
160   16 2.0000000  4.874058e-01 Class 1
161   17 0.0000000 -1.126393e+00 Class 1
162   17 0.2222222 -6.969631e-01 Class 1
163   17 0.4444444 -3.539397e-01 Class 1
164   17 0.6666667 -2.516744e-01 Class 1
165   17 0.8888889 -6.196773e-02 Class 1
166   17 1.1111111  2.604942e-01 Class 1
167   17 1.3333333  2.386981e-01 Class 1
168   17 1.5555556  3.205717e-01 Class 1
169   17 1.7777778  3.075906e-01 Class 1
170   17 2.0000000  4.543123e-01 Class 1
171   18 0.0000000 -8.162685e-01 Class 1
172   18 0.2222222 -3.322693e-01 Class 1
173   18 0.4444444 -7.647547e-02 Class 1
174   18 0.6666667  1.683667e-02 Class 1
175   18 0.8888889  3.295751e-01 Class 1
176   18 1.1111111  4.850401e-01 Class 1
177   18 1.3333333  5.460491e-01 Class 1
178   18 1.5555556  7.535891e-01 Class 1
179   18 1.7777778  3.779811e-01 Class 1
180   18 2.0000000  4.413298e-01 Class 1
181   19 0.0000000 -8.912856e-01 Class 1
182   19 0.2222222 -4.161494e-01 Class 1
183   19 0.4444444  6.755616e-03 Class 1
184   19 0.6666667  2.577855e-01 Class 1
185   19 0.8888889  3.410240e-01 Class 1
186   19 1.1111111  5.427533e-01 Class 1
187   19 1.3333333  5.635838e-01 Class 1
188   19 1.5555556  7.086477e-01 Class 1
189   19 1.7777778  7.435472e-01 Class 1
190   19 2.0000000  6.344865e-01 Class 1
191   20 0.0000000 -8.511591e-01 Class 1
192   20 0.2222222 -5.222303e-01 Class 1
193   20 0.4444444 -9.578424e-02 Class 1
194   20 0.6666667 -1.047966e-01 Class 1
195   20 0.8888889 -1.796624e-02 Class 1
196   20 1.1111111  4.253539e-01 Class 1
197   20 1.3333333  3.824626e-01 Class 1
198   20 1.5555556  4.965144e-01 Class 1
199   20 1.7777778  6.671359e-01 Class 1
200   20 2.0000000  4.973909e-01 Class 1
201   21 0.0000000 -7.584135e-01 Class 1
202   21 0.2222222 -2.797421e-01 Class 1
203   21 0.4444444 -1.223377e-01 Class 1
204   21 0.6666667  9.436062e-02 Class 1
205   21 0.8888889  2.022779e-01 Class 1
206   21 1.1111111  2.385694e-01 Class 1
207   21 1.3333333  2.993715e-01 Class 1
208   21 1.5555556  4.839809e-01 Class 1
209   21 1.7777778  7.242704e-01 Class 1
210   21 2.0000000  5.245418e-01 Class 1
211   22 0.0000000 -7.489218e-01 Class 1
212   22 0.2222222 -4.184928e-01 Class 1
213   22 0.4444444 -2.161782e-01 Class 1
214   22 0.6666667 -8.294123e-02 Class 1
215   22 0.8888889  5.195937e-01 Class 1
216   22 1.1111111  3.652302e-01 Class 1
217   22 1.3333333  4.938118e-01 Class 1
218   22 1.5555556  4.210046e-01 Class 1
219   22 1.7777778  6.124987e-01 Class 1
220   22 2.0000000  6.101237e-01 Class 1
221   23 0.0000000 -1.003182e+00 Class 1
222   23 0.2222222 -8.497474e-01 Class 1
223   23 0.4444444 -2.255166e-01 Class 1
224   23 0.6666667 -5.965912e-05 Class 1
225   23 0.8888889  8.060012e-02 Class 1
226   23 1.1111111  5.011825e-02 Class 1
227   23 1.3333333  3.406893e-01 Class 1
228   23 1.5555556  3.141312e-01 Class 1
229   23 1.7777778  3.368333e-01 Class 1
230   23 2.0000000  4.956039e-01 Class 1
231   24 0.0000000 -1.719594e+00 Class 1
232   24 0.2222222 -1.338136e+00 Class 1
233   24 0.4444444 -1.089848e+00 Class 1
234   24 0.6666667 -7.839737e-01 Class 1
235   24 0.8888889 -7.519621e-01 Class 1
236   24 1.1111111 -5.132420e-01 Class 1
237   24 1.3333333 -2.590546e-01 Class 1
238   24 1.5555556 -2.113717e-01 Class 1
239   24 1.7777778 -3.220349e-01 Class 1
240   24 2.0000000 -1.749806e-01 Class 1
241   25 0.0000000 -1.057316e+00 Class 1
242   25 0.2222222 -5.473713e-01 Class 1
243   25 0.4444444 -1.807962e-01 Class 1
244   25 0.6666667 -9.628620e-02 Class 1
245   25 0.8888889  1.481882e-01 Class 1
246   25 1.1111111  1.352046e-01 Class 1
247   25 1.3333333  4.825111e-01 Class 1
248   25 1.5555556  2.763853e-01 Class 1
249   25 1.7777778  4.532454e-01 Class 1
250   25 2.0000000  4.447657e-01 Class 1
251   26 0.0000000 -1.010746e+00 Class 1
252   26 0.2222222 -7.655726e-01 Class 1
253   26 0.4444444 -2.061414e-01 Class 1
254   26 0.6666667 -2.775033e-01 Class 1
255   26 0.8888889  1.059987e-01 Class 1
256   26 1.1111111 -3.780193e-02 Class 1
257   26 1.3333333  3.925013e-01 Class 1
258   26 1.5555556  5.398044e-01 Class 1
259   26 1.7777778  4.374378e-01 Class 1
260   26 2.0000000  6.339589e-01 Class 1
261   27 0.0000000 -1.013641e+00 Class 1
262   27 0.2222222 -6.392049e-01 Class 1
263   27 0.4444444 -5.507768e-01 Class 1
264   27 0.6666667 -3.326122e-01 Class 1
265   27 0.8888889 -2.213248e-01 Class 1
266   27 1.1111111  7.545760e-02 Class 1
267   27 1.3333333  8.619469e-02 Class 1
268   27 1.5555556  3.617543e-01 Class 1
269   27 1.7777778  3.334246e-01 Class 1
270   27 2.0000000  5.391234e-01 Class 1
271   28 0.0000000 -1.556996e+00 Class 1
272   28 0.2222222 -1.027316e+00 Class 1
273   28 0.4444444 -9.419863e-01 Class 1
274   28 0.6666667 -8.181834e-01 Class 1
275   28 0.8888889 -4.380012e-01 Class 1
276   28 1.1111111 -5.009192e-01 Class 1
277   28 1.3333333 -3.648896e-01 Class 1
278   28 1.5555556 -2.739781e-01 Class 1
279   28 1.7777778 -1.603782e-01 Class 1
280   28 2.0000000 -3.016691e-01 Class 1
281   29 0.0000000 -1.035660e+00 Class 1
282   29 0.2222222 -9.475712e-01 Class 1
283   29 0.4444444 -5.297449e-01 Class 1
284   29 0.6666667 -3.003410e-01 Class 1
285   29 0.8888889 -2.239719e-01 Class 1
286   29 1.1111111 -2.512660e-03 Class 1
287   29 1.3333333  9.297215e-02 Class 1
288   29 1.5555556  3.332638e-01 Class 1
289   29 1.7777778  4.321577e-01 Class 1
290   29 2.0000000  1.721947e-01 Class 1
291   30 0.0000000 -7.815603e-01 Class 1
292   30 0.2222222 -5.656577e-01 Class 1
293   30 0.4444444 -4.778344e-01 Class 1
294   30 0.6666667 -1.192132e-01 Class 1
295   30 0.8888889  2.004780e-01 Class 1
296   30 1.1111111  3.273535e-01 Class 1
297   30 1.3333333  1.875853e-01 Class 1
298   30 1.5555556  5.693157e-01 Class 1
299   30 1.7777778  6.167502e-01 Class 1
300   30 2.0000000  5.212491e-01 Class 1
301   31 0.0000000 -6.631530e-01 Class 1
302   31 0.2222222 -9.261232e-02 Class 1
303   31 0.4444444 -3.564894e-02 Class 1
304   31 0.6666667  1.955635e-01 Class 1
305   31 0.8888889  2.687276e-01 Class 1
306   31 1.1111111  3.912622e-01 Class 1
307   31 1.3333333  4.784554e-01 Class 1
308   31 1.5555556  6.541637e-01 Class 1
309   31 1.7777778  8.585364e-01 Class 1
310   31 2.0000000  8.844007e-01 Class 1
311   32 0.0000000 -8.739998e-01 Class 1
312   32 0.2222222 -6.196796e-01 Class 1
313   32 0.4444444 -5.311399e-01 Class 1
314   32 0.6666667 -4.273265e-01 Class 1
315   32 0.8888889 -1.747301e-01 Class 1
316   32 1.1111111 -2.597374e-01 Class 1
317   32 1.3333333  3.407857e-02 Class 1
318   32 1.5555556  2.758898e-01 Class 1
319   32 1.7777778  1.279352e-01 Class 1
320   32 2.0000000  1.898605e-01 Class 1
321   33 0.0000000 -8.347644e-01 Class 1
322   33 0.2222222 -6.551258e-01 Class 1
323   33 0.4444444 -1.359212e-01 Class 1
324   33 0.6666667 -9.066441e-02 Class 1
325   33 0.8888889  7.564201e-03 Class 1
326   33 1.1111111  2.606247e-01 Class 1
327   33 1.3333333  2.106316e-01 Class 1
328   33 1.5555556  5.182962e-01 Class 1
329   33 1.7777778  5.119958e-01 Class 1
330   33 2.0000000  4.167752e-01 Class 1
331   34 0.0000000 -1.064984e+00 Class 1
332   34 0.2222222 -6.025929e-01 Class 1
333   34 0.4444444 -5.220501e-01 Class 1
334   34 0.6666667 -2.732845e-01 Class 1
335   34 0.8888889  6.892312e-02 Class 1
336   34 1.1111111  1.432615e-01 Class 1
337   34 1.3333333  4.032897e-01 Class 1
338   34 1.5555556  3.738013e-01 Class 1
339   34 1.7777778  5.565245e-01 Class 1
340   34 2.0000000  4.904637e-01 Class 1
341   35 0.0000000 -1.637633e+00 Class 1
342   35 0.2222222 -1.233738e+00 Class 1
343   35 0.4444444 -6.985132e-01 Class 1
344   35 0.6666667 -5.238068e-01 Class 1
345   35 0.8888889 -4.951946e-01 Class 1
346   35 1.1111111 -3.781757e-01 Class 1
347   35 1.3333333 -2.484399e-02 Class 1
348   35 1.5555556 -1.335086e-01 Class 1
349   35 1.7777778  1.642151e-01 Class 1
350   35 2.0000000  1.580640e-01 Class 1
351   36 0.0000000 -1.269968e+00 Class 1
352   36 0.2222222 -8.965744e-01 Class 1
353   36 0.4444444 -6.640738e-01 Class 1
354   36 0.6666667 -2.388200e-01 Class 1
355   36 0.8888889 -2.406549e-01 Class 1
356   36 1.1111111 -1.606136e-01 Class 1
357   36 1.3333333  3.599800e-01 Class 1
358   36 1.5555556  3.338950e-01 Class 1
359   36 1.7777778  3.509561e-01 Class 1
360   36 2.0000000  1.992849e-01 Class 1
361   37 0.0000000 -1.119415e+00 Class 1
362   37 0.2222222 -7.365077e-01 Class 1
363   37 0.4444444 -6.462939e-01 Class 1
364   37 0.6666667 -2.897969e-01 Class 1
365   37 0.8888889 -5.850350e-02 Class 1
366   37 1.1111111  2.549866e-01 Class 1
367   37 1.3333333  2.722032e-01 Class 1
368   37 1.5555556  4.189878e-01 Class 1
369   37 1.7777778  3.480876e-01 Class 1
370   37 2.0000000  2.265448e-01 Class 1
371   38 0.0000000 -1.051762e+00 Class 1
372   38 0.2222222 -8.838731e-01 Class 1
373   38 0.4444444 -3.636203e-01 Class 1
374   38 0.6666667 -9.343773e-02 Class 1
375   38 0.8888889 -5.951364e-02 Class 1
376   38 1.1111111 -8.959115e-03 Class 1
377   38 1.3333333  3.007127e-01 Class 1
378   38 1.5555556  2.692907e-01 Class 1
379   38 1.7777778  2.405849e-01 Class 1
380   38 2.0000000  3.759187e-01 Class 1
381   39 0.0000000 -7.459770e-01 Class 1
382   39 0.2222222 -2.293298e-01 Class 1
383   39 0.4444444 -1.422129e-01 Class 1
384   39 0.6666667  2.279304e-01 Class 1
385   39 0.8888889  4.851749e-01 Class 1
386   39 1.1111111  4.302533e-01 Class 1
387   39 1.3333333  7.318273e-01 Class 1
388   39 1.5555556  7.695859e-01 Class 1
389   39 1.7777778  8.975424e-01 Class 1
390   39 2.0000000  7.608255e-01 Class 1
391   40 0.0000000 -7.797459e-01 Class 1
392   40 0.2222222 -3.192980e-01 Class 1
393   40 0.4444444 -1.666627e-01 Class 1
394   40 0.6666667  1.333159e-01 Class 1
395   40 0.8888889  2.239097e-01 Class 1
396   40 1.1111111  2.985562e-01 Class 1
397   40 1.3333333  5.163928e-01 Class 1
398   40 1.5555556  4.714701e-01 Class 1
399   40 1.7777778  3.713357e-01 Class 1
400   40 2.0000000  7.453306e-01 Class 1
401   41 0.0000000 -1.158048e+00 Class 1
402   41 0.2222222 -9.105261e-01 Class 1
403   41 0.4444444 -3.464566e-01 Class 1
404   41 0.6666667 -2.047440e-01 Class 1
405   41 0.8888889 -6.059994e-02 Class 1
406   41 1.1111111  1.449827e-01 Class 1
407   41 1.3333333  2.440877e-01 Class 1
408   41 1.5555556  4.707539e-01 Class 1
409   41 1.7777778  4.887502e-01 Class 1
410   41 2.0000000  2.487109e-01 Class 1
411   42 0.0000000 -1.040669e+00 Class 1
412   42 0.2222222 -6.782568e-01 Class 1
413   42 0.4444444 -3.985479e-01 Class 1
414   42 0.6666667 -4.617478e-01 Class 1
415   42 0.8888889 -3.629995e-02 Class 1
416   42 1.1111111  3.522448e-01 Class 1
417   42 1.3333333  3.615004e-01 Class 1
418   42 1.5555556  1.989266e-01 Class 1
419   42 1.7777778  2.520144e-01 Class 1
420   42 2.0000000  4.765132e-01 Class 1
421   43 0.0000000 -8.083165e-01 Class 1
422   43 0.2222222 -3.787186e-01 Class 1
423   43 0.4444444 -1.689078e-01 Class 1
424   43 0.6666667  4.686052e-02 Class 1
425   43 0.8888889  2.546716e-01 Class 1
426   43 1.1111111  4.109696e-01 Class 1
427   43 1.3333333  3.859167e-01 Class 1
428   43 1.5555556  8.268523e-01 Class 1
429   43 1.7777778  4.902225e-01 Class 1
430   43 2.0000000  6.297409e-01 Class 1
431   44 0.0000000 -8.874330e-01 Class 1
432   44 0.2222222 -3.491730e-01 Class 1
433   44 0.4444444 -1.637295e-01 Class 1
434   44 0.6666667 -9.644073e-02 Class 1
435   44 0.8888889  1.657713e-01 Class 1
436   44 1.1111111  4.075676e-01 Class 1
437   44 1.3333333  6.209396e-01 Class 1
438   44 1.5555556  4.943136e-01 Class 1
439   44 1.7777778  3.871101e-01 Class 1
440   44 2.0000000  3.807740e-01 Class 1
441   45 0.0000000 -1.006055e+00 Class 1
442   45 0.2222222 -1.087182e+00 Class 1
443   45 0.4444444 -2.875545e-01 Class 1
444   45 0.6666667 -3.717741e-01 Class 1
445   45 0.8888889 -1.830948e-01 Class 1
446   45 1.1111111  4.657800e-02 Class 1
447   45 1.3333333  2.531320e-01 Class 1
448   45 1.5555556  2.795410e-01 Class 1
449   45 1.7777778  1.036020e-01 Class 1
450   45 2.0000000  3.450234e-01 Class 1
451   46 0.0000000 -1.167206e+00 Class 1
452   46 0.2222222 -8.549373e-01 Class 1
453   46 0.4444444 -7.721844e-01 Class 1
454   46 0.6666667 -6.938008e-01 Class 1
455   46 0.8888889 -3.163184e-01 Class 1
456   46 1.1111111 -2.449592e-01 Class 1
457   46 1.3333333 -1.332930e-01 Class 1
458   46 1.5555556 -9.776276e-02 Class 1
459   46 1.7777778 -2.737230e-02 Class 1
460   46 2.0000000 -4.338675e-02 Class 1
461   47 0.0000000 -8.110161e-01 Class 1
462   47 0.2222222 -4.844556e-01 Class 1
463   47 0.4444444 -3.945307e-01 Class 1
464   47 0.6666667 -1.174447e-01 Class 1
465   47 0.8888889  1.385901e-01 Class 1
466   47 1.1111111  3.918271e-01 Class 1
467   47 1.3333333  3.563371e-01 Class 1
468   47 1.5555556  2.625467e-01 Class 1
469   47 1.7777778  4.866031e-01 Class 1
470   47 2.0000000  4.429864e-01 Class 1
471   48 0.0000000 -5.921908e-01 Class 1
472   48 0.2222222 -4.243584e-01 Class 1
473   48 0.4444444 -2.497724e-01 Class 1
474   48 0.6666667  3.075132e-04 Class 1
475   48 0.8888889  1.859510e-01 Class 1
476   48 1.1111111  4.077990e-01 Class 1
477   48 1.3333333  5.200458e-01 Class 1
478   48 1.5555556  6.676913e-01 Class 1
479   48 1.7777778  6.423204e-01 Class 1
480   48 2.0000000  5.683241e-01 Class 1
481   49 0.0000000 -1.127765e+00 Class 1
482   49 0.2222222 -6.584991e-01 Class 1
483   49 0.4444444 -4.559900e-01 Class 1
484   49 0.6666667 -1.987352e-01 Class 1
485   49 0.8888889  8.656103e-02 Class 1
486   49 1.1111111  3.051103e-01 Class 1
487   49 1.3333333  1.487286e-01 Class 1
488   49 1.5555556  4.832158e-01 Class 1
489   49 1.7777778  2.673256e-01 Class 1
490   49 2.0000000  3.763193e-01 Class 1
491   50 0.0000000 -7.134306e-01 Class 1
492   50 0.2222222 -4.384398e-01 Class 1
493   50 0.4444444  1.408892e-02 Class 1
494   50 0.6666667  5.467880e-02 Class 1
495   50 0.8888889  3.930233e-01 Class 1
496   50 1.1111111  4.925387e-01 Class 1
497   50 1.3333333  5.281041e-01 Class 1
498   50 1.5555556  8.306027e-01 Class 1
499   50 1.7777778  5.486753e-01 Class 1
500   50 2.0000000  7.137635e-01 Class 1
501   51 0.0000000 -1.034708e+00 Class 1
502   51 0.2222222 -5.460423e-01 Class 1
503   51 0.4444444 -2.634445e-01 Class 1
504   51 0.6666667 -1.656788e-01 Class 1
505   51 0.8888889  2.078653e-01 Class 1
506   51 1.1111111  1.965491e-01 Class 1
507   51 1.3333333  4.833223e-01 Class 1
508   51 1.5555556  5.192418e-01 Class 1
509   51 1.7777778  6.055371e-01 Class 1
510   51 2.0000000  4.392056e-01 Class 1
511   52 0.0000000 -1.174073e+00 Class 1
512   52 0.2222222 -9.117855e-01 Class 1
513   52 0.4444444 -7.337936e-01 Class 1
514   52 0.6666667 -3.325448e-01 Class 1
515   52 0.8888889  2.914863e-02 Class 1
516   52 1.1111111 -5.295508e-02 Class 1
517   52 1.3333333  1.124437e-01 Class 1
518   52 1.5555556  2.824171e-01 Class 1
519   52 1.7777778  2.586684e-01 Class 1
520   52 2.0000000  4.514625e-01 Class 1
521   53 0.0000000 -8.239427e-01 Class 1
522   53 0.2222222 -3.527244e-01 Class 1
523   53 0.4444444 -2.766667e-01 Class 1
524   53 0.6666667 -1.911554e-01 Class 1
525   53 0.8888889  1.586576e-01 Class 1
526   53 1.1111111  1.788501e-01 Class 1
527   53 1.3333333  2.858749e-01 Class 1
528   53 1.5555556  4.434030e-01 Class 1
529   53 1.7777778  5.920052e-01 Class 1
530   53 2.0000000  5.297614e-01 Class 1
531   54 0.0000000 -1.257407e+00 Class 1
532   54 0.2222222 -9.364464e-01 Class 1
533   54 0.4444444 -7.738435e-01 Class 1
534   54 0.6666667 -7.650653e-01 Class 1
535   54 0.8888889 -2.529416e-01 Class 1
536   54 1.1111111  3.718303e-02 Class 1
537   54 1.3333333 -6.059265e-02 Class 1
538   54 1.5555556 -1.281311e-01 Class 1
539   54 1.7777778  4.890522e-03 Class 1
540   54 2.0000000 -5.702712e-02 Class 1
541   55 0.0000000 -5.742568e-01 Class 1
542   55 0.2222222 -1.811731e-01 Class 1
543   55 0.4444444  1.196617e-01 Class 1
544   55 0.6666667  2.988319e-01 Class 1
545   55 0.8888889  3.847074e-01 Class 1
546   55 1.1111111  7.227135e-01 Class 1
547   55 1.3333333  8.999979e-01 Class 1
548   55 1.5555556  1.074626e+00 Class 1
549   55 1.7777778  8.448377e-01 Class 1
550   55 2.0000000  9.468715e-01 Class 1
551   56 0.0000000 -2.865109e-01 Class 1
552   56 0.2222222 -9.120346e-02 Class 1
553   56 0.4444444  2.597319e-01 Class 1
554   56 0.6666667  4.759920e-01 Class 1
555   56 0.8888889  6.489024e-01 Class 1
556   56 1.1111111  8.474897e-01 Class 1
557   56 1.3333333  1.055897e+00 Class 1
558   56 1.5555556  1.089581e+00 Class 1
559   56 1.7777778  1.051832e+00 Class 1
560   56 2.0000000  8.847645e-01 Class 1
561   57 0.0000000 -1.189673e+00 Class 1
562   57 0.2222222 -8.252828e-01 Class 1
563   57 0.4444444 -8.273568e-01 Class 1
564   57 0.6666667 -1.469522e-01 Class 1
565   57 0.8888889 -3.485630e-01 Class 1
566   57 1.1111111 -1.869075e-01 Class 1
567   57 1.3333333  1.642899e-01 Class 1
568   57 1.5555556 -1.506294e-01 Class 1
569   57 1.7777778  1.526004e-01 Class 1
570   57 2.0000000  1.512306e-02 Class 1
571   58 0.0000000 -1.267653e+00 Class 1
572   58 0.2222222 -9.054853e-01 Class 1
573   58 0.4444444 -8.087049e-01 Class 1
574   58 0.6666667 -5.425113e-01 Class 1
575   58 0.8888889 -5.701963e-01 Class 1
576   58 1.1111111 -2.046872e-01 Class 1
577   58 1.3333333  5.184996e-02 Class 1
578   58 1.5555556  1.472449e-01 Class 1
579   58 1.7777778  3.428445e-01 Class 1
580   58 2.0000000  1.504963e-01 Class 1
581   59 0.0000000 -7.827182e-01 Class 1
582   59 0.2222222 -5.038624e-01 Class 1
583   59 0.4444444 -2.817862e-01 Class 1
584   59 0.6666667  8.052001e-02 Class 1
585   59 0.8888889  2.512777e-01 Class 1
586   59 1.1111111  3.775155e-01 Class 1
587   59 1.3333333  4.032403e-01 Class 1
588   59 1.5555556  5.614782e-01 Class 1
589   59 1.7777778  6.848356e-01 Class 1
590   59 2.0000000  6.760336e-01 Class 1
591   60 0.0000000 -1.088782e+00 Class 1
592   60 0.2222222 -7.985727e-01 Class 1
593   60 0.4444444 -4.110323e-01 Class 1
594   60 0.6666667 -1.275788e-01 Class 1
595   60 0.8888889 -3.002740e-02 Class 1
596   60 1.1111111  7.736785e-02 Class 1
597   60 1.3333333  1.319543e-01 Class 1
598   60 1.5555556  2.499107e-01 Class 1
599   60 1.7777778  1.758760e-01 Class 1
600   60 2.0000000  2.472250e-01 Class 1
601   61 0.0000000 -1.660182e-01 Class 1
602   61 0.2222222  1.558256e-01 Class 1
603   61 0.4444444  2.421955e-01 Class 1
604   61 0.6666667  5.954811e-01 Class 1
605   61 0.8888889  7.869761e-01 Class 1
606   61 1.1111111  7.798940e-01 Class 1
607   61 1.3333333  1.153859e+00 Class 1
608   61 1.5555556  9.686505e-01 Class 1
609   61 1.7777778  1.082814e+00 Class 1
610   61 2.0000000  1.315402e+00 Class 1
611   62 0.0000000 -1.065859e+00 Class 1
612   62 0.2222222 -7.241542e-01 Class 1
613   62 0.4444444 -5.949611e-01 Class 1
614   62 0.6666667 -3.476207e-01 Class 1
615   62 0.8888889  2.330349e-02 Class 1
616   62 1.1111111  1.219885e-01 Class 1
617   62 1.3333333  1.920249e-01 Class 1
618   62 1.5555556  1.899834e-01 Class 1
619   62 1.7777778  2.463684e-01 Class 1
620   62 2.0000000  5.529146e-01 Class 1
621   63 0.0000000 -8.257272e-01 Class 1
622   63 0.2222222 -4.052567e-01 Class 1
623   63 0.4444444 -1.332417e-01 Class 1
624   63 0.6666667  9.599095e-02 Class 1
625   63 0.8888889  2.410497e-01 Class 1
626   63 1.1111111  2.387296e-01 Class 1
627   63 1.3333333  3.759049e-01 Class 1
628   63 1.5555556  6.253784e-01 Class 1
629   63 1.7777778  4.532818e-01 Class 1
630   63 2.0000000  6.312428e-01 Class 1
631   64 0.0000000 -1.044953e+00 Class 1
632   64 0.2222222 -7.083299e-01 Class 1
633   64 0.4444444 -4.638484e-01 Class 1
634   64 0.6666667 -1.638109e-01 Class 1
635   64 0.8888889  1.515102e-01 Class 1
636   64 1.1111111  2.742473e-01 Class 1
637   64 1.3333333  3.312038e-01 Class 1
638   64 1.5555556  5.275207e-01 Class 1
639   64 1.7777778  6.526844e-01 Class 1
640   64 2.0000000  4.935047e-01 Class 1
641   65 0.0000000 -1.175933e+00 Class 1
642   65 0.2222222 -8.624729e-01 Class 1
643   65 0.4444444 -6.949040e-01 Class 1
644   65 0.6666667 -4.360974e-01 Class 1
645   65 0.8888889  6.270691e-02 Class 1
646   65 1.1111111  1.335202e-01 Class 1
647   65 1.3333333  2.547569e-01 Class 1
648   65 1.5555556  2.909563e-01 Class 1
649   65 1.7777778  3.808818e-01 Class 1
650   65 2.0000000  3.641664e-01 Class 1
651   66 0.0000000 -9.391624e-01 Class 1
652   66 0.2222222 -6.044392e-01 Class 1
653   66 0.4444444 -4.507533e-01 Class 1
654   66 0.6666667  1.279840e-01 Class 1
655   66 0.8888889  1.661203e-01 Class 1
656   66 1.1111111  2.193595e-01 Class 1
657   66 1.3333333  4.848192e-01 Class 1
658   66 1.5555556  3.803483e-01 Class 1
659   66 1.7777778  6.542276e-01 Class 1
660   66 2.0000000  4.442058e-01 Class 1
661   67 0.0000000 -1.773637e+00 Class 1
662   67 0.2222222 -1.096186e+00 Class 1
663   67 0.4444444 -8.499922e-01 Class 1
664   67 0.6666667 -8.107698e-01 Class 1
665   67 0.8888889 -6.840049e-01 Class 1
666   67 1.1111111 -5.755555e-01 Class 1
667   67 1.3333333 -3.076457e-01 Class 1
668   67 1.5555556 -3.922849e-01 Class 1
669   67 1.7777778 -2.579927e-01 Class 1
670   67 2.0000000 -1.673488e-01 Class 1
671   68 0.0000000 -4.747816e-01 Class 1
672   68 0.2222222 -3.419620e-01 Class 1
673   68 0.4444444 -1.146424e-02 Class 1
674   68 0.6666667  2.477464e-01 Class 1
675   68 0.8888889  5.759936e-01 Class 1
676   68 1.1111111  4.505898e-01 Class 1
677   68 1.3333333  4.888501e-01 Class 1
678   68 1.5555556  5.280510e-01 Class 1
679   68 1.7777778  7.920104e-01 Class 1
680   68 2.0000000  7.147432e-01 Class 1
681   69 0.0000000 -8.768154e-01 Class 1
682   69 0.2222222 -6.582058e-01 Class 1
683   69 0.4444444 -3.344166e-01 Class 1
684   69 0.6666667 -1.204144e-01 Class 1
685   69 0.8888889  5.090157e-02 Class 1
686   69 1.1111111  1.381285e-01 Class 1
687   69 1.3333333  4.389970e-01 Class 1
688   69 1.5555556  3.450837e-01 Class 1
689   69 1.7777778  4.856964e-01 Class 1
690   69 2.0000000  4.293366e-01 Class 1
691   70 0.0000000 -1.700641e-01 Class 1
692   70 0.2222222  2.604260e-02 Class 1
693   70 0.4444444  1.847836e-01 Class 1
694   70 0.6666667  4.417632e-01 Class 1
695   70 0.8888889  6.147663e-01 Class 1
696   70 1.1111111  5.633257e-01 Class 1
697   70 1.3333333  1.047756e+00 Class 1
698   70 1.5555556  1.050506e+00 Class 1
699   70 1.7777778  8.940506e-01 Class 1
700   70 2.0000000  9.960013e-01 Class 1
701   71 0.0000000 -8.331576e-01 Class 1
702   71 0.2222222 -6.599199e-01 Class 1
703   71 0.4444444 -1.264561e-01 Class 1
704   71 0.6666667 -6.858072e-02 Class 1
705   71 0.8888889  1.667871e-01 Class 1
706   71 1.1111111  3.415943e-01 Class 1
707   71 1.3333333  3.148671e-01 Class 1
708   71 1.5555556  3.794028e-01 Class 1
709   71 1.7777778  5.172515e-01 Class 1
710   71 2.0000000  5.743682e-01 Class 1
711   72 0.0000000 -1.205601e+00 Class 1
712   72 0.2222222 -8.244271e-01 Class 1
713   72 0.4444444 -5.830676e-01 Class 1
714   72 0.6666667 -3.230770e-01 Class 1
715   72 0.8888889 -3.184626e-01 Class 1
716   72 1.1111111  4.947092e-02 Class 1
717   72 1.3333333  2.321686e-02 Class 1
718   72 1.5555556  1.365492e-01 Class 1
719   72 1.7777778  2.140559e-01 Class 1
720   72 2.0000000  6.166888e-02 Class 1
721   73 0.0000000 -8.267358e-01 Class 1
722   73 0.2222222 -5.566527e-01 Class 1
723   73 0.4444444 -3.199091e-01 Class 1
724   73 0.6666667 -7.841487e-02 Class 1
725   73 0.8888889  2.871905e-01 Class 1
726   73 1.1111111  1.828399e-01 Class 1
727   73 1.3333333  3.937779e-01 Class 1
728   73 1.5555556  2.351983e-01 Class 1
729   73 1.7777778  4.425495e-01 Class 1
730   73 2.0000000  4.479025e-01 Class 1
731   74 0.0000000 -1.125997e+00 Class 1
732   74 0.2222222 -1.033416e+00 Class 1
733   74 0.4444444 -7.209225e-01 Class 1
734   74 0.6666667 -5.094645e-01 Class 1
735   74 0.8888889 -1.272241e-01 Class 1
736   74 1.1111111  1.551954e-01 Class 1
737   74 1.3333333  6.541736e-02 Class 1
738   74 1.5555556  2.486767e-01 Class 1
739   74 1.7777778  4.943522e-01 Class 1
740   74 2.0000000  3.162577e-01 Class 1
741   75 0.0000000 -1.307539e+00 Class 1
742   75 0.2222222 -1.021826e+00 Class 1
743   75 0.4444444 -9.155084e-01 Class 1
744   75 0.6666667 -4.269786e-01 Class 1
745   75 0.8888889 -2.723548e-01 Class 1
746   75 1.1111111 -2.434034e-01 Class 1
747   75 1.3333333 -1.671997e-01 Class 1
748   75 1.5555556 -3.756552e-02 Class 1
749   75 1.7777778  1.216532e-01 Class 1
750   75 2.0000000 -1.691378e-02 Class 1
751   76 0.0000000 -1.099987e+00 Class 1
752   76 0.2222222 -6.007185e-01 Class 1
753   76 0.4444444 -2.226057e-01 Class 1
754   76 0.6666667 -1.685821e-01 Class 1
755   76 0.8888889  1.311577e-01 Class 1
756   76 1.1111111  2.008433e-01 Class 1
757   76 1.3333333  4.633505e-01 Class 1
758   76 1.5555556  5.275210e-01 Class 1
759   76 1.7777778  5.869974e-01 Class 1
760   76 2.0000000  5.382220e-01 Class 1
761   77 0.0000000 -1.203924e+00 Class 1
762   77 0.2222222 -7.576975e-01 Class 1
763   77 0.4444444 -5.856889e-01 Class 1
764   77 0.6666667 -4.057630e-01 Class 1
765   77 0.8888889 -5.387613e-01 Class 1
766   77 1.1111111 -2.148835e-01 Class 1
767   77 1.3333333  7.958369e-02 Class 1
768   77 1.5555556  1.372005e-02 Class 1
769   77 1.7777778 -5.482789e-02 Class 1
770   77 2.0000000 -5.832226e-03 Class 1
771   78 0.0000000 -1.037226e+00 Class 1
772   78 0.2222222 -7.279990e-01 Class 1
773   78 0.4444444 -3.458861e-01 Class 1
774   78 0.6666667 -6.580399e-04 Class 1
775   78 0.8888889  1.493581e-01 Class 1
776   78 1.1111111  3.389501e-01 Class 1
777   78 1.3333333  3.056338e-01 Class 1
778   78 1.5555556  5.078316e-01 Class 1
779   78 1.7777778  3.705599e-01 Class 1
780   78 2.0000000  4.605096e-01 Class 1
781   79 0.0000000 -7.591538e-01 Class 1
782   79 0.2222222 -6.800251e-01 Class 1
783   79 0.4444444 -4.498241e-01 Class 1
784   79 0.6666667 -2.577716e-01 Class 1
785   79 0.8888889  5.821341e-02 Class 1
786   79 1.1111111  3.326361e-01 Class 1
787   79 1.3333333  2.646573e-01 Class 1
788   79 1.5555556  2.592334e-01 Class 1
789   79 1.7777778  5.151503e-01 Class 1
790   79 2.0000000  2.127949e-01 Class 1
791   80 0.0000000 -1.063703e+00 Class 1
792   80 0.2222222 -8.951905e-01 Class 1
793   80 0.4444444 -6.709366e-01 Class 1
794   80 0.6666667 -2.021434e-01 Class 1
795   80 0.8888889 -2.986682e-01 Class 1
796   80 1.1111111  1.625843e-02 Class 1
797   80 1.3333333  1.749044e-01 Class 1
798   80 1.5555556  2.158843e-01 Class 1
799   80 1.7777778  1.435724e-01 Class 1
800   80 2.0000000  2.509840e-01 Class 1
801   81 0.0000000 -1.915855e-01 Class 2
802   81 0.2222222 -1.580610e-02 Class 2
803   81 0.4444444 -2.030363e-01 Class 2
804   81 0.6666667 -2.137313e-01 Class 2
805   81 0.8888889 -7.177345e-02 Class 2
806   81 1.1111111 -5.951419e-02 Class 2
807   81 1.3333333 -1.129164e-01 Class 2
808   81 1.5555556 -1.116885e-01 Class 2
809   81 1.7777778 -6.332585e-02 Class 2
810   81 2.0000000 -2.787259e-02 Class 2
811   82 0.0000000 -1.065635e-01 Class 2
812   82 0.2222222  3.637789e-02 Class 2
813   82 0.4444444 -2.085761e-02 Class 2
814   82 0.6666667 -4.943661e-02 Class 2
815   82 0.8888889  2.897653e-02 Class 2
816   82 1.1111111  1.089677e-02 Class 2
817   82 1.3333333  2.599447e-02 Class 2
818   82 1.5555556 -5.427240e-02 Class 2
819   82 1.7777778 -2.717006e-03 Class 2
820   82 2.0000000 -2.855058e-02 Class 2
821   83 0.0000000  2.097574e-01 Class 2
822   83 0.2222222  3.293646e-01 Class 2
823   83 0.4444444  2.554749e-01 Class 2
824   83 0.6666667  2.505400e-01 Class 2
825   83 0.8888889  2.856084e-01 Class 2
826   83 1.1111111  2.845321e-01 Class 2
827   83 1.3333333  2.356424e-01 Class 2
828   83 1.5555556  2.741576e-01 Class 2
829   83 1.7777778  4.130244e-01 Class 2
830   83 2.0000000  2.849581e-01 Class 2
831   84 0.0000000 -3.195270e-01 Class 2
832   84 0.2222222 -2.711134e-01 Class 2
833   84 0.4444444 -2.908725e-01 Class 2
834   84 0.6666667 -3.409782e-01 Class 2
835   84 0.8888889 -3.713158e-01 Class 2
836   84 1.1111111 -2.779062e-01 Class 2
837   84 1.3333333 -3.174706e-01 Class 2
838   84 1.5555556 -3.024171e-01 Class 2
839   84 1.7777778 -3.442123e-01 Class 2
840   84 2.0000000 -4.153681e-01 Class 2
841   85 0.0000000  1.222440e-01 Class 2
842   85 0.2222222  2.357376e-01 Class 2
843   85 0.4444444  4.053964e-02 Class 2
844   85 0.6666667  6.180740e-02 Class 2
845   85 0.8888889  4.166452e-02 Class 2
846   85 1.1111111  8.763012e-02 Class 2
847   85 1.3333333  1.723789e-01 Class 2
848   85 1.5555556  9.305982e-02 Class 2
849   85 1.7777778  8.536659e-02 Class 2
850   85 2.0000000  3.113331e-02 Class 2
851   86 0.0000000  6.985340e-02 Class 2
852   86 0.2222222  1.139072e-01 Class 2
853   86 0.4444444  1.707024e-01 Class 2
854   86 0.6666667  1.189773e-01 Class 2
855   86 0.8888889  5.292068e-03 Class 2
856   86 1.1111111  1.918752e-02 Class 2
857   86 1.3333333  7.026759e-02 Class 2
858   86 1.5555556  3.494354e-02 Class 2
859   86 1.7777778  4.476291e-02 Class 2
860   86 2.0000000 -3.906775e-02 Class 2
861   87 0.0000000  1.912935e-01 Class 2
862   87 0.2222222  1.633301e-01 Class 2
863   87 0.4444444  1.602527e-01 Class 2
864   87 0.6666667  1.677659e-01 Class 2
865   87 0.8888889  1.800017e-01 Class 2
866   87 1.1111111  1.974882e-01 Class 2
867   87 1.3333333  2.264743e-01 Class 2
868   87 1.5555556  1.663731e-01 Class 2
869   87 1.7777778  1.460121e-01 Class 2
870   87 2.0000000  2.667012e-01 Class 2
871   88 0.0000000 -1.114346e-02 Class 2
872   88 0.2222222 -2.179367e-02 Class 2
873   88 0.4444444  3.256339e-02 Class 2
874   88 0.6666667 -9.712142e-02 Class 2
875   88 0.8888889  5.840738e-02 Class 2
876   88 1.1111111  2.148979e-02 Class 2
877   88 1.3333333 -2.028070e-02 Class 2
878   88 1.5555556 -2.143814e-04 Class 2
879   88 1.7777778 -2.416314e-02 Class 2
880   88 2.0000000 -2.857068e-02 Class 2
881   89 0.0000000 -4.807916e-03 Class 2
882   89 0.2222222  1.130608e-01 Class 2
883   89 0.4444444  1.849751e-01 Class 2
884   89 0.6666667  1.842751e-01 Class 2
885   89 0.8888889  9.020374e-02 Class 2
886   89 1.1111111  7.824770e-02 Class 2
887   89 1.3333333  9.466888e-02 Class 2
888   89 1.5555556  1.447931e-01 Class 2
889   89 1.7777778  1.632892e-01 Class 2
890   89 2.0000000  1.117491e-01 Class 2
891   90 0.0000000  1.091337e-01 Class 2
892   90 0.2222222  5.653334e-02 Class 2
893   90 0.4444444  8.724062e-02 Class 2
894   90 0.6666667  1.261039e-01 Class 2
895   90 0.8888889  2.532679e-01 Class 2
896   90 1.1111111  7.305650e-02 Class 2
897   90 1.3333333  4.681664e-02 Class 2
898   90 1.5555556  1.069818e-01 Class 2
899   90 1.7777778  6.886749e-02 Class 2
900   90 2.0000000  1.253903e-01 Class 2
901   91 0.0000000 -9.144159e-02 Class 2
902   91 0.2222222 -4.442951e-02 Class 2
903   91 0.4444444 -1.599606e-01 Class 2
904   91 0.6666667 -1.739843e-01 Class 2
905   91 0.8888889 -3.706080e-02 Class 2
906   91 1.1111111 -1.059090e-01 Class 2
907   91 1.3333333 -1.650277e-01 Class 2
908   91 1.5555556 -1.743297e-01 Class 2
909   91 1.7777778 -1.499928e-01 Class 2
910   91 2.0000000 -9.458568e-02 Class 2
911   92 0.0000000  2.152098e-01 Class 2
912   92 0.2222222  3.103386e-01 Class 2
913   92 0.4444444  2.571113e-01 Class 2
914   92 0.6666667  2.563859e-01 Class 2
915   92 0.8888889  2.474886e-01 Class 2
916   92 1.1111111  2.350585e-01 Class 2
917   92 1.3333333  2.432261e-01 Class 2
918   92 1.5555556  3.111068e-01 Class 2
919   92 1.7777778  1.880174e-01 Class 2
920   92 2.0000000  3.109668e-01 Class 2
921   93 0.0000000  2.145463e-01 Class 2
922   93 0.2222222  2.699019e-01 Class 2
923   93 0.4444444  2.313302e-01 Class 2
924   93 0.6666667  1.680454e-01 Class 2
925   93 0.8888889  2.537665e-01 Class 2
926   93 1.1111111  2.055862e-01 Class 2
927   93 1.3333333  2.948112e-01 Class 2
928   93 1.5555556  1.982901e-01 Class 2
929   93 1.7777778  1.513729e-01 Class 2
930   93 2.0000000  1.991466e-01 Class 2
931   94 0.0000000  1.114416e-01 Class 2
932   94 0.2222222  9.240727e-02 Class 2
933   94 0.4444444  1.154857e-01 Class 2
934   94 0.6666667  9.125964e-02 Class 2
935   94 0.8888889  9.414993e-02 Class 2
936   94 1.1111111  1.247477e-01 Class 2
937   94 1.3333333  4.382687e-02 Class 2
938   94 1.5555556  1.336792e-01 Class 2
939   94 1.7777778  8.920357e-02 Class 2
940   94 2.0000000  8.108105e-02 Class 2
941   95 0.0000000  2.155548e-01 Class 2
942   95 0.2222222  3.102094e-01 Class 2
943   95 0.4444444  3.053926e-01 Class 2
944   95 0.6666667  3.834439e-01 Class 2
945   95 0.8888889  4.185242e-01 Class 2
946   95 1.1111111  4.184497e-01 Class 2
947   95 1.3333333  3.091246e-01 Class 2
948   95 1.5555556  3.328929e-01 Class 2
949   95 1.7777778  3.761237e-01 Class 2
950   95 2.0000000  3.355210e-01 Class 2
951   96 0.0000000  3.148168e-02 Class 2
952   96 0.2222222  1.518624e-01 Class 2
953   96 0.4444444  1.163002e-01 Class 2
954   96 0.6666667  1.442097e-01 Class 2
955   96 0.8888889  5.393408e-02 Class 2
956   96 1.1111111  9.766227e-02 Class 2
957   96 1.3333333  5.672012e-02 Class 2
958   96 1.5555556  7.440936e-02 Class 2
959   96 1.7777778  1.279382e-01 Class 2
960   96 2.0000000  7.632555e-02 Class 2
961   97 0.0000000 -3.049907e-01 Class 2
962   97 0.2222222 -3.172242e-01 Class 2
963   97 0.4444444 -3.202242e-01 Class 2
964   97 0.6666667 -2.882529e-01 Class 2
965   97 0.8888889 -1.565178e-01 Class 2
966   97 1.1111111 -2.710868e-01 Class 2
967   97 1.3333333 -2.905609e-01 Class 2
968   97 1.5555556 -3.017751e-01 Class 2
969   97 1.7777778 -2.356293e-01 Class 2
970   97 2.0000000 -2.443948e-01 Class 2
971   98 0.0000000 -1.020496e-01 Class 2
972   98 0.2222222 -1.245434e-01 Class 2
973   98 0.4444444 -6.277960e-02 Class 2
974   98 0.6666667 -6.591337e-02 Class 2
975   98 0.8888889 -4.486940e-02 Class 2
976   98 1.1111111 -8.125272e-02 Class 2
977   98 1.3333333 -3.346464e-02 Class 2
978   98 1.5555556 -8.876536e-02 Class 2
979   98 1.7777778 -3.404641e-02 Class 2
980   98 2.0000000 -8.434670e-02 Class 2
981   99 0.0000000 -2.789980e-01 Class 2
982   99 0.2222222 -3.061523e-01 Class 2
983   99 0.4444444 -2.808176e-01 Class 2
984   99 0.6666667 -2.830307e-01 Class 2
985   99 0.8888889 -2.170176e-01 Class 2
986   99 1.1111111 -2.486512e-01 Class 2
987   99 1.3333333 -2.777878e-01 Class 2
988   99 1.5555556 -2.914125e-01 Class 2
989   99 1.7777778 -1.710861e-01 Class 2
990   99 2.0000000 -2.587826e-01 Class 2
991  100 0.0000000 -1.571203e-01 Class 2
992  100 0.2222222 -1.175398e-01 Class 2
993  100 0.4444444 -9.273351e-02 Class 2
994  100 0.6666667 -5.710561e-02 Class 2
995  100 0.8888889 -1.043635e-01 Class 2
996  100 1.1111111 -9.588337e-02 Class 2
997  100 1.3333333 -1.548070e-01 Class 2
998  100 1.5555556 -6.437324e-02 Class 2
999  100 1.7777778 -1.005584e-01 Class 2
1000 100 2.0000000 -7.006476e-02 Class 2
1001 101 0.0000000 -4.672927e-02 Class 2
1002 101 0.2222222 -1.111554e-01 Class 2
1003 101 0.4444444 -1.302569e-01 Class 2
1004 101 0.6666667 -1.505226e-01 Class 2
1005 101 0.8888889 -1.370060e-01 Class 2
1006 101 1.1111111 -1.499567e-01 Class 2
1007 101 1.3333333 -8.174649e-02 Class 2
1008 101 1.5555556 -1.696544e-01 Class 2
1009 101 1.7777778 -1.795664e-01 Class 2
1010 101 2.0000000 -1.216955e-01 Class 2
1011 102 0.0000000  6.263712e-02 Class 2
1012 102 0.2222222  9.910098e-03 Class 2
1013 102 0.4444444 -2.559861e-02 Class 2
1014 102 0.6666667  2.793861e-02 Class 2
1015 102 0.8888889 -2.776940e-02 Class 2
1016 102 1.1111111 -2.059914e-02 Class 2
1017 102 1.3333333 -1.585543e-02 Class 2
1018 102 1.5555556  3.027930e-02 Class 2
1019 102 1.7777778  3.581434e-02 Class 2
1020 102 2.0000000  3.065681e-02 Class 2
1021 103 0.0000000 -1.332315e-01 Class 2
1022 103 0.2222222 -1.569493e-01 Class 2
1023 103 0.4444444 -7.067954e-02 Class 2
1024 103 0.6666667 -5.375488e-02 Class 2
1025 103 0.8888889 -8.070951e-02 Class 2
1026 103 1.1111111 -1.493603e-01 Class 2
1027 103 1.3333333 -1.816177e-01 Class 2
1028 103 1.5555556 -1.112063e-01 Class 2
1029 103 1.7777778 -1.398541e-01 Class 2
1030 103 2.0000000 -8.958129e-02 Class 2
1031 104 0.0000000  4.080084e-03 Class 2
1032 104 0.2222222  7.596372e-02 Class 2
1033 104 0.4444444  1.376685e-01 Class 2
1034 104 0.6666667  7.469040e-02 Class 2
1035 104 0.8888889  6.187655e-02 Class 2
1036 104 1.1111111  2.494842e-02 Class 2
1037 104 1.3333333  1.304172e-01 Class 2
1038 104 1.5555556  1.569127e-02 Class 2
1039 104 1.7777778  8.678025e-02 Class 2
1040 104 2.0000000  9.502630e-02 Class 2
1041 105 0.0000000 -1.228981e-01 Class 2
1042 105 0.2222222 -2.862262e-01 Class 2
1043 105 0.4444444 -1.327099e-01 Class 2
1044 105 0.6666667 -8.600717e-02 Class 2
1045 105 0.8888889 -1.667151e-01 Class 2
1046 105 1.1111111 -1.587168e-01 Class 2
1047 105 1.3333333 -4.148740e-02 Class 2
1048 105 1.5555556 -2.192527e-01 Class 2
1049 105 1.7777778 -6.042485e-02 Class 2
1050 105 2.0000000 -7.820291e-02 Class 2
1051 106 0.0000000  3.205302e-01 Class 2
1052 106 0.2222222  3.633457e-01 Class 2
1053 106 0.4444444  3.696232e-01 Class 2
1054 106 0.6666667  3.859708e-01 Class 2
1055 106 0.8888889  3.865430e-01 Class 2
1056 106 1.1111111  3.602993e-01 Class 2
1057 106 1.3333333  4.067073e-01 Class 2
1058 106 1.5555556  4.698895e-01 Class 2
1059 106 1.7777778  4.405835e-01 Class 2
1060 106 2.0000000  4.887984e-01 Class 2
1061 107 0.0000000  1.295975e-01 Class 2
1062 107 0.2222222  1.728640e-01 Class 2
1063 107 0.4444444  1.692469e-01 Class 2
1064 107 0.6666667  1.072853e-01 Class 2
1065 107 0.8888889  1.039726e-01 Class 2
1066 107 1.1111111  2.386994e-01 Class 2
1067 107 1.3333333  1.041913e-01 Class 2
1068 107 1.5555556  1.934583e-01 Class 2
1069 107 1.7777778  1.329828e-01 Class 2
1070 107 2.0000000  9.170602e-02 Class 2
1071 108 0.0000000  1.053240e-01 Class 2
1072 108 0.2222222  1.242403e-01 Class 2
1073 108 0.4444444  8.957555e-02 Class 2
1074 108 0.6666667  1.453958e-01 Class 2
1075 108 0.8888889  2.407891e-01 Class 2
1076 108 1.1111111  1.655912e-01 Class 2
1077 108 1.3333333  2.839991e-01 Class 2
1078 108 1.5555556  1.910480e-01 Class 2
1079 108 1.7777778  1.553031e-01 Class 2
1080 108 2.0000000  1.904940e-01 Class 2
1081 109 0.0000000  4.738617e-02 Class 2
1082 109 0.2222222  5.008695e-02 Class 2
1083 109 0.4444444  7.072980e-02 Class 2
1084 109 0.6666667  6.728807e-02 Class 2
1085 109 0.8888889  9.654275e-02 Class 2
1086 109 1.1111111  8.105248e-02 Class 2
1087 109 1.3333333  8.834816e-02 Class 2
1088 109 1.5555556  5.157081e-02 Class 2
1089 109 1.7777778  6.541619e-05 Class 2
1090 109 2.0000000  5.832264e-02 Class 2
1091 110 0.0000000  3.570673e-01 Class 2
1092 110 0.2222222  3.176901e-01 Class 2
1093 110 0.4444444  3.199020e-01 Class 2
1094 110 0.6666667  3.955014e-01 Class 2
1095 110 0.8888889  4.092016e-01 Class 2
1096 110 1.1111111  3.493334e-01 Class 2
1097 110 1.3333333  3.254355e-01 Class 2
1098 110 1.5555556  4.291022e-01 Class 2
1099 110 1.7777778  2.857350e-01 Class 2
1100 110 2.0000000  3.037592e-01 Class 2
1101 111 0.0000000 -8.464512e-02 Class 2
1102 111 0.2222222 -1.687747e-01 Class 2
1103 111 0.4444444 -7.319167e-02 Class 2
1104 111 0.6666667 -1.602829e-01 Class 2
1105 111 0.8888889 -8.164658e-02 Class 2
1106 111 1.1111111 -1.130546e-01 Class 2
1107 111 1.3333333 -5.472925e-02 Class 2
1108 111 1.5555556 -2.821894e-02 Class 2
1109 111 1.7777778 -9.521438e-02 Class 2
1110 111 2.0000000 -5.464956e-02 Class 2
1111 112 0.0000000 -1.823176e-01 Class 2
1112 112 0.2222222 -1.050239e-01 Class 2
1113 112 0.4444444 -1.519553e-01 Class 2
1114 112 0.6666667 -8.078404e-02 Class 2
1115 112 0.8888889 -9.126726e-02 Class 2
1116 112 1.1111111 -1.018872e-01 Class 2
1117 112 1.3333333 -9.910279e-02 Class 2
1118 112 1.5555556 -4.168235e-02 Class 2
1119 112 1.7777778 -9.650689e-02 Class 2
1120 112 2.0000000  4.346419e-03 Class 2
1121 113 0.0000000  1.912481e-01 Class 2
1122 113 0.2222222  3.024030e-01 Class 2
1123 113 0.4444444  3.881464e-01 Class 2
1124 113 0.6666667  2.236138e-01 Class 2
1125 113 0.8888889  2.385701e-01 Class 2
1126 113 1.1111111  2.564860e-01 Class 2
1127 113 1.3333333  2.789323e-01 Class 2
1128 113 1.5555556  2.603930e-01 Class 2
1129 113 1.7777778  2.472112e-01 Class 2
1130 113 2.0000000  3.646080e-01 Class 2
1131 114 0.0000000 -1.240365e-01 Class 2
1132 114 0.2222222 -7.845133e-02 Class 2
1133 114 0.4444444 -2.845813e-01 Class 2
1134 114 0.6666667 -8.245858e-02 Class 2
1135 114 0.8888889 -7.619761e-02 Class 2
1136 114 1.1111111 -1.688426e-01 Class 2
1137 114 1.3333333 -1.588697e-01 Class 2
1138 114 1.5555556 -6.715311e-02 Class 2
1139 114 1.7777778 -1.513950e-01 Class 2
1140 114 2.0000000 -1.044618e-01 Class 2
1141 115 0.0000000 -1.209400e-02 Class 2
1142 115 0.2222222 -4.955078e-02 Class 2
1143 115 0.4444444 -5.639973e-02 Class 2
1144 115 0.6666667 -1.129501e-01 Class 2
1145 115 0.8888889 -1.490307e-01 Class 2
1146 115 1.1111111 -4.339943e-02 Class 2
1147 115 1.3333333 -2.894553e-02 Class 2
1148 115 1.5555556 -6.774221e-02 Class 2
1149 115 1.7777778 -1.121302e-02 Class 2
1150 115 2.0000000 -1.918479e-02 Class 2
1151 116 0.0000000 -9.559454e-02 Class 2
1152 116 0.2222222 -7.132968e-02 Class 2
1153 116 0.4444444 -4.294769e-03 Class 2
1154 116 0.6666667 -4.857489e-02 Class 2
1155 116 0.8888889 -1.947565e-02 Class 2
1156 116 1.1111111 -3.049950e-02 Class 2
1157 116 1.3333333  3.622744e-02 Class 2
1158 116 1.5555556 -4.017714e-02 Class 2
1159 116 1.7777778 -9.003881e-02 Class 2
1160 116 2.0000000 -5.881719e-02 Class 2
1161 117 0.0000000 -5.211550e-02 Class 2
1162 117 0.2222222 -7.961944e-02 Class 2
1163 117 0.4444444 -7.677828e-02 Class 2
1164 117 0.6666667 -3.720812e-02 Class 2
1165 117 0.8888889 -1.113801e-01 Class 2
1166 117 1.1111111 -1.707166e-01 Class 2
1167 117 1.3333333  2.406206e-02 Class 2
1168 117 1.5555556 -5.729505e-02 Class 2
1169 117 1.7777778 -2.869813e-02 Class 2
1170 117 2.0000000 -9.896331e-02 Class 2
1171 118 0.0000000 -5.114178e-02 Class 2
1172 118 0.2222222 -1.640199e-01 Class 2
1173 118 0.4444444 -3.899865e-02 Class 2
1174 118 0.6666667 -3.404289e-02 Class 2
1175 118 0.8888889 -1.033084e-01 Class 2
1176 118 1.1111111 -8.497927e-02 Class 2
1177 118 1.3333333  8.129239e-03 Class 2
1178 118 1.5555556 -3.611572e-02 Class 2
1179 118 1.7777778 -7.278050e-02 Class 2
1180 118 2.0000000 -4.220788e-02 Class 2
1181 119 0.0000000  3.150231e-02 Class 2
1182 119 0.2222222  1.516827e-01 Class 2
1183 119 0.4444444 -8.102618e-03 Class 2
1184 119 0.6666667  3.136293e-02 Class 2
1185 119 0.8888889  1.096651e-01 Class 2
1186 119 1.1111111  1.276951e-01 Class 2
1187 119 1.3333333 -2.231073e-02 Class 2
1188 119 1.5555556  8.864098e-02 Class 2
1189 119 1.7777778  6.990632e-02 Class 2
1190 119 2.0000000  4.530802e-02 Class 2
1191 120 0.0000000 -6.677435e-02 Class 2
1192 120 0.2222222 -7.606771e-02 Class 2
1193 120 0.4444444 -2.348331e-02 Class 2
1194 120 0.6666667  3.144338e-02 Class 2
1195 120 0.8888889 -1.011072e-01 Class 2
1196 120 1.1111111 -7.700007e-02 Class 2
1197 120 1.3333333  5.960929e-02 Class 2
1198 120 1.5555556 -8.045418e-02 Class 2
1199 120 1.7777778 -1.491983e-01 Class 2
1200 120 2.0000000 -1.482042e-02 Class 2
1201 121 0.0000000 -8.398179e-02 Class 2
1202 121 0.2222222 -9.474260e-02 Class 2
1203 121 0.4444444 -1.332382e-01 Class 2
1204 121 0.6666667 -6.661279e-02 Class 2
1205 121 0.8888889 -8.680930e-02 Class 2
1206 121 1.1111111 -2.605535e-02 Class 2
1207 121 1.3333333 -5.126690e-02 Class 2
1208 121 1.5555556 -2.583189e-02 Class 2
1209 121 1.7777778 -3.841473e-02 Class 2
1210 121 2.0000000 -2.847288e-02 Class 2
1211 122 0.0000000  3.065999e-01 Class 2
1212 122 0.2222222  1.609036e-01 Class 2
1213 122 0.4444444  3.078067e-01 Class 2
1214 122 0.6666667  2.212065e-01 Class 2
1215 122 0.8888889  3.133798e-01 Class 2
1216 122 1.1111111  3.676130e-01 Class 2
1217 122 1.3333333  2.861136e-01 Class 2
1218 122 1.5555556  2.747742e-01 Class 2
1219 122 1.7777778  3.175225e-01 Class 2
1220 122 2.0000000  4.077606e-01 Class 2
1221 123 0.0000000 -3.786301e-02 Class 2
1222 123 0.2222222 -3.185687e-02 Class 2
1223 123 0.4444444 -6.299581e-02 Class 2
1224 123 0.6666667 -5.843696e-02 Class 2
1225 123 0.8888889 -3.542586e-02 Class 2
1226 123 1.1111111 -1.042819e-01 Class 2
1227 123 1.3333333  4.051473e-02 Class 2
1228 123 1.5555556 -3.434232e-02 Class 2
1229 123 1.7777778 -1.139988e-01 Class 2
1230 123 2.0000000 -1.120069e-02 Class 2
1231 124 0.0000000 -4.795965e-02 Class 2
1232 124 0.2222222 -1.338209e-01 Class 2
1233 124 0.4444444  4.995292e-02 Class 2
1234 124 0.6666667 -1.167027e-01 Class 2
1235 124 0.8888889 -1.368295e-01 Class 2
1236 124 1.1111111 -5.489705e-02 Class 2
1237 124 1.3333333 -3.411097e-02 Class 2
1238 124 1.5555556 -1.038768e-01 Class 2
1239 124 1.7777778 -9.102717e-02 Class 2
1240 124 2.0000000 -1.658128e-01 Class 2
1241 125 0.0000000  2.772572e-02 Class 2
1242 125 0.2222222 -2.254273e-03 Class 2
1243 125 0.4444444 -1.070316e-02 Class 2
1244 125 0.6666667  2.379468e-02 Class 2
1245 125 0.8888889  3.847931e-02 Class 2
1246 125 1.1111111 -4.595215e-02 Class 2
1247 125 1.3333333  1.686073e-02 Class 2
1248 125 1.5555556 -5.451419e-02 Class 2
1249 125 1.7777778  1.085786e-01 Class 2
1250 125 2.0000000  2.207986e-02 Class 2
1251 126 0.0000000  1.407425e-01 Class 2
1252 126 0.2222222  1.200384e-01 Class 2
1253 126 0.4444444  1.355595e-01 Class 2
1254 126 0.6666667  9.355460e-02 Class 2
1255 126 0.8888889  1.538159e-01 Class 2
1256 126 1.1111111  1.818459e-01 Class 2
1257 126 1.3333333  1.290289e-01 Class 2
1258 126 1.5555556  1.160965e-01 Class 2
1259 126 1.7777778  7.728542e-02 Class 2
1260 126 2.0000000  1.892240e-01 Class 2
1261 127 0.0000000  1.976285e-03 Class 2
1262 127 0.2222222 -2.684968e-02 Class 2
1263 127 0.4444444 -4.540911e-02 Class 2
1264 127 0.6666667 -6.506828e-03 Class 2
1265 127 0.8888889 -8.975607e-02 Class 2
1266 127 1.1111111 -9.620393e-02 Class 2
1267 127 1.3333333 -9.639737e-02 Class 2
1268 127 1.5555556 -4.377198e-02 Class 2
1269 127 1.7777778  1.225727e-02 Class 2
1270 127 2.0000000  6.884000e-03 Class 2
1271 128 0.0000000 -3.578451e-02 Class 2
1272 128 0.2222222  6.413161e-02 Class 2
1273 128 0.4444444 -6.329921e-02 Class 2
1274 128 0.6666667 -2.989453e-02 Class 2
1275 128 0.8888889 -4.114852e-02 Class 2
1276 128 1.1111111  4.223425e-03 Class 2
1277 128 1.3333333 -9.054010e-02 Class 2
1278 128 1.5555556  5.701883e-02 Class 2
1279 128 1.7777778  5.888659e-02 Class 2
1280 128 2.0000000  4.817521e-02 Class 2
1281 129 0.0000000 -1.404317e-01 Class 2
1282 129 0.2222222 -8.235908e-02 Class 2
1283 129 0.4444444 -1.196726e-01 Class 2
1284 129 0.6666667 -9.991014e-02 Class 2
1285 129 0.8888889 -1.428031e-01 Class 2
1286 129 1.1111111 -1.409204e-01 Class 2
1287 129 1.3333333 -2.650401e-01 Class 2
1288 129 1.5555556 -1.901156e-01 Class 2
1289 129 1.7777778 -1.163521e-01 Class 2
1290 129 2.0000000 -1.658301e-01 Class 2
1291 130 0.0000000 -1.257894e-01 Class 2
1292 130 0.2222222 -1.097541e-01 Class 2
1293 130 0.4444444 -8.660632e-02 Class 2
1294 130 0.6666667  5.029615e-02 Class 2
1295 130 0.8888889 -6.175834e-02 Class 2
1296 130 1.1111111 -8.199681e-02 Class 2
1297 130 1.3333333 -1.513704e-01 Class 2
1298 130 1.5555556 -1.388160e-01 Class 2
1299 130 1.7777778  2.040889e-02 Class 2
1300 130 2.0000000 -8.024585e-02 Class 2
1301 131 0.0000000  9.309223e-02 Class 2
1302 131 0.2222222 -5.876834e-03 Class 2
1303 131 0.4444444 -1.071960e-01 Class 2
1304 131 0.6666667  1.173206e-01 Class 2
1305 131 0.8888889 -4.790704e-02 Class 2
1306 131 1.1111111 -2.055487e-02 Class 2
1307 131 1.3333333  8.105342e-03 Class 2
1308 131 1.5555556 -4.152651e-03 Class 2
1309 131 1.7777778 -7.553155e-02 Class 2
1310 131 2.0000000 -7.658121e-02 Class 2
1311 132 0.0000000 -4.799865e-02 Class 2
1312 132 0.2222222 -1.601737e-01 Class 2
1313 132 0.4444444 -9.032938e-02 Class 2
1314 132 0.6666667 -5.331220e-02 Class 2
1315 132 0.8888889 -1.846320e-01 Class 2
1316 132 1.1111111 -1.879923e-01 Class 2
1317 132 1.3333333 -2.592662e-01 Class 2
1318 132 1.5555556 -7.160096e-02 Class 2
1319 132 1.7777778 -2.113788e-01 Class 2
1320 132 2.0000000 -1.994400e-01 Class 2
1321 133 0.0000000  3.810150e-02 Class 2
1322 133 0.2222222  1.417640e-01 Class 2
1323 133 0.4444444  1.835818e-01 Class 2
1324 133 0.6666667  1.127693e-01 Class 2
1325 133 0.8888889  7.974100e-02 Class 2
1326 133 1.1111111  1.465465e-02 Class 2
1327 133 1.3333333  1.710356e-01 Class 2
1328 133 1.5555556  1.294418e-01 Class 2
1329 133 1.7777778  9.118545e-02 Class 2
1330 133 2.0000000  1.518185e-01 Class 2
1331 134 0.0000000 -2.387531e-01 Class 2
1332 134 0.2222222 -3.207255e-01 Class 2
1333 134 0.4444444 -3.528392e-01 Class 2
1334 134 0.6666667 -2.373230e-01 Class 2
1335 134 0.8888889 -2.447616e-01 Class 2
1336 134 1.1111111 -2.984277e-01 Class 2
1337 134 1.3333333 -1.095953e-01 Class 2
1338 134 1.5555556 -3.886851e-01 Class 2
1339 134 1.7777778 -2.555725e-01 Class 2
1340 134 2.0000000 -1.921624e-01 Class 2
1341 135 0.0000000  1.354289e-01 Class 2
1342 135 0.2222222  1.086181e-01 Class 2
1343 135 0.4444444  6.575770e-02 Class 2
1344 135 0.6666667  9.629993e-02 Class 2
1345 135 0.8888889  8.324785e-02 Class 2
1346 135 1.1111111  5.251338e-02 Class 2
1347 135 1.3333333  8.543654e-03 Class 2
1348 135 1.5555556  1.117239e-01 Class 2
1349 135 1.7777778  3.186352e-02 Class 2
1350 135 2.0000000  3.322066e-02 Class 2
1351 136 0.0000000 -2.946331e-01 Class 2
1352 136 0.2222222 -3.034584e-01 Class 2
1353 136 0.4444444 -3.995658e-01 Class 2
1354 136 0.6666667 -3.188363e-01 Class 2
1355 136 0.8888889 -2.636482e-01 Class 2
1356 136 1.1111111 -2.294659e-01 Class 2
1357 136 1.3333333 -3.512904e-01 Class 2
1358 136 1.5555556 -3.170211e-01 Class 2
1359 136 1.7777778 -4.033949e-01 Class 2
1360 136 2.0000000 -2.281525e-01 Class 2
1361 137 0.0000000 -5.993955e-02 Class 2
1362 137 0.2222222 -1.643694e-02 Class 2
1363 137 0.4444444 -7.994071e-02 Class 2
1364 137 0.6666667 -3.688277e-02 Class 2
1365 137 0.8888889  5.487097e-03 Class 2
1366 137 1.1111111 -5.086804e-02 Class 2
1367 137 1.3333333  7.480086e-03 Class 2
1368 137 1.5555556  1.952650e-03 Class 2
1369 137 1.7777778 -1.060673e-01 Class 2
1370 137 2.0000000 -6.860643e-03 Class 2
1371 138 0.0000000 -2.299551e-01 Class 2
1372 138 0.2222222 -1.195584e-01 Class 2
1373 138 0.4444444 -1.332386e-01 Class 2
1374 138 0.6666667 -6.179523e-02 Class 2
1375 138 0.8888889 -9.090360e-02 Class 2
1376 138 1.1111111 -1.354193e-01 Class 2
1377 138 1.3333333 -1.133989e-01 Class 2
1378 138 1.5555556 -9.630988e-02 Class 2
1379 138 1.7777778 -1.561512e-01 Class 2
1380 138 2.0000000 -1.394722e-01 Class 2
1381 139 0.0000000 -1.925536e-01 Class 2
1382 139 0.2222222 -2.087358e-01 Class 2
1383 139 0.4444444 -1.597777e-01 Class 2
1384 139 0.6666667 -1.360430e-01 Class 2
1385 139 0.8888889 -2.150898e-01 Class 2
1386 139 1.1111111 -1.148558e-01 Class 2
1387 139 1.3333333 -1.732057e-01 Class 2
1388 139 1.5555556 -1.258260e-01 Class 2
1389 139 1.7777778 -1.358184e-01 Class 2
1390 139 2.0000000 -1.632136e-01 Class 2
1391 140 0.0000000 -1.086257e-01 Class 2
1392 140 0.2222222 -9.361762e-02 Class 2
1393 140 0.4444444 -1.431207e-01 Class 2
1394 140 0.6666667  4.966040e-02 Class 2
1395 140 0.8888889 -3.882946e-02 Class 2
1396 140 1.1111111  7.366950e-02 Class 2
1397 140 1.3333333 -9.829876e-02 Class 2
1398 140 1.5555556  4.623651e-02 Class 2
1399 140 1.7777778  2.359301e-02 Class 2
1400 140 2.0000000 -7.044160e-02 Class 2
1401 141 0.0000000 -3.471676e-01 Class 2
1402 141 0.2222222 -3.505156e-01 Class 2
1403 141 0.4444444 -3.836340e-01 Class 2
1404 141 0.6666667 -2.976616e-01 Class 2
1405 141 0.8888889 -3.837003e-01 Class 2
1406 141 1.1111111 -2.650496e-01 Class 2
1407 141 1.3333333 -4.229365e-01 Class 2
1408 141 1.5555556 -2.942465e-01 Class 2
1409 141 1.7777778 -3.827758e-01 Class 2
1410 141 2.0000000 -3.355758e-01 Class 2
1411 142 0.0000000  2.317329e-01 Class 2
1412 142 0.2222222  2.239330e-01 Class 2
1413 142 0.4444444  2.214598e-01 Class 2
1414 142 0.6666667  2.670267e-01 Class 2
1415 142 0.8888889  2.179827e-01 Class 2
1416 142 1.1111111  2.796308e-01 Class 2
1417 142 1.3333333  2.126325e-01 Class 2
1418 142 1.5555556  2.109466e-01 Class 2
1419 142 1.7777778  1.948308e-01 Class 2
1420 142 2.0000000  1.715405e-01 Class 2
1421 143 0.0000000 -3.225989e-01 Class 2
1422 143 0.2222222 -2.822541e-01 Class 2
1423 143 0.4444444 -2.901131e-01 Class 2
1424 143 0.6666667 -2.799114e-01 Class 2
1425 143 0.8888889 -2.419802e-01 Class 2
1426 143 1.1111111 -3.096710e-01 Class 2
1427 143 1.3333333 -3.186425e-01 Class 2
1428 143 1.5555556 -2.476952e-01 Class 2
1429 143 1.7777778 -3.274438e-01 Class 2
1430 143 2.0000000 -3.735570e-01 Class 2
1431 144 0.0000000 -1.373509e-01 Class 2
1432 144 0.2222222 -1.267185e-01 Class 2
1433 144 0.4444444 -1.669685e-01 Class 2
1434 144 0.6666667 -2.565685e-02 Class 2
1435 144 0.8888889 -1.275470e-01 Class 2
1436 144 1.1111111 -4.319081e-02 Class 2
1437 144 1.3333333  1.877801e-02 Class 2
1438 144 1.5555556 -1.218771e-01 Class 2
1439 144 1.7777778 -8.449396e-02 Class 2
1440 144 2.0000000 -1.330507e-01 Class 2
1441 145 0.0000000 -7.722258e-02 Class 2
1442 145 0.2222222 -2.871959e-01 Class 2
1443 145 0.4444444 -1.843918e-01 Class 2
1444 145 0.6666667 -2.099024e-01 Class 2
1445 145 0.8888889 -2.168904e-01 Class 2
1446 145 1.1111111 -2.222808e-01 Class 2
1447 145 1.3333333 -2.529323e-01 Class 2
1448 145 1.5555556 -2.632377e-01 Class 2
1449 145 1.7777778 -3.483580e-01 Class 2
1450 145 2.0000000 -2.911778e-01 Class 2
1451 146 0.0000000 -1.688994e-01 Class 2
1452 146 0.2222222 -1.441610e-02 Class 2
1453 146 0.4444444 -1.260672e-01 Class 2
1454 146 0.6666667 -1.269225e-01 Class 2
1455 146 0.8888889 -2.861926e-01 Class 2
1456 146 1.1111111 -2.478448e-01 Class 2
1457 146 1.3333333 -2.365662e-01 Class 2
1458 146 1.5555556 -2.233485e-01 Class 2
1459 146 1.7777778 -2.286569e-01 Class 2
1460 146 2.0000000 -1.743358e-01 Class 2
1461 147 0.0000000  4.055680e-01 Class 2
1462 147 0.2222222  4.065756e-01 Class 2
1463 147 0.4444444  4.850538e-01 Class 2
1464 147 0.6666667  3.241998e-01 Class 2
1465 147 0.8888889  4.300540e-01 Class 2
1466 147 1.1111111  4.809594e-01 Class 2
1467 147 1.3333333  4.955959e-01 Class 2
1468 147 1.5555556  4.356391e-01 Class 2
1469 147 1.7777778  4.283222e-01 Class 2
1470 147 2.0000000  4.449629e-01 Class 2
1471 148 0.0000000 -1.807481e-02 Class 2
1472 148 0.2222222 -1.860149e-02 Class 2
1473 148 0.4444444 -6.591212e-02 Class 2
1474 148 0.6666667 -8.901010e-03 Class 2
1475 148 0.8888889  1.178442e-02 Class 2
1476 148 1.1111111 -2.863183e-02 Class 2
1477 148 1.3333333 -5.728791e-02 Class 2
1478 148 1.5555556 -8.400355e-02 Class 2
1479 148 1.7777778 -2.271310e-02 Class 2
1480 148 2.0000000  8.195957e-02 Class 2
1481 149 0.0000000 -2.851851e-01 Class 2
1482 149 0.2222222 -2.855230e-01 Class 2
1483 149 0.4444444 -1.110505e-01 Class 2
1484 149 0.6666667 -3.444125e-01 Class 2
1485 149 0.8888889 -2.358531e-01 Class 2
1486 149 1.1111111 -2.061844e-01 Class 2
1487 149 1.3333333 -2.597706e-01 Class 2
1488 149 1.5555556 -1.730846e-01 Class 2
1489 149 1.7777778 -1.884271e-01 Class 2
1490 149 2.0000000 -2.224629e-01 Class 2
1491 150 0.0000000 -3.864884e-01 Class 2
1492 150 0.2222222 -3.035648e-01 Class 2
1493 150 0.4444444 -3.273827e-01 Class 2
1494 150 0.6666667 -3.472523e-01 Class 2
1495 150 0.8888889 -2.870021e-01 Class 2
1496 150 1.1111111 -2.572091e-01 Class 2
1497 150 1.3333333 -2.817468e-01 Class 2
1498 150 1.5555556 -2.269613e-01 Class 2
1499 150 1.7777778 -3.865626e-01 Class 2
1500 150 2.0000000 -2.156983e-01 Class 2
1501 151 0.0000000  2.664690e-01 Class 3
1502 151 0.2222222  3.779010e-01 Class 3
1503 151 0.4444444  4.500043e-01 Class 3
1504 151 0.6666667  3.891443e-01 Class 3
1505 151 0.8888889  3.366495e-01 Class 3
1506 151 1.1111111  1.112259e-01 Class 3
1507 151 1.3333333  5.289738e-02 Class 3
1508 151 1.5555556 -1.726560e-02 Class 3
1509 151 1.7777778 -3.335077e-01 Class 3
1510 151 2.0000000 -5.158242e-01 Class 3
1511 152 0.0000000  2.633456e-01 Class 3
1512 152 0.2222222  2.812963e-01 Class 3
1513 152 0.4444444  2.677815e-01 Class 3
1514 152 0.6666667  2.091255e-01 Class 3
1515 152 0.8888889  2.277311e-01 Class 3
1516 152 1.1111111  1.197879e-02 Class 3
1517 152 1.3333333 -8.559286e-02 Class 3
1518 152 1.5555556 -2.310940e-01 Class 3
1519 152 1.7777778 -4.994675e-01 Class 3
1520 152 2.0000000 -7.245472e-01 Class 3
1521 153 0.0000000  2.612024e-01 Class 3
1522 153 0.2222222  2.633442e-01 Class 3
1523 153 0.4444444  2.740423e-01 Class 3
1524 153 0.6666667  3.123572e-01 Class 3
1525 153 0.8888889  1.525754e-01 Class 3
1526 153 1.1111111  5.863465e-02 Class 3
1527 153 1.3333333 -2.081184e-01 Class 3
1528 153 1.5555556 -3.001769e-01 Class 3
1529 153 1.7777778 -5.720112e-01 Class 3
1530 153 2.0000000 -8.670150e-01 Class 3
1531 154 0.0000000  2.071821e-01 Class 3
1532 154 0.2222222  1.875048e-01 Class 3
1533 154 0.4444444  2.278598e-01 Class 3
1534 154 0.6666667  8.767488e-02 Class 3
1535 154 0.8888889 -7.401112e-02 Class 3
1536 154 1.1111111 -7.226074e-02 Class 3
1537 154 1.3333333 -1.992600e-01 Class 3
1538 154 1.5555556 -3.247092e-01 Class 3
1539 154 1.7777778 -6.526050e-01 Class 3
1540 154 2.0000000 -9.284741e-01 Class 3
1541 155 0.0000000  7.046657e-02 Class 3
1542 155 0.2222222  1.897634e-01 Class 3
1543 155 0.4444444  1.797149e-01 Class 3
1544 155 0.6666667  2.164385e-01 Class 3
1545 155 0.8888889  8.850590e-02 Class 3
1546 155 1.1111111  4.133842e-02 Class 3
1547 155 1.3333333 -1.391215e-01 Class 3
1548 155 1.5555556 -2.300199e-01 Class 3
1549 155 1.7777778 -4.153622e-01 Class 3
1550 155 2.0000000 -6.802894e-01 Class 3
1551 156 0.0000000  1.105461e-01 Class 3
1552 156 0.2222222  1.795988e-01 Class 3
1553 156 0.4444444  1.189337e-01 Class 3
1554 156 0.6666667  1.599899e-01 Class 3
1555 156 0.8888889  1.287377e-02 Class 3
1556 156 1.1111111 -8.093673e-03 Class 3
1557 156 1.3333333 -6.824678e-02 Class 3
1558 156 1.5555556 -3.085737e-01 Class 3
1559 156 1.7777778 -4.972242e-01 Class 3
1560 156 2.0000000 -7.706280e-01 Class 3
1561 157 0.0000000  3.335050e-01 Class 3
1562 157 0.2222222  3.779008e-01 Class 3
1563 157 0.4444444  2.385595e-01 Class 3
1564 157 0.6666667  3.053422e-01 Class 3
1565 157 0.8888889  1.159015e-01 Class 3
1566 157 1.1111111  5.058154e-02 Class 3
1567 157 1.3333333 -2.778097e-01 Class 3
1568 157 1.5555556 -3.542157e-01 Class 3
1569 157 1.7777778 -7.035357e-01 Class 3
1570 157 2.0000000 -9.134176e-01 Class 3
1571 158 0.0000000  1.869063e-01 Class 3
1572 158 0.2222222  1.883134e-01 Class 3
1573 158 0.4444444  2.379682e-01 Class 3
1574 158 0.6666667  1.634737e-01 Class 3
1575 158 0.8888889  4.890044e-02 Class 3
1576 158 1.1111111 -9.020071e-02 Class 3
1577 158 1.3333333 -9.015377e-02 Class 3
1578 158 1.5555556 -4.628324e-01 Class 3
1579 158 1.7777778 -6.315920e-01 Class 3
1580 158 2.0000000 -9.538259e-01 Class 3
1581 159 0.0000000  6.066458e-02 Class 3
1582 159 0.2222222  3.520779e-02 Class 3
1583 159 0.4444444 -1.606027e-02 Class 3
1584 159 0.6666667 -9.778335e-02 Class 3
1585 159 0.8888889 -2.276514e-01 Class 3
1586 159 1.1111111 -2.833970e-01 Class 3
1587 159 1.3333333 -5.339132e-01 Class 3
1588 159 1.5555556 -6.659950e-01 Class 3
1589 159 1.7777778 -1.017673e+00 Class 3
1590 159 2.0000000 -1.289815e+00 Class 3
1591 160 0.0000000  4.620650e-01 Class 3
1592 160 0.2222222  5.106658e-01 Class 3
1593 160 0.4444444  4.837120e-01 Class 3
1594 160 0.6666667  3.926979e-01 Class 3
1595 160 0.8888889  3.719219e-01 Class 3
1596 160 1.1111111  1.987815e-01 Class 3
1597 160 1.3333333  8.480598e-02 Class 3
1598 160 1.5555556 -2.124132e-01 Class 3
1599 160 1.7777778 -3.673251e-01 Class 3
1600 160 2.0000000 -7.177214e-01 Class 3
1601 161 0.0000000  2.482026e-01 Class 3
1602 161 0.2222222  1.745925e-01 Class 3
1603 161 0.4444444  2.903793e-01 Class 3
1604 161 0.6666667  1.345406e-01 Class 3
1605 161 0.8888889 -3.453875e-02 Class 3
1606 161 1.1111111 -1.767549e-01 Class 3
1607 161 1.3333333 -4.282356e-01 Class 3
1608 161 1.5555556 -7.552675e-01 Class 3
1609 161 1.7777778 -1.094255e+00 Class 3
1610 161 2.0000000 -1.336359e+00 Class 3
1611 162 0.0000000  2.104960e-01 Class 3
1612 162 0.2222222  2.382260e-01 Class 3
1613 162 0.4444444  3.374953e-01 Class 3
1614 162 0.6666667  2.868517e-01 Class 3
1615 162 0.8888889  2.903858e-01 Class 3
1616 162 1.1111111  2.206497e-01 Class 3
1617 162 1.3333333 -7.697448e-03 Class 3
1618 162 1.5555556 -1.922341e-01 Class 3
1619 162 1.7777778 -3.528496e-01 Class 3
1620 162 2.0000000 -5.398048e-01 Class 3
1621 163 0.0000000  2.691108e-01 Class 3
1622 163 0.2222222  3.356574e-01 Class 3
1623 163 0.4444444  3.239131e-01 Class 3
1624 163 0.6666667  3.211087e-01 Class 3
1625 163 0.8888889  3.246948e-01 Class 3
1626 163 1.1111111  4.598739e-02 Class 3
1627 163 1.3333333 -1.279936e-01 Class 3
1628 163 1.5555556 -4.071810e-01 Class 3
1629 163 1.7777778 -6.289651e-01 Class 3
1630 163 2.0000000 -8.328235e-01 Class 3
1631 164 0.0000000  3.013762e-01 Class 3
1632 164 0.2222222  3.405661e-01 Class 3
1633 164 0.4444444  3.339789e-01 Class 3
1634 164 0.6666667  2.957509e-01 Class 3
1635 164 0.8888889  2.875755e-01 Class 3
1636 164 1.1111111  1.371280e-01 Class 3
1637 164 1.3333333  3.963473e-03 Class 3
1638 164 1.5555556 -3.999767e-01 Class 3
1639 164 1.7777778 -5.806872e-01 Class 3
1640 164 2.0000000 -7.951983e-01 Class 3
1641 165 0.0000000  1.728838e-01 Class 3
1642 165 0.2222222  2.360196e-01 Class 3
1643 165 0.4444444  1.802118e-01 Class 3
1644 165 0.6666667  7.223148e-02 Class 3
1645 165 0.8888889  1.884819e-02 Class 3
1646 165 1.1111111  4.807607e-02 Class 3
1647 165 1.3333333 -2.253571e-01 Class 3
1648 165 1.5555556 -3.278760e-01 Class 3
1649 165 1.7777778 -6.184134e-01 Class 3
1650 165 2.0000000 -9.106589e-01 Class 3
1651 166 0.0000000  5.517869e-01 Class 3
1652 166 0.2222222  4.405096e-01 Class 3
1653 166 0.4444444  4.994191e-01 Class 3
1654 166 0.6666667  4.846496e-01 Class 3
1655 166 0.8888889  3.850960e-01 Class 3
1656 166 1.1111111  3.097611e-01 Class 3
1657 166 1.3333333  7.031883e-02 Class 3
1658 166 1.5555556 -8.402586e-02 Class 3
1659 166 1.7777778 -2.097650e-01 Class 3
1660 166 2.0000000 -4.948701e-01 Class 3
1661 167 0.0000000  2.896955e-01 Class 3
1662 167 0.2222222  2.586476e-01 Class 3
1663 167 0.4444444  2.675175e-01 Class 3
1664 167 0.6666667  2.375505e-01 Class 3
1665 167 0.8888889  1.430493e-01 Class 3
1666 167 1.1111111  9.627486e-02 Class 3
1667 167 1.3333333 -1.217791e-01 Class 3
1668 167 1.5555556 -2.242158e-01 Class 3
1669 167 1.7777778 -4.835472e-01 Class 3
1670 167 2.0000000 -7.010980e-01 Class 3
1671 168 0.0000000  1.699479e-01 Class 3
1672 168 0.2222222  1.351633e-01 Class 3
1673 168 0.4444444  1.434057e-01 Class 3
1674 168 0.6666667  1.319766e-01 Class 3
1675 168 0.8888889  3.127842e-02 Class 3
1676 168 1.1111111  3.473613e-02 Class 3
1677 168 1.3333333 -1.976839e-01 Class 3
1678 168 1.5555556 -3.396723e-01 Class 3
1679 168 1.7777778 -5.923145e-01 Class 3
1680 168 2.0000000 -8.080747e-01 Class 3
1681 169 0.0000000  2.251087e-01 Class 3
1682 169 0.2222222  1.247371e-01 Class 3
1683 169 0.4444444  2.726715e-01 Class 3
1684 169 0.6666667  1.345974e-01 Class 3
1685 169 0.8888889  1.157098e-01 Class 3
1686 169 1.1111111 -9.279980e-02 Class 3
1687 169 1.3333333 -2.232803e-01 Class 3
1688 169 1.5555556 -4.602133e-01 Class 3
1689 169 1.7777778 -6.982664e-01 Class 3
1690 169 2.0000000 -1.011688e+00 Class 3
1691 170 0.0000000  2.215636e-01 Class 3
1692 170 0.2222222  2.860813e-01 Class 3
1693 170 0.4444444  1.814356e-01 Class 3
1694 170 0.6666667  1.545045e-01 Class 3
1695 170 0.8888889  4.072793e-02 Class 3
1696 170 1.1111111 -1.287034e-01 Class 3
1697 170 1.3333333 -2.016537e-01 Class 3
1698 170 1.5555556 -6.137961e-01 Class 3
1699 170 1.7777778 -7.898029e-01 Class 3
1700 170 2.0000000 -1.162360e+00 Class 3
1701 171 0.0000000  4.137453e-01 Class 3
1702 171 0.2222222  5.056767e-01 Class 3
1703 171 0.4444444  6.050196e-01 Class 3
1704 171 0.6666667  5.148767e-01 Class 3
1705 171 0.8888889  3.615799e-01 Class 3
1706 171 1.1111111  1.889105e-01 Class 3
1707 171 1.3333333  1.533184e-01 Class 3
1708 171 1.5555556 -1.704070e-01 Class 3
1709 171 1.7777778 -4.526327e-01 Class 3
1710 171 2.0000000 -7.648201e-01 Class 3
1711 172 0.0000000  2.313788e-01 Class 3
1712 172 0.2222222  3.859633e-01 Class 3
1713 172 0.4444444  3.593179e-01 Class 3
1714 172 0.6666667  2.958732e-01 Class 3
1715 172 0.8888889  1.096149e-01 Class 3
1716 172 1.1111111  6.183330e-02 Class 3
1717 172 1.3333333 -2.555240e-02 Class 3
1718 172 1.5555556 -2.908887e-01 Class 3
1719 172 1.7777778 -5.438671e-01 Class 3
1720 172 2.0000000 -7.812329e-01 Class 3
1721 173 0.0000000  2.602351e-01 Class 3
1722 173 0.2222222  2.954762e-01 Class 3
1723 173 0.4444444  4.109689e-01 Class 3
1724 173 0.6666667  2.572672e-01 Class 3
1725 173 0.8888889  1.911492e-01 Class 3
1726 173 1.1111111 -9.329453e-03 Class 3
1727 173 1.3333333 -2.145995e-01 Class 3
1728 173 1.5555556 -3.784528e-01 Class 3
1729 173 1.7777778 -7.446521e-01 Class 3
1730 173 2.0000000 -8.954571e-01 Class 3
1731 174 0.0000000  2.311966e-01 Class 3
1732 174 0.2222222  1.254422e-01 Class 3
1733 174 0.4444444  2.278691e-01 Class 3
1734 174 0.6666667  2.058896e-01 Class 3
1735 174 0.8888889  2.417993e-01 Class 3
1736 174 1.1111111  1.463684e-02 Class 3
1737 174 1.3333333 -2.188633e-01 Class 3
1738 174 1.5555556 -3.617798e-01 Class 3
1739 174 1.7777778 -6.347580e-01 Class 3
1740 174 2.0000000 -9.501843e-01 Class 3
1741 175 0.0000000  1.831842e-01 Class 3
1742 175 0.2222222  1.336461e-01 Class 3
1743 175 0.4444444  3.309987e-01 Class 3
1744 175 0.6666667  1.415570e-01 Class 3
1745 175 0.8888889  5.023403e-02 Class 3
1746 175 1.1111111 -1.867614e-01 Class 3
1747 175 1.3333333 -2.520828e-01 Class 3
1748 175 1.5555556 -5.179424e-01 Class 3
1749 175 1.7777778 -8.576689e-01 Class 3
1750 175 2.0000000 -1.122319e+00 Class 3
1751 176 0.0000000  2.265458e-01 Class 3
1752 176 0.2222222  3.464803e-01 Class 3
1753 176 0.4444444  2.700744e-01 Class 3
1754 176 0.6666667  2.891238e-01 Class 3
1755 176 0.8888889  1.884533e-01 Class 3
1756 176 1.1111111  1.459601e-02 Class 3
1757 176 1.3333333 -1.348542e-01 Class 3
1758 176 1.5555556 -3.768980e-01 Class 3
1759 176 1.7777778 -5.996028e-01 Class 3
1760 176 2.0000000 -9.249303e-01 Class 3
1761 177 0.0000000  3.075451e-01 Class 3
1762 177 0.2222222  3.491855e-01 Class 3
1763 177 0.4444444  3.556856e-01 Class 3
1764 177 0.6666667  4.512108e-01 Class 3
1765 177 0.8888889  2.536493e-01 Class 3
1766 177 1.1111111  5.314167e-02 Class 3
1767 177 1.3333333  1.462908e-02 Class 3
1768 177 1.5555556 -2.446052e-01 Class 3
1769 177 1.7777778 -3.976129e-01 Class 3
1770 177 2.0000000 -7.427766e-01 Class 3
1771 178 0.0000000  5.378629e-01 Class 3
1772 178 0.2222222  4.892239e-01 Class 3
1773 178 0.4444444  4.560080e-01 Class 3
1774 178 0.6666667  5.356230e-01 Class 3
1775 178 0.8888889  2.824250e-01 Class 3
1776 178 1.1111111  2.465115e-01 Class 3
1777 178 1.3333333  1.148119e-02 Class 3
1778 178 1.5555556 -8.453103e-02 Class 3
1779 178 1.7777778 -3.661140e-01 Class 3
1780 178 2.0000000 -6.931055e-01 Class 3
1781 179 0.0000000  3.338560e-01 Class 3
1782 179 0.2222222  4.293343e-01 Class 3
1783 179 0.4444444  3.243028e-01 Class 3
1784 179 0.6666667  2.918372e-01 Class 3
1785 179 0.8888889  2.647354e-01 Class 3
1786 179 1.1111111  1.559911e-01 Class 3
1787 179 1.3333333 -1.326435e-01 Class 3
1788 179 1.5555556 -2.421576e-01 Class 3
1789 179 1.7777778 -5.542402e-01 Class 3
1790 179 2.0000000 -8.121344e-01 Class 3
1791 180 0.0000000  4.364128e-01 Class 3
1792 180 0.2222222  4.958604e-01 Class 3
1793 180 0.4444444  4.715933e-01 Class 3
1794 180 0.6666667  4.305910e-01 Class 3
1795 180 0.8888889  4.492403e-01 Class 3
1796 180 1.1111111  4.298578e-01 Class 3
1797 180 1.3333333  2.734608e-01 Class 3
1798 180 1.5555556  8.616595e-02 Class 3
1799 180 1.7777778 -1.316570e-01 Class 3
1800 180 2.0000000 -3.235243e-01 Class 3
1801 181 0.0000000  1.727146e-01 Class 3
1802 181 0.2222222  2.200801e-01 Class 3
1803 181 0.4444444  1.572780e-01 Class 3
1804 181 0.6666667  3.211639e-02 Class 3
1805 181 0.8888889  7.247361e-02 Class 3
1806 181 1.1111111  6.051005e-02 Class 3
1807 181 1.3333333 -1.587465e-01 Class 3
1808 181 1.5555556 -3.654225e-01 Class 3
1809 181 1.7777778 -6.590837e-01 Class 3
1810 181 2.0000000 -8.508337e-01 Class 3
1811 182 0.0000000  3.079815e-01 Class 3
1812 182 0.2222222  3.785515e-01 Class 3
1813 182 0.4444444  4.342307e-01 Class 3
1814 182 0.6666667  3.996590e-01 Class 3
1815 182 0.8888889  4.164826e-01 Class 3
1816 182 1.1111111  1.776426e-01 Class 3
1817 182 1.3333333  4.412901e-02 Class 3
1818 182 1.5555556 -1.125903e-01 Class 3
1819 182 1.7777778 -2.752311e-01 Class 3
1820 182 2.0000000 -4.206400e-01 Class 3
1821 183 0.0000000  3.404818e-01 Class 3
1822 183 0.2222222  2.683602e-01 Class 3
1823 183 0.4444444  2.241226e-01 Class 3
1824 183 0.6666667  2.625385e-01 Class 3
1825 183 0.8888889  1.115031e-01 Class 3
1826 183 1.1111111 -6.756054e-02 Class 3
1827 183 1.3333333 -2.307617e-01 Class 3
1828 183 1.5555556 -3.912649e-01 Class 3
1829 183 1.7777778 -7.171692e-01 Class 3
1830 183 2.0000000 -1.002527e+00 Class 3
1831 184 0.0000000  1.422954e-01 Class 3
1832 184 0.2222222  1.156224e-01 Class 3
1833 184 0.4444444  4.135124e-02 Class 3
1834 184 0.6666667  1.020364e-01 Class 3
1835 184 0.8888889  8.517013e-02 Class 3
1836 184 1.1111111 -1.031983e-01 Class 3
1837 184 1.3333333 -2.193899e-01 Class 3
1838 184 1.5555556 -4.775650e-01 Class 3
1839 184 1.7777778 -7.331339e-01 Class 3
1840 184 2.0000000 -9.420013e-01 Class 3
1841 185 0.0000000  2.828538e-01 Class 3
1842 185 0.2222222  4.056863e-01 Class 3
1843 185 0.4444444  4.331774e-01 Class 3
1844 185 0.6666667  3.474479e-01 Class 3
1845 185 0.8888889  3.159667e-01 Class 3
1846 185 1.1111111  2.604046e-01 Class 3
1847 185 1.3333333  1.512809e-01 Class 3
1848 185 1.5555556 -1.171127e-01 Class 3
1849 185 1.7777778 -3.365027e-01 Class 3
1850 185 2.0000000 -5.827436e-01 Class 3
1851 186 0.0000000  2.946247e-01 Class 3
1852 186 0.2222222  2.310219e-01 Class 3
1853 186 0.4444444  2.312479e-01 Class 3
1854 186 0.6666667  2.065331e-01 Class 3
1855 186 0.8888889  7.045477e-02 Class 3
1856 186 1.1111111 -9.437856e-03 Class 3
1857 186 1.3333333 -1.711472e-01 Class 3
1858 186 1.5555556 -3.506863e-01 Class 3
1859 186 1.7777778 -5.616429e-01 Class 3
1860 186 2.0000000 -7.987087e-01 Class 3
1861 187 0.0000000  4.370242e-01 Class 3
1862 187 0.2222222  3.213787e-01 Class 3
1863 187 0.4444444  4.091530e-01 Class 3
1864 187 0.6666667  2.837396e-01 Class 3
1865 187 0.8888889  1.165839e-01 Class 3
1866 187 1.1111111  1.101641e-02 Class 3
1867 187 1.3333333 -2.381389e-01 Class 3
1868 187 1.5555556 -5.214907e-01 Class 3
1869 187 1.7777778 -8.309639e-01 Class 3
1870 187 2.0000000 -1.085084e+00 Class 3
1871 188 0.0000000  6.283395e-02 Class 3
1872 188 0.2222222  2.091131e-01 Class 3
1873 188 0.4444444  1.644614e-01 Class 3
1874 188 0.6666667  8.426455e-02 Class 3
1875 188 0.8888889  1.213489e-01 Class 3
1876 188 1.1111111 -1.073654e-02 Class 3
1877 188 1.3333333 -2.596088e-01 Class 3
1878 188 1.5555556 -3.659618e-01 Class 3
1879 188 1.7777778 -5.640238e-01 Class 3
1880 188 2.0000000 -8.254948e-01 Class 3
1881 189 0.0000000  2.216979e-01 Class 3
1882 189 0.2222222  2.364060e-01 Class 3
1883 189 0.4444444  1.640381e-01 Class 3
1884 189 0.6666667  8.724267e-02 Class 3
1885 189 0.8888889 -6.184765e-02 Class 3
1886 189 1.1111111 -2.725620e-01 Class 3
1887 189 1.3333333 -4.121635e-01 Class 3
1888 189 1.5555556 -6.222327e-01 Class 3
1889 189 1.7777778 -8.376862e-01 Class 3
1890 189 2.0000000 -1.296084e+00 Class 3
1891 190 0.0000000  1.579767e-01 Class 3
1892 190 0.2222222  6.881586e-02 Class 3
1893 190 0.4444444  1.138301e-01 Class 3
1894 190 0.6666667  1.566408e-01 Class 3
1895 190 0.8888889 -2.125895e-02 Class 3
1896 190 1.1111111 -1.203461e-01 Class 3
1897 190 1.3333333 -2.951722e-01 Class 3
1898 190 1.5555556 -5.952865e-01 Class 3
1899 190 1.7777778 -8.057966e-01 Class 3
1900 190 2.0000000 -1.093218e+00 Class 3
1901 191 0.0000000  2.167051e-01 Class 3
1902 191 0.2222222  3.078018e-01 Class 3
1903 191 0.4444444  2.905337e-01 Class 3
1904 191 0.6666667  2.517826e-01 Class 3
1905 191 0.8888889  2.825263e-01 Class 3
1906 191 1.1111111  2.330478e-01 Class 3
1907 191 1.3333333  4.012726e-02 Class 3
1908 191 1.5555556 -1.442316e-01 Class 3
1909 191 1.7777778 -3.668082e-01 Class 3
1910 191 2.0000000 -5.322080e-01 Class 3
1911 192 0.0000000  3.452011e-01 Class 3
1912 192 0.2222222  4.099050e-01 Class 3
1913 192 0.4444444  3.808182e-01 Class 3
1914 192 0.6666667  3.338297e-01 Class 3
1915 192 0.8888889  2.760796e-01 Class 3
1916 192 1.1111111  1.557230e-01 Class 3
1917 192 1.3333333 -6.549760e-02 Class 3
1918 192 1.5555556 -8.545634e-02 Class 3
1919 192 1.7777778 -4.773788e-01 Class 3
1920 192 2.0000000 -6.390562e-01 Class 3
1921 193 0.0000000  1.150290e-01 Class 3
1922 193 0.2222222  1.921946e-01 Class 3
1923 193 0.4444444  2.219970e-01 Class 3
1924 193 0.6666667  1.786091e-01 Class 3
1925 193 0.8888889  1.765307e-01 Class 3
1926 193 1.1111111  3.961088e-02 Class 3
1927 193 1.3333333 -4.755357e-02 Class 3
1928 193 1.5555556 -1.315012e-01 Class 3
1929 193 1.7777778 -4.119738e-01 Class 3
1930 193 2.0000000 -7.894205e-01 Class 3
1931 194 0.0000000  3.569231e-01 Class 3
1932 194 0.2222222  3.793874e-01 Class 3
1933 194 0.4444444  4.758845e-01 Class 3
1934 194 0.6666667  3.676239e-01 Class 3
1935 194 0.8888889  2.535408e-01 Class 3
1936 194 1.1111111  8.793156e-02 Class 3
1937 194 1.3333333 -1.520331e-03 Class 3
1938 194 1.5555556 -1.387824e-01 Class 3
1939 194 1.7777778 -4.769098e-01 Class 3
1940 194 2.0000000 -7.439063e-01 Class 3
1941 195 0.0000000  1.784180e-01 Class 3
1942 195 0.2222222  2.083848e-01 Class 3
1943 195 0.4444444  1.419173e-01 Class 3
1944 195 0.6666667  8.636116e-02 Class 3
1945 195 0.8888889  1.198104e-02 Class 3
1946 195 1.1111111 -4.378665e-02 Class 3
1947 195 1.3333333 -2.603427e-01 Class 3
1948 195 1.5555556 -4.540236e-01 Class 3
1949 195 1.7777778 -6.285749e-01 Class 3
1950 195 2.0000000 -9.493716e-01 Class 3
1951 196 0.0000000  2.060538e-01 Class 3
1952 196 0.2222222  2.464836e-01 Class 3
1953 196 0.4444444  1.205809e-01 Class 3
1954 196 0.6666667  6.736036e-02 Class 3
1955 196 0.8888889 -2.242651e-02 Class 3
1956 196 1.1111111 -1.507189e-01 Class 3
1957 196 1.3333333 -3.808967e-01 Class 3
1958 196 1.5555556 -5.662458e-01 Class 3
1959 196 1.7777778 -8.743055e-01 Class 3
1960 196 2.0000000 -1.121987e+00 Class 3
1961 197 0.0000000  3.467559e-01 Class 3
1962 197 0.2222222  4.536987e-01 Class 3
1963 197 0.4444444  5.665885e-01 Class 3
1964 197 0.6666667  4.719877e-01 Class 3
1965 197 0.8888889  4.070098e-01 Class 3
1966 197 1.1111111  3.843275e-01 Class 3
1967 197 1.3333333  7.897134e-02 Class 3
1968 197 1.5555556  6.798930e-02 Class 3
1969 197 1.7777778 -1.321147e-01 Class 3
1970 197 2.0000000 -2.700802e-01 Class 3
1971 198 0.0000000  1.203713e-01 Class 3
1972 198 0.2222222  1.451069e-01 Class 3
1973 198 0.4444444  2.967861e-01 Class 3
1974 198 0.6666667  1.586670e-01 Class 3
1975 198 0.8888889  5.829574e-02 Class 3
1976 198 1.1111111 -3.702909e-02 Class 3
1977 198 1.3333333 -2.457303e-01 Class 3
1978 198 1.5555556 -4.841471e-01 Class 3
1979 198 1.7777778 -6.247883e-01 Class 3
1980 198 2.0000000 -9.381322e-01 Class 3
1981 199 0.0000000  2.862516e-01 Class 3
1982 199 0.2222222  2.453220e-01 Class 3
1983 199 0.4444444  2.517319e-01 Class 3
1984 199 0.6666667  2.565302e-01 Class 3
1985 199 0.8888889  8.622183e-02 Class 3
1986 199 1.1111111  2.066621e-02 Class 3
1987 199 1.3333333 -1.198231e-01 Class 3
1988 199 1.5555556 -3.516931e-01 Class 3
1989 199 1.7777778 -7.221270e-01 Class 3
1990 199 2.0000000 -9.454804e-01 Class 3
1991 200 0.0000000  2.123882e-01 Class 3
1992 200 0.2222222  3.121701e-01 Class 3
1993 200 0.4444444  3.016063e-01 Class 3
1994 200 0.6666667  1.930413e-01 Class 3
1995 200 0.8888889  1.780560e-01 Class 3
1996 200 1.1111111  1.483383e-01 Class 3
1997 200 1.3333333 -3.785807e-03 Class 3
1998 200 1.5555556 -1.409999e-01 Class 3
1999 200 1.7777778 -5.030799e-01 Class 3
2000 200 2.0000000 -7.486002e-01 Class 3
> 
> 
> 
> cleanEx()
> nameEx("model.frame.lcModel")
> ### * model.frame.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: model.frame.lcModel
> ### Title: Extract model training data
> ### Aliases: model.frame.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.035 secs)
---------------------------------------------------------------------------
> model.frame(model)
          Time
1    0.0000000
2    0.2222222
3    0.4444444
4    0.6666667
5    0.8888889
6    1.1111111
7    1.3333333
8    1.5555556
9    1.7777778
10   2.0000000
11   0.0000000
12   0.2222222
13   0.4444444
14   0.6666667
15   0.8888889
16   1.1111111
17   1.3333333
18   1.5555556
19   1.7777778
20   2.0000000
21   0.0000000
22   0.2222222
23   0.4444444
24   0.6666667
25   0.8888889
26   1.1111111
27   1.3333333
28   1.5555556
29   1.7777778
30   2.0000000
31   0.0000000
32   0.2222222
33   0.4444444
34   0.6666667
35   0.8888889
36   1.1111111
37   1.3333333
38   1.5555556
39   1.7777778
40   2.0000000
41   0.0000000
42   0.2222222
43   0.4444444
44   0.6666667
45   0.8888889
46   1.1111111
47   1.3333333
48   1.5555556
49   1.7777778
50   2.0000000
51   0.0000000
52   0.2222222
53   0.4444444
54   0.6666667
55   0.8888889
56   1.1111111
57   1.3333333
58   1.5555556
59   1.7777778
60   2.0000000
61   0.0000000
62   0.2222222
63   0.4444444
64   0.6666667
65   0.8888889
66   1.1111111
67   1.3333333
68   1.5555556
69   1.7777778
70   2.0000000
71   0.0000000
72   0.2222222
73   0.4444444
74   0.6666667
75   0.8888889
76   1.1111111
77   1.3333333
78   1.5555556
79   1.7777778
80   2.0000000
81   0.0000000
82   0.2222222
83   0.4444444
84   0.6666667
85   0.8888889
86   1.1111111
87   1.3333333
88   1.5555556
89   1.7777778
90   2.0000000
91   0.0000000
92   0.2222222
93   0.4444444
94   0.6666667
95   0.8888889
96   1.1111111
97   1.3333333
98   1.5555556
99   1.7777778
100  2.0000000
101  0.0000000
102  0.2222222
103  0.4444444
104  0.6666667
105  0.8888889
106  1.1111111
107  1.3333333
108  1.5555556
109  1.7777778
110  2.0000000
111  0.0000000
112  0.2222222
113  0.4444444
114  0.6666667
115  0.8888889
116  1.1111111
117  1.3333333
118  1.5555556
119  1.7777778
120  2.0000000
121  0.0000000
122  0.2222222
123  0.4444444
124  0.6666667
125  0.8888889
126  1.1111111
127  1.3333333
128  1.5555556
129  1.7777778
130  2.0000000
131  0.0000000
132  0.2222222
133  0.4444444
134  0.6666667
135  0.8888889
136  1.1111111
137  1.3333333
138  1.5555556
139  1.7777778
140  2.0000000
141  0.0000000
142  0.2222222
143  0.4444444
144  0.6666667
145  0.8888889
146  1.1111111
147  1.3333333
148  1.5555556
149  1.7777778
150  2.0000000
151  0.0000000
152  0.2222222
153  0.4444444
154  0.6666667
155  0.8888889
156  1.1111111
157  1.3333333
158  1.5555556
159  1.7777778
160  2.0000000
161  0.0000000
162  0.2222222
163  0.4444444
164  0.6666667
165  0.8888889
166  1.1111111
167  1.3333333
168  1.5555556
169  1.7777778
170  2.0000000
171  0.0000000
172  0.2222222
173  0.4444444
174  0.6666667
175  0.8888889
176  1.1111111
177  1.3333333
178  1.5555556
179  1.7777778
180  2.0000000
181  0.0000000
182  0.2222222
183  0.4444444
184  0.6666667
185  0.8888889
186  1.1111111
187  1.3333333
188  1.5555556
189  1.7777778
190  2.0000000
191  0.0000000
192  0.2222222
193  0.4444444
194  0.6666667
195  0.8888889
196  1.1111111
197  1.3333333
198  1.5555556
199  1.7777778
200  2.0000000
201  0.0000000
202  0.2222222
203  0.4444444
204  0.6666667
205  0.8888889
206  1.1111111
207  1.3333333
208  1.5555556
209  1.7777778
210  2.0000000
211  0.0000000
212  0.2222222
213  0.4444444
214  0.6666667
215  0.8888889
216  1.1111111
217  1.3333333
218  1.5555556
219  1.7777778
220  2.0000000
221  0.0000000
222  0.2222222
223  0.4444444
224  0.6666667
225  0.8888889
226  1.1111111
227  1.3333333
228  1.5555556
229  1.7777778
230  2.0000000
231  0.0000000
232  0.2222222
233  0.4444444
234  0.6666667
235  0.8888889
236  1.1111111
237  1.3333333
238  1.5555556
239  1.7777778
240  2.0000000
241  0.0000000
242  0.2222222
243  0.4444444
244  0.6666667
245  0.8888889
246  1.1111111
247  1.3333333
248  1.5555556
249  1.7777778
250  2.0000000
251  0.0000000
252  0.2222222
253  0.4444444
254  0.6666667
255  0.8888889
256  1.1111111
257  1.3333333
258  1.5555556
259  1.7777778
260  2.0000000
261  0.0000000
262  0.2222222
263  0.4444444
264  0.6666667
265  0.8888889
266  1.1111111
267  1.3333333
268  1.5555556
269  1.7777778
270  2.0000000
271  0.0000000
272  0.2222222
273  0.4444444
274  0.6666667
275  0.8888889
276  1.1111111
277  1.3333333
278  1.5555556
279  1.7777778
280  2.0000000
281  0.0000000
282  0.2222222
283  0.4444444
284  0.6666667
285  0.8888889
286  1.1111111
287  1.3333333
288  1.5555556
289  1.7777778
290  2.0000000
291  0.0000000
292  0.2222222
293  0.4444444
294  0.6666667
295  0.8888889
296  1.1111111
297  1.3333333
298  1.5555556
299  1.7777778
300  2.0000000
301  0.0000000
302  0.2222222
303  0.4444444
304  0.6666667
305  0.8888889
306  1.1111111
307  1.3333333
308  1.5555556
309  1.7777778
310  2.0000000
311  0.0000000
312  0.2222222
313  0.4444444
314  0.6666667
315  0.8888889
316  1.1111111
317  1.3333333
318  1.5555556
319  1.7777778
320  2.0000000
321  0.0000000
322  0.2222222
323  0.4444444
324  0.6666667
325  0.8888889
326  1.1111111
327  1.3333333
328  1.5555556
329  1.7777778
330  2.0000000
331  0.0000000
332  0.2222222
333  0.4444444
334  0.6666667
335  0.8888889
336  1.1111111
337  1.3333333
338  1.5555556
339  1.7777778
340  2.0000000
341  0.0000000
342  0.2222222
343  0.4444444
344  0.6666667
345  0.8888889
346  1.1111111
347  1.3333333
348  1.5555556
349  1.7777778
350  2.0000000
351  0.0000000
352  0.2222222
353  0.4444444
354  0.6666667
355  0.8888889
356  1.1111111
357  1.3333333
358  1.5555556
359  1.7777778
360  2.0000000
361  0.0000000
362  0.2222222
363  0.4444444
364  0.6666667
365  0.8888889
366  1.1111111
367  1.3333333
368  1.5555556
369  1.7777778
370  2.0000000
371  0.0000000
372  0.2222222
373  0.4444444
374  0.6666667
375  0.8888889
376  1.1111111
377  1.3333333
378  1.5555556
379  1.7777778
380  2.0000000
381  0.0000000
382  0.2222222
383  0.4444444
384  0.6666667
385  0.8888889
386  1.1111111
387  1.3333333
388  1.5555556
389  1.7777778
390  2.0000000
391  0.0000000
392  0.2222222
393  0.4444444
394  0.6666667
395  0.8888889
396  1.1111111
397  1.3333333
398  1.5555556
399  1.7777778
400  2.0000000
401  0.0000000
402  0.2222222
403  0.4444444
404  0.6666667
405  0.8888889
406  1.1111111
407  1.3333333
408  1.5555556
409  1.7777778
410  2.0000000
411  0.0000000
412  0.2222222
413  0.4444444
414  0.6666667
415  0.8888889
416  1.1111111
417  1.3333333
418  1.5555556
419  1.7777778
420  2.0000000
421  0.0000000
422  0.2222222
423  0.4444444
424  0.6666667
425  0.8888889
426  1.1111111
427  1.3333333
428  1.5555556
429  1.7777778
430  2.0000000
431  0.0000000
432  0.2222222
433  0.4444444
434  0.6666667
435  0.8888889
436  1.1111111
437  1.3333333
438  1.5555556
439  1.7777778
440  2.0000000
441  0.0000000
442  0.2222222
443  0.4444444
444  0.6666667
445  0.8888889
446  1.1111111
447  1.3333333
448  1.5555556
449  1.7777778
450  2.0000000
451  0.0000000
452  0.2222222
453  0.4444444
454  0.6666667
455  0.8888889
456  1.1111111
457  1.3333333
458  1.5555556
459  1.7777778
460  2.0000000
461  0.0000000
462  0.2222222
463  0.4444444
464  0.6666667
465  0.8888889
466  1.1111111
467  1.3333333
468  1.5555556
469  1.7777778
470  2.0000000
471  0.0000000
472  0.2222222
473  0.4444444
474  0.6666667
475  0.8888889
476  1.1111111
477  1.3333333
478  1.5555556
479  1.7777778
480  2.0000000
481  0.0000000
482  0.2222222
483  0.4444444
484  0.6666667
485  0.8888889
486  1.1111111
487  1.3333333
488  1.5555556
489  1.7777778
490  2.0000000
491  0.0000000
492  0.2222222
493  0.4444444
494  0.6666667
495  0.8888889
496  1.1111111
497  1.3333333
498  1.5555556
499  1.7777778
500  2.0000000
501  0.0000000
502  0.2222222
503  0.4444444
504  0.6666667
505  0.8888889
506  1.1111111
507  1.3333333
508  1.5555556
509  1.7777778
510  2.0000000
511  0.0000000
512  0.2222222
513  0.4444444
514  0.6666667
515  0.8888889
516  1.1111111
517  1.3333333
518  1.5555556
519  1.7777778
520  2.0000000
521  0.0000000
522  0.2222222
523  0.4444444
524  0.6666667
525  0.8888889
526  1.1111111
527  1.3333333
528  1.5555556
529  1.7777778
530  2.0000000
531  0.0000000
532  0.2222222
533  0.4444444
534  0.6666667
535  0.8888889
536  1.1111111
537  1.3333333
538  1.5555556
539  1.7777778
540  2.0000000
541  0.0000000
542  0.2222222
543  0.4444444
544  0.6666667
545  0.8888889
546  1.1111111
547  1.3333333
548  1.5555556
549  1.7777778
550  2.0000000
551  0.0000000
552  0.2222222
553  0.4444444
554  0.6666667
555  0.8888889
556  1.1111111
557  1.3333333
558  1.5555556
559  1.7777778
560  2.0000000
561  0.0000000
562  0.2222222
563  0.4444444
564  0.6666667
565  0.8888889
566  1.1111111
567  1.3333333
568  1.5555556
569  1.7777778
570  2.0000000
571  0.0000000
572  0.2222222
573  0.4444444
574  0.6666667
575  0.8888889
576  1.1111111
577  1.3333333
578  1.5555556
579  1.7777778
580  2.0000000
581  0.0000000
582  0.2222222
583  0.4444444
584  0.6666667
585  0.8888889
586  1.1111111
587  1.3333333
588  1.5555556
589  1.7777778
590  2.0000000
591  0.0000000
592  0.2222222
593  0.4444444
594  0.6666667
595  0.8888889
596  1.1111111
597  1.3333333
598  1.5555556
599  1.7777778
600  2.0000000
601  0.0000000
602  0.2222222
603  0.4444444
604  0.6666667
605  0.8888889
606  1.1111111
607  1.3333333
608  1.5555556
609  1.7777778
610  2.0000000
611  0.0000000
612  0.2222222
613  0.4444444
614  0.6666667
615  0.8888889
616  1.1111111
617  1.3333333
618  1.5555556
619  1.7777778
620  2.0000000
621  0.0000000
622  0.2222222
623  0.4444444
624  0.6666667
625  0.8888889
626  1.1111111
627  1.3333333
628  1.5555556
629  1.7777778
630  2.0000000
631  0.0000000
632  0.2222222
633  0.4444444
634  0.6666667
635  0.8888889
636  1.1111111
637  1.3333333
638  1.5555556
639  1.7777778
640  2.0000000
641  0.0000000
642  0.2222222
643  0.4444444
644  0.6666667
645  0.8888889
646  1.1111111
647  1.3333333
648  1.5555556
649  1.7777778
650  2.0000000
651  0.0000000
652  0.2222222
653  0.4444444
654  0.6666667
655  0.8888889
656  1.1111111
657  1.3333333
658  1.5555556
659  1.7777778
660  2.0000000
661  0.0000000
662  0.2222222
663  0.4444444
664  0.6666667
665  0.8888889
666  1.1111111
667  1.3333333
668  1.5555556
669  1.7777778
670  2.0000000
671  0.0000000
672  0.2222222
673  0.4444444
674  0.6666667
675  0.8888889
676  1.1111111
677  1.3333333
678  1.5555556
679  1.7777778
680  2.0000000
681  0.0000000
682  0.2222222
683  0.4444444
684  0.6666667
685  0.8888889
686  1.1111111
687  1.3333333
688  1.5555556
689  1.7777778
690  2.0000000
691  0.0000000
692  0.2222222
693  0.4444444
694  0.6666667
695  0.8888889
696  1.1111111
697  1.3333333
698  1.5555556
699  1.7777778
700  2.0000000
701  0.0000000
702  0.2222222
703  0.4444444
704  0.6666667
705  0.8888889
706  1.1111111
707  1.3333333
708  1.5555556
709  1.7777778
710  2.0000000
711  0.0000000
712  0.2222222
713  0.4444444
714  0.6666667
715  0.8888889
716  1.1111111
717  1.3333333
718  1.5555556
719  1.7777778
720  2.0000000
721  0.0000000
722  0.2222222
723  0.4444444
724  0.6666667
725  0.8888889
726  1.1111111
727  1.3333333
728  1.5555556
729  1.7777778
730  2.0000000
731  0.0000000
732  0.2222222
733  0.4444444
734  0.6666667
735  0.8888889
736  1.1111111
737  1.3333333
738  1.5555556
739  1.7777778
740  2.0000000
741  0.0000000
742  0.2222222
743  0.4444444
744  0.6666667
745  0.8888889
746  1.1111111
747  1.3333333
748  1.5555556
749  1.7777778
750  2.0000000
751  0.0000000
752  0.2222222
753  0.4444444
754  0.6666667
755  0.8888889
756  1.1111111
757  1.3333333
758  1.5555556
759  1.7777778
760  2.0000000
761  0.0000000
762  0.2222222
763  0.4444444
764  0.6666667
765  0.8888889
766  1.1111111
767  1.3333333
768  1.5555556
769  1.7777778
770  2.0000000
771  0.0000000
772  0.2222222
773  0.4444444
774  0.6666667
775  0.8888889
776  1.1111111
777  1.3333333
778  1.5555556
779  1.7777778
780  2.0000000
781  0.0000000
782  0.2222222
783  0.4444444
784  0.6666667
785  0.8888889
786  1.1111111
787  1.3333333
788  1.5555556
789  1.7777778
790  2.0000000
791  0.0000000
792  0.2222222
793  0.4444444
794  0.6666667
795  0.8888889
796  1.1111111
797  1.3333333
798  1.5555556
799  1.7777778
800  2.0000000
801  0.0000000
802  0.2222222
803  0.4444444
804  0.6666667
805  0.8888889
806  1.1111111
807  1.3333333
808  1.5555556
809  1.7777778
810  2.0000000
811  0.0000000
812  0.2222222
813  0.4444444
814  0.6666667
815  0.8888889
816  1.1111111
817  1.3333333
818  1.5555556
819  1.7777778
820  2.0000000
821  0.0000000
822  0.2222222
823  0.4444444
824  0.6666667
825  0.8888889
826  1.1111111
827  1.3333333
828  1.5555556
829  1.7777778
830  2.0000000
831  0.0000000
832  0.2222222
833  0.4444444
834  0.6666667
835  0.8888889
836  1.1111111
837  1.3333333
838  1.5555556
839  1.7777778
840  2.0000000
841  0.0000000
842  0.2222222
843  0.4444444
844  0.6666667
845  0.8888889
846  1.1111111
847  1.3333333
848  1.5555556
849  1.7777778
850  2.0000000
851  0.0000000
852  0.2222222
853  0.4444444
854  0.6666667
855  0.8888889
856  1.1111111
857  1.3333333
858  1.5555556
859  1.7777778
860  2.0000000
861  0.0000000
862  0.2222222
863  0.4444444
864  0.6666667
865  0.8888889
866  1.1111111
867  1.3333333
868  1.5555556
869  1.7777778
870  2.0000000
871  0.0000000
872  0.2222222
873  0.4444444
874  0.6666667
875  0.8888889
876  1.1111111
877  1.3333333
878  1.5555556
879  1.7777778
880  2.0000000
881  0.0000000
882  0.2222222
883  0.4444444
884  0.6666667
885  0.8888889
886  1.1111111
887  1.3333333
888  1.5555556
889  1.7777778
890  2.0000000
891  0.0000000
892  0.2222222
893  0.4444444
894  0.6666667
895  0.8888889
896  1.1111111
897  1.3333333
898  1.5555556
899  1.7777778
900  2.0000000
901  0.0000000
902  0.2222222
903  0.4444444
904  0.6666667
905  0.8888889
906  1.1111111
907  1.3333333
908  1.5555556
909  1.7777778
910  2.0000000
911  0.0000000
912  0.2222222
913  0.4444444
914  0.6666667
915  0.8888889
916  1.1111111
917  1.3333333
918  1.5555556
919  1.7777778
920  2.0000000
921  0.0000000
922  0.2222222
923  0.4444444
924  0.6666667
925  0.8888889
926  1.1111111
927  1.3333333
928  1.5555556
929  1.7777778
930  2.0000000
931  0.0000000
932  0.2222222
933  0.4444444
934  0.6666667
935  0.8888889
936  1.1111111
937  1.3333333
938  1.5555556
939  1.7777778
940  2.0000000
941  0.0000000
942  0.2222222
943  0.4444444
944  0.6666667
945  0.8888889
946  1.1111111
947  1.3333333
948  1.5555556
949  1.7777778
950  2.0000000
951  0.0000000
952  0.2222222
953  0.4444444
954  0.6666667
955  0.8888889
956  1.1111111
957  1.3333333
958  1.5555556
959  1.7777778
960  2.0000000
961  0.0000000
962  0.2222222
963  0.4444444
964  0.6666667
965  0.8888889
966  1.1111111
967  1.3333333
968  1.5555556
969  1.7777778
970  2.0000000
971  0.0000000
972  0.2222222
973  0.4444444
974  0.6666667
975  0.8888889
976  1.1111111
977  1.3333333
978  1.5555556
979  1.7777778
980  2.0000000
981  0.0000000
982  0.2222222
983  0.4444444
984  0.6666667
985  0.8888889
986  1.1111111
987  1.3333333
988  1.5555556
989  1.7777778
990  2.0000000
991  0.0000000
992  0.2222222
993  0.4444444
994  0.6666667
995  0.8888889
996  1.1111111
997  1.3333333
998  1.5555556
999  1.7777778
1000 2.0000000
1001 0.0000000
1002 0.2222222
1003 0.4444444
1004 0.6666667
1005 0.8888889
1006 1.1111111
1007 1.3333333
1008 1.5555556
1009 1.7777778
1010 2.0000000
1011 0.0000000
1012 0.2222222
1013 0.4444444
1014 0.6666667
1015 0.8888889
1016 1.1111111
1017 1.3333333
1018 1.5555556
1019 1.7777778
1020 2.0000000
1021 0.0000000
1022 0.2222222
1023 0.4444444
1024 0.6666667
1025 0.8888889
1026 1.1111111
1027 1.3333333
1028 1.5555556
1029 1.7777778
1030 2.0000000
1031 0.0000000
1032 0.2222222
1033 0.4444444
1034 0.6666667
1035 0.8888889
1036 1.1111111
1037 1.3333333
1038 1.5555556
1039 1.7777778
1040 2.0000000
1041 0.0000000
1042 0.2222222
1043 0.4444444
1044 0.6666667
1045 0.8888889
1046 1.1111111
1047 1.3333333
1048 1.5555556
1049 1.7777778
1050 2.0000000
1051 0.0000000
1052 0.2222222
1053 0.4444444
1054 0.6666667
1055 0.8888889
1056 1.1111111
1057 1.3333333
1058 1.5555556
1059 1.7777778
1060 2.0000000
1061 0.0000000
1062 0.2222222
1063 0.4444444
1064 0.6666667
1065 0.8888889
1066 1.1111111
1067 1.3333333
1068 1.5555556
1069 1.7777778
1070 2.0000000
1071 0.0000000
1072 0.2222222
1073 0.4444444
1074 0.6666667
1075 0.8888889
1076 1.1111111
1077 1.3333333
1078 1.5555556
1079 1.7777778
1080 2.0000000
1081 0.0000000
1082 0.2222222
1083 0.4444444
1084 0.6666667
1085 0.8888889
1086 1.1111111
1087 1.3333333
1088 1.5555556
1089 1.7777778
1090 2.0000000
1091 0.0000000
1092 0.2222222
1093 0.4444444
1094 0.6666667
1095 0.8888889
1096 1.1111111
1097 1.3333333
1098 1.5555556
1099 1.7777778
1100 2.0000000
1101 0.0000000
1102 0.2222222
1103 0.4444444
1104 0.6666667
1105 0.8888889
1106 1.1111111
1107 1.3333333
1108 1.5555556
1109 1.7777778
1110 2.0000000
1111 0.0000000
1112 0.2222222
1113 0.4444444
1114 0.6666667
1115 0.8888889
1116 1.1111111
1117 1.3333333
1118 1.5555556
1119 1.7777778
1120 2.0000000
1121 0.0000000
1122 0.2222222
1123 0.4444444
1124 0.6666667
1125 0.8888889
1126 1.1111111
1127 1.3333333
1128 1.5555556
1129 1.7777778
1130 2.0000000
1131 0.0000000
1132 0.2222222
1133 0.4444444
1134 0.6666667
1135 0.8888889
1136 1.1111111
1137 1.3333333
1138 1.5555556
1139 1.7777778
1140 2.0000000
1141 0.0000000
1142 0.2222222
1143 0.4444444
1144 0.6666667
1145 0.8888889
1146 1.1111111
1147 1.3333333
1148 1.5555556
1149 1.7777778
1150 2.0000000
1151 0.0000000
1152 0.2222222
1153 0.4444444
1154 0.6666667
1155 0.8888889
1156 1.1111111
1157 1.3333333
1158 1.5555556
1159 1.7777778
1160 2.0000000
1161 0.0000000
1162 0.2222222
1163 0.4444444
1164 0.6666667
1165 0.8888889
1166 1.1111111
1167 1.3333333
1168 1.5555556
1169 1.7777778
1170 2.0000000
1171 0.0000000
1172 0.2222222
1173 0.4444444
1174 0.6666667
1175 0.8888889
1176 1.1111111
1177 1.3333333
1178 1.5555556
1179 1.7777778
1180 2.0000000
1181 0.0000000
1182 0.2222222
1183 0.4444444
1184 0.6666667
1185 0.8888889
1186 1.1111111
1187 1.3333333
1188 1.5555556
1189 1.7777778
1190 2.0000000
1191 0.0000000
1192 0.2222222
1193 0.4444444
1194 0.6666667
1195 0.8888889
1196 1.1111111
1197 1.3333333
1198 1.5555556
1199 1.7777778
1200 2.0000000
1201 0.0000000
1202 0.2222222
1203 0.4444444
1204 0.6666667
1205 0.8888889
1206 1.1111111
1207 1.3333333
1208 1.5555556
1209 1.7777778
1210 2.0000000
1211 0.0000000
1212 0.2222222
1213 0.4444444
1214 0.6666667
1215 0.8888889
1216 1.1111111
1217 1.3333333
1218 1.5555556
1219 1.7777778
1220 2.0000000
1221 0.0000000
1222 0.2222222
1223 0.4444444
1224 0.6666667
1225 0.8888889
1226 1.1111111
1227 1.3333333
1228 1.5555556
1229 1.7777778
1230 2.0000000
1231 0.0000000
1232 0.2222222
1233 0.4444444
1234 0.6666667
1235 0.8888889
1236 1.1111111
1237 1.3333333
1238 1.5555556
1239 1.7777778
1240 2.0000000
1241 0.0000000
1242 0.2222222
1243 0.4444444
1244 0.6666667
1245 0.8888889
1246 1.1111111
1247 1.3333333
1248 1.5555556
1249 1.7777778
1250 2.0000000
1251 0.0000000
1252 0.2222222
1253 0.4444444
1254 0.6666667
1255 0.8888889
1256 1.1111111
1257 1.3333333
1258 1.5555556
1259 1.7777778
1260 2.0000000
1261 0.0000000
1262 0.2222222
1263 0.4444444
1264 0.6666667
1265 0.8888889
1266 1.1111111
1267 1.3333333
1268 1.5555556
1269 1.7777778
1270 2.0000000
1271 0.0000000
1272 0.2222222
1273 0.4444444
1274 0.6666667
1275 0.8888889
1276 1.1111111
1277 1.3333333
1278 1.5555556
1279 1.7777778
1280 2.0000000
1281 0.0000000
1282 0.2222222
1283 0.4444444
1284 0.6666667
1285 0.8888889
1286 1.1111111
1287 1.3333333
1288 1.5555556
1289 1.7777778
1290 2.0000000
1291 0.0000000
1292 0.2222222
1293 0.4444444
1294 0.6666667
1295 0.8888889
1296 1.1111111
1297 1.3333333
1298 1.5555556
1299 1.7777778
1300 2.0000000
1301 0.0000000
1302 0.2222222
1303 0.4444444
1304 0.6666667
1305 0.8888889
1306 1.1111111
1307 1.3333333
1308 1.5555556
1309 1.7777778
1310 2.0000000
1311 0.0000000
1312 0.2222222
1313 0.4444444
1314 0.6666667
1315 0.8888889
1316 1.1111111
1317 1.3333333
1318 1.5555556
1319 1.7777778
1320 2.0000000
1321 0.0000000
1322 0.2222222
1323 0.4444444
1324 0.6666667
1325 0.8888889
1326 1.1111111
1327 1.3333333
1328 1.5555556
1329 1.7777778
1330 2.0000000
1331 0.0000000
1332 0.2222222
1333 0.4444444
1334 0.6666667
1335 0.8888889
1336 1.1111111
1337 1.3333333
1338 1.5555556
1339 1.7777778
1340 2.0000000
1341 0.0000000
1342 0.2222222
1343 0.4444444
1344 0.6666667
1345 0.8888889
1346 1.1111111
1347 1.3333333
1348 1.5555556
1349 1.7777778
1350 2.0000000
1351 0.0000000
1352 0.2222222
1353 0.4444444
1354 0.6666667
1355 0.8888889
1356 1.1111111
1357 1.3333333
1358 1.5555556
1359 1.7777778
1360 2.0000000
1361 0.0000000
1362 0.2222222
1363 0.4444444
1364 0.6666667
1365 0.8888889
1366 1.1111111
1367 1.3333333
1368 1.5555556
1369 1.7777778
1370 2.0000000
1371 0.0000000
1372 0.2222222
1373 0.4444444
1374 0.6666667
1375 0.8888889
1376 1.1111111
1377 1.3333333
1378 1.5555556
1379 1.7777778
1380 2.0000000
1381 0.0000000
1382 0.2222222
1383 0.4444444
1384 0.6666667
1385 0.8888889
1386 1.1111111
1387 1.3333333
1388 1.5555556
1389 1.7777778
1390 2.0000000
1391 0.0000000
1392 0.2222222
1393 0.4444444
1394 0.6666667
1395 0.8888889
1396 1.1111111
1397 1.3333333
1398 1.5555556
1399 1.7777778
1400 2.0000000
1401 0.0000000
1402 0.2222222
1403 0.4444444
1404 0.6666667
1405 0.8888889
1406 1.1111111
1407 1.3333333
1408 1.5555556
1409 1.7777778
1410 2.0000000
1411 0.0000000
1412 0.2222222
1413 0.4444444
1414 0.6666667
1415 0.8888889
1416 1.1111111
1417 1.3333333
1418 1.5555556
1419 1.7777778
1420 2.0000000
1421 0.0000000
1422 0.2222222
1423 0.4444444
1424 0.6666667
1425 0.8888889
1426 1.1111111
1427 1.3333333
1428 1.5555556
1429 1.7777778
1430 2.0000000
1431 0.0000000
1432 0.2222222
1433 0.4444444
1434 0.6666667
1435 0.8888889
1436 1.1111111
1437 1.3333333
1438 1.5555556
1439 1.7777778
1440 2.0000000
1441 0.0000000
1442 0.2222222
1443 0.4444444
1444 0.6666667
1445 0.8888889
1446 1.1111111
1447 1.3333333
1448 1.5555556
1449 1.7777778
1450 2.0000000
1451 0.0000000
1452 0.2222222
1453 0.4444444
1454 0.6666667
1455 0.8888889
1456 1.1111111
1457 1.3333333
1458 1.5555556
1459 1.7777778
1460 2.0000000
1461 0.0000000
1462 0.2222222
1463 0.4444444
1464 0.6666667
1465 0.8888889
1466 1.1111111
1467 1.3333333
1468 1.5555556
1469 1.7777778
1470 2.0000000
1471 0.0000000
1472 0.2222222
1473 0.4444444
1474 0.6666667
1475 0.8888889
1476 1.1111111
1477 1.3333333
1478 1.5555556
1479 1.7777778
1480 2.0000000
1481 0.0000000
1482 0.2222222
1483 0.4444444
1484 0.6666667
1485 0.8888889
1486 1.1111111
1487 1.3333333
1488 1.5555556
1489 1.7777778
1490 2.0000000
1491 0.0000000
1492 0.2222222
1493 0.4444444
1494 0.6666667
1495 0.8888889
1496 1.1111111
1497 1.3333333
1498 1.5555556
1499 1.7777778
1500 2.0000000
1501 0.0000000
1502 0.2222222
1503 0.4444444
1504 0.6666667
1505 0.8888889
1506 1.1111111
1507 1.3333333
1508 1.5555556
1509 1.7777778
1510 2.0000000
1511 0.0000000
1512 0.2222222
1513 0.4444444
1514 0.6666667
1515 0.8888889
1516 1.1111111
1517 1.3333333
1518 1.5555556
1519 1.7777778
1520 2.0000000
1521 0.0000000
1522 0.2222222
1523 0.4444444
1524 0.6666667
1525 0.8888889
1526 1.1111111
1527 1.3333333
1528 1.5555556
1529 1.7777778
1530 2.0000000
1531 0.0000000
1532 0.2222222
1533 0.4444444
1534 0.6666667
1535 0.8888889
1536 1.1111111
1537 1.3333333
1538 1.5555556
1539 1.7777778
1540 2.0000000
1541 0.0000000
1542 0.2222222
1543 0.4444444
1544 0.6666667
1545 0.8888889
1546 1.1111111
1547 1.3333333
1548 1.5555556
1549 1.7777778
1550 2.0000000
1551 0.0000000
1552 0.2222222
1553 0.4444444
1554 0.6666667
1555 0.8888889
1556 1.1111111
1557 1.3333333
1558 1.5555556
1559 1.7777778
1560 2.0000000
1561 0.0000000
1562 0.2222222
1563 0.4444444
1564 0.6666667
1565 0.8888889
1566 1.1111111
1567 1.3333333
1568 1.5555556
1569 1.7777778
1570 2.0000000
1571 0.0000000
1572 0.2222222
1573 0.4444444
1574 0.6666667
1575 0.8888889
1576 1.1111111
1577 1.3333333
1578 1.5555556
1579 1.7777778
1580 2.0000000
1581 0.0000000
1582 0.2222222
1583 0.4444444
1584 0.6666667
1585 0.8888889
1586 1.1111111
1587 1.3333333
1588 1.5555556
1589 1.7777778
1590 2.0000000
1591 0.0000000
1592 0.2222222
1593 0.4444444
1594 0.6666667
1595 0.8888889
1596 1.1111111
1597 1.3333333
1598 1.5555556
1599 1.7777778
1600 2.0000000
1601 0.0000000
1602 0.2222222
1603 0.4444444
1604 0.6666667
1605 0.8888889
1606 1.1111111
1607 1.3333333
1608 1.5555556
1609 1.7777778
1610 2.0000000
1611 0.0000000
1612 0.2222222
1613 0.4444444
1614 0.6666667
1615 0.8888889
1616 1.1111111
1617 1.3333333
1618 1.5555556
1619 1.7777778
1620 2.0000000
1621 0.0000000
1622 0.2222222
1623 0.4444444
1624 0.6666667
1625 0.8888889
1626 1.1111111
1627 1.3333333
1628 1.5555556
1629 1.7777778
1630 2.0000000
1631 0.0000000
1632 0.2222222
1633 0.4444444
1634 0.6666667
1635 0.8888889
1636 1.1111111
1637 1.3333333
1638 1.5555556
1639 1.7777778
1640 2.0000000
1641 0.0000000
1642 0.2222222
1643 0.4444444
1644 0.6666667
1645 0.8888889
1646 1.1111111
1647 1.3333333
1648 1.5555556
1649 1.7777778
1650 2.0000000
1651 0.0000000
1652 0.2222222
1653 0.4444444
1654 0.6666667
1655 0.8888889
1656 1.1111111
1657 1.3333333
1658 1.5555556
1659 1.7777778
1660 2.0000000
1661 0.0000000
1662 0.2222222
1663 0.4444444
1664 0.6666667
1665 0.8888889
1666 1.1111111
1667 1.3333333
1668 1.5555556
1669 1.7777778
1670 2.0000000
1671 0.0000000
1672 0.2222222
1673 0.4444444
1674 0.6666667
1675 0.8888889
1676 1.1111111
1677 1.3333333
1678 1.5555556
1679 1.7777778
1680 2.0000000
1681 0.0000000
1682 0.2222222
1683 0.4444444
1684 0.6666667
1685 0.8888889
1686 1.1111111
1687 1.3333333
1688 1.5555556
1689 1.7777778
1690 2.0000000
1691 0.0000000
1692 0.2222222
1693 0.4444444
1694 0.6666667
1695 0.8888889
1696 1.1111111
1697 1.3333333
1698 1.5555556
1699 1.7777778
1700 2.0000000
1701 0.0000000
1702 0.2222222
1703 0.4444444
1704 0.6666667
1705 0.8888889
1706 1.1111111
1707 1.3333333
1708 1.5555556
1709 1.7777778
1710 2.0000000
1711 0.0000000
1712 0.2222222
1713 0.4444444
1714 0.6666667
1715 0.8888889
1716 1.1111111
1717 1.3333333
1718 1.5555556
1719 1.7777778
1720 2.0000000
1721 0.0000000
1722 0.2222222
1723 0.4444444
1724 0.6666667
1725 0.8888889
1726 1.1111111
1727 1.3333333
1728 1.5555556
1729 1.7777778
1730 2.0000000
1731 0.0000000
1732 0.2222222
1733 0.4444444
1734 0.6666667
1735 0.8888889
1736 1.1111111
1737 1.3333333
1738 1.5555556
1739 1.7777778
1740 2.0000000
1741 0.0000000
1742 0.2222222
1743 0.4444444
1744 0.6666667
1745 0.8888889
1746 1.1111111
1747 1.3333333
1748 1.5555556
1749 1.7777778
1750 2.0000000
1751 0.0000000
1752 0.2222222
1753 0.4444444
1754 0.6666667
1755 0.8888889
1756 1.1111111
1757 1.3333333
1758 1.5555556
1759 1.7777778
1760 2.0000000
1761 0.0000000
1762 0.2222222
1763 0.4444444
1764 0.6666667
1765 0.8888889
1766 1.1111111
1767 1.3333333
1768 1.5555556
1769 1.7777778
1770 2.0000000
1771 0.0000000
1772 0.2222222
1773 0.4444444
1774 0.6666667
1775 0.8888889
1776 1.1111111
1777 1.3333333
1778 1.5555556
1779 1.7777778
1780 2.0000000
1781 0.0000000
1782 0.2222222
1783 0.4444444
1784 0.6666667
1785 0.8888889
1786 1.1111111
1787 1.3333333
1788 1.5555556
1789 1.7777778
1790 2.0000000
1791 0.0000000
1792 0.2222222
1793 0.4444444
1794 0.6666667
1795 0.8888889
1796 1.1111111
1797 1.3333333
1798 1.5555556
1799 1.7777778
1800 2.0000000
1801 0.0000000
1802 0.2222222
1803 0.4444444
1804 0.6666667
1805 0.8888889
1806 1.1111111
1807 1.3333333
1808 1.5555556
1809 1.7777778
1810 2.0000000
1811 0.0000000
1812 0.2222222
1813 0.4444444
1814 0.6666667
1815 0.8888889
1816 1.1111111
1817 1.3333333
1818 1.5555556
1819 1.7777778
1820 2.0000000
1821 0.0000000
1822 0.2222222
1823 0.4444444
1824 0.6666667
1825 0.8888889
1826 1.1111111
1827 1.3333333
1828 1.5555556
1829 1.7777778
1830 2.0000000
1831 0.0000000
1832 0.2222222
1833 0.4444444
1834 0.6666667
1835 0.8888889
1836 1.1111111
1837 1.3333333
1838 1.5555556
1839 1.7777778
1840 2.0000000
1841 0.0000000
1842 0.2222222
1843 0.4444444
1844 0.6666667
1845 0.8888889
1846 1.1111111
1847 1.3333333
1848 1.5555556
1849 1.7777778
1850 2.0000000
1851 0.0000000
1852 0.2222222
1853 0.4444444
1854 0.6666667
1855 0.8888889
1856 1.1111111
1857 1.3333333
1858 1.5555556
1859 1.7777778
1860 2.0000000
1861 0.0000000
1862 0.2222222
1863 0.4444444
1864 0.6666667
1865 0.8888889
1866 1.1111111
1867 1.3333333
1868 1.5555556
1869 1.7777778
1870 2.0000000
1871 0.0000000
1872 0.2222222
1873 0.4444444
1874 0.6666667
1875 0.8888889
1876 1.1111111
1877 1.3333333
1878 1.5555556
1879 1.7777778
1880 2.0000000
1881 0.0000000
1882 0.2222222
1883 0.4444444
1884 0.6666667
1885 0.8888889
1886 1.1111111
1887 1.3333333
1888 1.5555556
1889 1.7777778
1890 2.0000000
1891 0.0000000
1892 0.2222222
1893 0.4444444
1894 0.6666667
1895 0.8888889
1896 1.1111111
1897 1.3333333
1898 1.5555556
1899 1.7777778
1900 2.0000000
1901 0.0000000
1902 0.2222222
1903 0.4444444
1904 0.6666667
1905 0.8888889
1906 1.1111111
1907 1.3333333
1908 1.5555556
1909 1.7777778
1910 2.0000000
1911 0.0000000
1912 0.2222222
1913 0.4444444
1914 0.6666667
1915 0.8888889
1916 1.1111111
1917 1.3333333
1918 1.5555556
1919 1.7777778
1920 2.0000000
1921 0.0000000
1922 0.2222222
1923 0.4444444
1924 0.6666667
1925 0.8888889
1926 1.1111111
1927 1.3333333
1928 1.5555556
1929 1.7777778
1930 2.0000000
1931 0.0000000
1932 0.2222222
1933 0.4444444
1934 0.6666667
1935 0.8888889
1936 1.1111111
1937 1.3333333
1938 1.5555556
1939 1.7777778
1940 2.0000000
1941 0.0000000
1942 0.2222222
1943 0.4444444
1944 0.6666667
1945 0.8888889
1946 1.1111111
1947 1.3333333
1948 1.5555556
1949 1.7777778
1950 2.0000000
1951 0.0000000
1952 0.2222222
1953 0.4444444
1954 0.6666667
1955 0.8888889
1956 1.1111111
1957 1.3333333
1958 1.5555556
1959 1.7777778
1960 2.0000000
1961 0.0000000
1962 0.2222222
1963 0.4444444
1964 0.6666667
1965 0.8888889
1966 1.1111111
1967 1.3333333
1968 1.5555556
1969 1.7777778
1970 2.0000000
1971 0.0000000
1972 0.2222222
1973 0.4444444
1974 0.6666667
1975 0.8888889
1976 1.1111111
1977 1.3333333
1978 1.5555556
1979 1.7777778
1980 2.0000000
1981 0.0000000
1982 0.2222222
1983 0.4444444
1984 0.6666667
1985 0.8888889
1986 1.1111111
1987 1.3333333
1988 1.5555556
1989 1.7777778
1990 2.0000000
1991 0.0000000
1992 0.2222222
1993 0.4444444
1994 0.6666667
1995 0.8888889
1996 1.1111111
1997 1.3333333
1998 1.5555556
1999 1.7777778
2000 2.0000000
> 
> 
> 
> cleanEx()
> nameEx("nClusters")
> ### * nClusters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nClusters
> ### Title: Number of clusters
> ### Aliases: nClusters
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodRandom("Y", id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      3
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.012 secs)
---------------------------------------------------------------------------
> nClusters(model) # 3
[1] 3
> 
> 
> 
> cleanEx()
> nameEx("nIds")
> ### * nIds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nIds
> ### Title: Number of trajectories
> ### Aliases: nIds
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodRandom("Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.047 secs)
---------------------------------------------------------------------------
> nIds(model)
[1] 200
> 
> 
> 
> cleanEx()
> nameEx("names-lcMethod-method")
> ### * names-lcMethod-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: names,lcMethod-method
> ### Title: lcMethod argument names
> ### Aliases: names,lcMethod-method length,lcMethod-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time)
> names(method)
 [1] "time"        "id"          "nClusters"   "center"      "standardize"
 [6] "method"      "model"       "y"           "qr"          "singular.ok"
[11] "contrasts"   "iter.max"    "nstart"      "algorithm"   "formula"    
> length(method)
[1] 15
> 
> 
> 
> cleanEx()
> nameEx("nobs.lcModel")
> ### * nobs.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nobs.lcModel
> ### Title: Number of observations used for the lcModel fit
> ### Aliases: nobs.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.021 secs)
---------------------------------------------------------------------------
> nobs(model)
[1] 2000
> 
> 
> 
> cleanEx()
> nameEx("plot-lcModel-method")
> ### * plot-lcModel-method
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot-lcModel-method
> ### Title: Plot a lcModel
> ### Aliases: plot-lcModel-method plot,lcModel,ANY-method
> ###   plot,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.028 secs)
---------------------------------------------------------------------------
> 
> if (require("ggplot2")) {
+   plot(model)
+ }
Loading required package: ggplot2
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plotClusterTrajectories")
> ### * plotClusterTrajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotClusterTrajectories
> ### Title: Plot cluster trajectories
> ### Aliases: plotClusterTrajectories
> ###   plotClusterTrajectories,data.frame-method
> ###   plotClusterTrajectories,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.023 secs)
---------------------------------------------------------------------------
> 
> if (require("ggplot2")) {
+   plotClusterTrajectories(model)
+ 
+   # show assigned trajectories
+   plotClusterTrajectories(model, trajectories = TRUE)
+ 
+   # show 95th percentile observation interval
+   plotClusterTrajectories(model, trajectories = "95pct")
+ 
+   # show observation standard deviation
+   plotClusterTrajectories(model, trajectories = "sd")
+ 
+   # show observation standard error
+   plotClusterTrajectories(model, trajectories = "se")
+ 
+   # show observation range
+   plotClusterTrajectories(model, trajectories = "range")
+ }
Loading required package: ggplot2
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plotFittedTrajectories")
> ### * plotFittedTrajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotFittedTrajectories
> ### Title: Plot fitted trajectories of a lcModel
> ### Aliases: plotFittedTrajectories plotFittedTrajectories,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.022 secs)
---------------------------------------------------------------------------
> 
> if (require("ggplot2")) {
+   plotFittedTrajectories(model)
+ }
Loading required package: ggplot2
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plotMetric")
> ### * plotMetric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotMetric
> ### Title: Plot one or more internal metrics for all lcModels
> ### Aliases: plotMetric
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> methods <- lcMethods(method, nClusters = 1:3)
> models <- latrendBatch(methods, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering of 1 dataset(s) using 3 method(s)
---------------------------------------------------------------------------

Fitting 3 models...
 --------------------------------------------------------------------------
 Fitting model 1/3 (33%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           1140350788
   - time:           "Time"
   - id:             "Id"
   - nClusters:      1
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 1140350788.
  Cluster step...
 Fitting model 1/3 (33%) using lm-kmeans...done (0.31 secs)
 Fitting model 2/3 (67%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           312928385
   - time:           "Time"
   - id:             "Id"
   - nClusters:      2
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 312928385.
  Cluster step...
 Fitting model 2/3 (67%) using lm-kmeans...done (0.32 secs)
 Fitting model 3/3 (100%) using lm-kmeans...
  lcMethodLMKM specifying "lm-kmeans"
   - seed:           866248189
   - time:           "Time"
   - id:             "Id"
   - nClusters:      3
   - center:         `meanNA`
   - standardize:    `scale`
   - method:         "qr"
   - model:          TRUE
   - y:              FALSE
   - qr:             TRUE
   - singular.ok:    TRUE
   - contrasts:      NULL
   - iter.max:       10
   - nstart:         1
   - algorithm:      `c("Hartigan-Wong", "Lloyd", "Forgy", "M
   - formula:        Y ~ Time
   Representation step...
  Setting seed 866248189.
  Cluster step...
 Fitting model 3/3 (100%) using lm-kmeans...done (0.31 secs)
Fitting 3 models...done (0.97 secs)
---------------------------------------------------------------------------
> 
> if (require("ggplot2")) {
+   plotMetric(models, "WMAE")
+ }
Loading required package: ggplot2
> 
> if (require("ggplot2") && require("clusterCrit")) {
+   plotMetric(models, c("WMAE", "Dunn"))
+ }
Loading required package: clusterCrit
Warning: Removed 1 rows containing missing values (`geom_point()`).
> 
> 
> 
> cleanEx()

detaching ‘package:clusterCrit’, ‘package:ggplot2’

> nameEx("plotTrajectories")
> ### * plotTrajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotTrajectories
> ### Title: Plot the data trajectories
> ### Aliases: plotTrajectories plotTrajectories,data.frame-method
> ###   plotTrajectories,ANY-method plotTrajectories,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> 
> if (require("ggplot2")) {
+   plotTrajectories(latrendData, response = "Y", id = "Id", time = "Time")
+ 
+   plotTrajectories(
+     latrendData,
+     response = quote(exp(Y)),
+     id = "Id",
+     time = "Time"
+   )
+ 
+   plotTrajectories(
+     latrendData,
+     response = "Y",
+     id = "Id",
+     time = "Time",
+     cluster = "Class"
+   )
+ 
+   # compute cluster membership based on the mean being below 0
+   assignments <- aggregate(Y ~ Id, latrendData, mean)$Y < 0
+   plotTrajectories(
+     latrendData,
+     response = "Y",
+     id = "Id",
+     time = "Time",
+     cluster = assignments
+   )
+ }
Loading required package: ggplot2
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.018 secs)
---------------------------------------------------------------------------
> 
> if (require("ggplot2")) {
+   plotTrajectories(model)
+ }
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("postprob")
> ### * postprob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postprob
> ### Title: Posterior probability per fitted trajectory
> ### Aliases: postprob postprob,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.017 secs)
---------------------------------------------------------------------------
> 
> postprob(model)
       A B
  [1,] 1 0
  [2,] 1 0
  [3,] 1 0
  [4,] 1 0
  [5,] 1 0
  [6,] 1 0
  [7,] 1 0
  [8,] 1 0
  [9,] 1 0
 [10,] 1 0
 [11,] 1 0
 [12,] 1 0
 [13,] 1 0
 [14,] 1 0
 [15,] 1 0
 [16,] 1 0
 [17,] 1 0
 [18,] 1 0
 [19,] 1 0
 [20,] 1 0
 [21,] 1 0
 [22,] 1 0
 [23,] 1 0
 [24,] 1 0
 [25,] 1 0
 [26,] 1 0
 [27,] 1 0
 [28,] 1 0
 [29,] 1 0
 [30,] 1 0
 [31,] 1 0
 [32,] 1 0
 [33,] 1 0
 [34,] 1 0
 [35,] 1 0
 [36,] 1 0
 [37,] 1 0
 [38,] 1 0
 [39,] 1 0
 [40,] 1 0
 [41,] 1 0
 [42,] 1 0
 [43,] 1 0
 [44,] 1 0
 [45,] 1 0
 [46,] 1 0
 [47,] 1 0
 [48,] 1 0
 [49,] 1 0
 [50,] 1 0
 [51,] 1 0
 [52,] 1 0
 [53,] 1 0
 [54,] 1 0
 [55,] 1 0
 [56,] 1 0
 [57,] 1 0
 [58,] 1 0
 [59,] 1 0
 [60,] 1 0
 [61,] 1 0
 [62,] 1 0
 [63,] 1 0
 [64,] 1 0
 [65,] 1 0
 [66,] 1 0
 [67,] 1 0
 [68,] 1 0
 [69,] 1 0
 [70,] 1 0
 [71,] 1 0
 [72,] 1 0
 [73,] 1 0
 [74,] 1 0
 [75,] 1 0
 [76,] 1 0
 [77,] 1 0
 [78,] 1 0
 [79,] 1 0
 [80,] 1 0
 [81,] 0 1
 [82,] 0 1
 [83,] 0 1
 [84,] 0 1
 [85,] 0 1
 [86,] 0 1
 [87,] 0 1
 [88,] 0 1
 [89,] 0 1
 [90,] 0 1
 [91,] 0 1
 [92,] 0 1
 [93,] 0 1
 [94,] 0 1
 [95,] 0 1
 [96,] 0 1
 [97,] 0 1
 [98,] 0 1
 [99,] 0 1
[100,] 0 1
[101,] 0 1
[102,] 0 1
[103,] 0 1
[104,] 0 1
[105,] 0 1
[106,] 0 1
[107,] 0 1
[108,] 0 1
[109,] 0 1
[110,] 0 1
[111,] 0 1
[112,] 0 1
[113,] 0 1
[114,] 0 1
[115,] 0 1
[116,] 0 1
[117,] 0 1
[118,] 0 1
[119,] 0 1
[120,] 0 1
[121,] 0 1
[122,] 0 1
[123,] 0 1
[124,] 0 1
[125,] 0 1
[126,] 0 1
[127,] 0 1
[128,] 0 1
[129,] 0 1
[130,] 0 1
[131,] 0 1
[132,] 0 1
[133,] 0 1
[134,] 0 1
[135,] 0 1
[136,] 0 1
[137,] 0 1
[138,] 0 1
[139,] 0 1
[140,] 0 1
[141,] 0 1
[142,] 0 1
[143,] 0 1
[144,] 0 1
[145,] 0 1
[146,] 0 1
[147,] 0 1
[148,] 0 1
[149,] 0 1
[150,] 0 1
[151,] 0 1
[152,] 0 1
[153,] 0 1
[154,] 0 1
[155,] 0 1
[156,] 0 1
[157,] 0 1
[158,] 0 1
[159,] 0 1
[160,] 0 1
[161,] 0 1
[162,] 0 1
[163,] 0 1
[164,] 0 1
[165,] 0 1
[166,] 0 1
[167,] 0 1
[168,] 0 1
[169,] 0 1
[170,] 0 1
[171,] 0 1
[172,] 0 1
[173,] 0 1
[174,] 0 1
[175,] 0 1
[176,] 0 1
[177,] 0 1
[178,] 0 1
[179,] 0 1
[180,] 0 1
[181,] 0 1
[182,] 0 1
[183,] 0 1
[184,] 0 1
[185,] 0 1
[186,] 0 1
[187,] 0 1
[188,] 0 1
[189,] 0 1
[190,] 0 1
[191,] 0 1
[192,] 0 1
[193,] 0 1
[194,] 0 1
[195,] 0 1
[196,] 0 1
[197,] 0 1
[198,] 0 1
[199,] 0 1
[200,] 0 1
> 
> if (rlang::is_installed("lcmm")) {
+   gmmMethod = lcMethodLcmmGMM(
+     fixed = Y ~ Time,
+     mixture = ~ Time,
+     id = "Id",
+     time = "Time",
+     idiag = TRUE,
+     nClusters = 2
+   )
+   gmmModel <- latrend(gmmMethod, data = latrendData)
+   postprob(gmmModel)
+ }
---------------------------------------------------------------------------
- Longitudinal clustering using: growth mixture model
---------------------------------------------------------------------------
Method arguments:
 mixture:        ~Time
 random:         ~1
 classmb:        ~1
 time:           "Time"
 id:             "Id"
 init:           "lme"
 nClusters:      2
 idiag:          TRUE
 nwg:            FALSE
 cor:            NULL
 convB:          1e-04
 convL:          1e-04
 convG:          1e-04
 pprior:         NULL
 maxiter:        500
 na.action:      1
 posfix:         NULL
 var.time:       NULL
 partialH:       FALSE
 nproc:          1
 clustertype:    NULL
 fixed:          Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
 Fitting standard linear mixed model for initializing the mixture estimation...
------------------ iteration  0 ------------------
Function value  -2211.674 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295723
parameter2  0.00000000
parameter3  1.00000000
parameter4  1.00000000

------------------ iteration  1 ------------------
Function value  -2211.661 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01365446 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295781
parameter2  0.00000137
parameter3  0.99999000
parameter4  0.99999246

------------------ iteration  2 ------------------
Function value  -2211.643 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.01733755 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.03295808
parameter2  0.00000233
parameter3  0.99998055
parameter4  0.99998246

------------------ iteration  3 ------------------
Function value  -1439.862 
Convergence criteria: parameters stability= 0.280072 
                    : function stability= 771.7816 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.04031975
parameter2  0.04576697
parameter3  0.64986537
parameter4  0.60584696

------------------ iteration  4 ------------------
Function value  -1439.841 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.02074656 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.04032027
parameter2  0.04576783
parameter3  0.64985797
parameter4  0.60583696

------------------ iteration  5 ------------------
Function value  -1259.308 
Convergence criteria: parameters stability= 0.1423089 
                    : function stability= 180.5326 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.05020431
parameter2  0.06607079
parameter3  0.47182147
parameter4  0.27402077

------------------ iteration  6 ------------------
Function value  -1182.724 
Convergence criteria: parameters stability= 1.186942 
                    : function stability= 76.58411 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17261108
parameter2  0.09024304
parameter3 -0.61021076
parameter4  0.29811228

------------------ iteration  7 ------------------
Function value  -1182.721 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00300208 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17261028
parameter2  0.09024312
parameter3 -0.61020076
parameter4  0.29811233

------------------ iteration  8 ------------------
Function value  -1182.718 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00380941 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.17260961
parameter2  0.09024344
parameter3 -0.61019076
parameter4  0.29811260

------------------ iteration  9 ------------------
Function value  -1070.899 
Convergence criteria: parameters stability= 0.05788247 
                    : function stability= 111.819 
                    : relative distance to maximum(RDM)= 735.0503 
                 coef
parameter1 -0.1578944
parameter2  0.1032584
parameter3 -0.3706614
parameter4  0.3091681

------------------ iteration  10 ------------------
Function value  -1070.895 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00369269 
                    : relative distance to maximum(RDM)= 734.1069 
                 coef
parameter1 -0.1578937
parameter2  0.1032586
parameter3 -0.3706514
parameter4  0.3091682

------------------ iteration  11 ------------------
Function value  -1070.891 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00379712 
                    : relative distance to maximum(RDM)= 732.7804 
                 coef
parameter1 -0.1578932
parameter2  0.1032587
parameter3 -0.3706414
parameter4  0.3091683

------------------ iteration  12 ------------------
Function value  -1044.445 
Convergence criteria: parameters stability= 0.5764923 
                    : function stability= 26.44575 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270200
parameter2  0.1190798
parameter3  0.3877042
parameter4  0.3233399

------------------ iteration  13 ------------------
Function value  -1044.442 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00348247 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270206
parameter2  0.1190798
parameter3  0.3876942
parameter4  0.3233399

------------------ iteration  14 ------------------
Function value  -1044.438 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00354728 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270210
parameter2  0.1190798
parameter3  0.3876842
parameter4  0.3233400

------------------ iteration  15 ------------------
Function value  -1044.435 
Convergence criteria: parameters stability= 0 
                    : function stability= 0.00359666 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1 -0.1270214
parameter2  0.1190799
parameter3  0.3876742
parameter4  0.3233402

------------------ iteration  16 ------------------
Function value  -990.0216 
Convergence criteria: parameters stability= 0.03537848 
                    : function stability= 54.41312 
                    : relative distance to maximum(RDM)= 12.63568 
                 coef
parameter1 -0.1312689
parameter2  0.1205435
parameter3  0.1996607
parameter4  0.3263760

------------------ iteration  17 ------------------
Function value  -973.447 
Convergence criteria: parameters stability= 0.00032527 
                    : function stability= 16.5746 
                    : relative distance to maximum(RDM)= 5.923463 
                 coef
parameter1 -0.1424467
parameter2  0.1250521
parameter3  0.1966761
parameter4  0.3394560

------------------ iteration  18 ------------------
Function value  -961.3928 
Convergence criteria: parameters stability= 0.00105038 
                    : function stability= 12.05426 
                    : relative distance to maximum(RDM)= 0.5934875 
                 coef
parameter1 -0.1651657
parameter2  0.1362990
parameter3  0.1897439
parameter4  0.3584212

------------------ iteration  19 ------------------
Function value  -960.1702 
Convergence criteria: parameters stability= 0.00024153 
                    : function stability= 1.22258 
                    : relative distance to maximum(RDM)= 0.00468293 
                 coef
parameter1 -0.1762450
parameter2  0.1435650
parameter3  0.1871355
parameter4  0.3661144

------------------ iteration  20 ------------------
Function value  -960.1608 
Convergence criteria: parameters stability= 2.61e-06 
                    : function stability= 0.00939257 
                    : relative distance to maximum(RDM)= 5.3e-07 
                 coef
parameter1 -0.1773901
parameter2  0.1444374
parameter3  0.1869344
parameter4  0.3668221

------------------ iteration  21 ------------------
Function value  -960.1608 
Convergence criteria: parameters stability= 0 
                    : function stability= 1.06e-06 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1 -0.1774069
parameter2  0.1444497
parameter3  0.1869323
parameter4  0.3668285

The program took 0.51 seconds 
------------------ iteration  0 ------------------
Function value  -959.2723 
Convergence criteria: parameters stability= 1.0001 
                    : function stability= 1.0001 
                    : relative distance to maximum(RDM)= 1.0001 
                 coef
parameter1  0.0000000
parameter2 -0.1874958
parameter3 -0.1673180
parameter4  0.1380242
parameter5  0.1508751
parameter6  0.1869323
parameter7  0.3668285

------------------ iteration  1 ------------------
Function value  -957.1753 
Convergence criteria: parameters stability= 6.129e-05 
                    : function stability= 2.096957 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00000062
parameter2 -0.18754771
parameter3 -0.16726570
parameter4  0.13249696
parameter5  0.15640299
parameter6  0.18678235
parameter7  0.36643190

------------------ iteration  2 ------------------
Function value  -939.833 
Convergence criteria: parameters stability= 0.00086888 
                    : function stability= 17.34234 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00005619
parameter2 -0.18764866
parameter3 -0.16715783
parameter4  0.11167008
parameter5  0.17722906
parameter6  0.18612622
parameter7  0.36546029

------------------ iteration  3 ------------------
Function value  -920.4693 
Convergence criteria: parameters stability= 0.00046287 
                    : function stability= 19.36369 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.00005138
parameter2 -0.18638636
parameter3 -0.16848311
parameter4  0.09661454
parameter5  0.19246104
parameter6  0.18589482
parameter7  0.36457997

------------------ iteration  4 ------------------
Function value  -871.5999 
Convergence criteria: parameters stability= 0.00215893 
                    : function stability= 48.86941 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1 -0.00007543
parameter2 -0.18536968
parameter3 -0.16960355
parameter4  0.06493828
parameter5  0.22641521
parameter6  0.18585693
parameter7  0.36397647

------------------ iteration  5 ------------------
Function value  -807.588 
Convergence criteria: parameters stability= 0.00298216 
                    : function stability= 64.01191 
                    : relative distance to maximum(RDM)= 1.0001 
                  coef
parameter1  0.00102682
parameter2 -0.17310219
parameter3 -0.18293716
parameter4  0.03023777
parameter5  0.26375491
parameter6  0.18741815
parameter7  0.35677548

------------------ iteration  6 ------------------
Function value  -237.3395 
Convergence criteria: parameters stability= 0.2142391 
                    : function stability= 570.2485 
                    : relative distance to maximum(RDM)= 90.6668 
                  coef
parameter1  0.04942916
parameter2  0.03542505
parameter3 -0.40107813
parameter4 -0.17659645
parameter5  0.51490386
parameter6  0.24019594
parameter7  0.24638741

------------------ iteration  7 ------------------
Function value  -122.3375 
Convergence criteria: parameters stability= 0.3104587 
                    : function stability= 115.002 
                    : relative distance to maximum(RDM)= 15.18437 
                 coef
parameter1  0.3041221
parameter2  0.2220450
parameter3 -0.7842628
parameter4 -0.2303117
parameter5  0.7456562
parameter6  0.1869164
parameter7  0.1759455

------------------ iteration  8 ------------------
Function value  -61.37525 
Convergence criteria: parameters stability= 0.0110935 
                    : function stability= 60.96221 
                    : relative distance to maximum(RDM)= 1.503595 
                 coef
parameter1  0.3888843
parameter2  0.1996796
parameter3 -0.7470719
parameter4 -0.2256203
parameter5  0.7092421
parameter6  0.2038002
parameter7  0.1957557

------------------ iteration  9 ------------------
Function value  -55.7481 
Convergence criteria: parameters stability= 0.00068913 
                    : function stability= 5.627153 
                    : relative distance to maximum(RDM)= 0.02132023 
                 coef
parameter1  0.4051420
parameter2  0.1937573
parameter3 -0.7347525
parameter4 -0.2241003
parameter5  0.6982025
parameter6  0.2096329
parameter7  0.2046874

------------------ iteration  10 ------------------
Function value  -55.67276 
Convergence criteria: parameters stability= 5.11e-06 
                    : function stability= 0.07533719 
                    : relative distance to maximum(RDM)= 5.03e-06 
                 coef
parameter1  0.4054644
parameter2  0.1932930
parameter3 -0.7334677
parameter4 -0.2239391
parameter5  0.6970453
parameter6  0.2101179
parameter7  0.2059298

------------------ iteration  11 ------------------
Function value  -55.67274 
Convergence criteria: parameters stability= 0 
                    : function stability= 1.761e-05 
                    : relative distance to maximum(RDM)= 0 
                 coef
parameter1  0.4054651
parameter2  0.1932891
parameter3 -0.7334510
parameter4 -0.2239371
parameter5  0.6970299
parameter6  0.2101202
parameter7  0.2059496

The program took 0.48 seconds 
Done fitting the method (1 secs)
---------------------------------------------------------------------------
               A            B
1   2.547309e-17 1.000000e+00
2   5.411522e-22 1.000000e+00
3   3.041641e-19 1.000000e+00
4   2.235736e-20 1.000000e+00
5   8.499348e-10 1.000000e+00
6   1.428898e-22 1.000000e+00
7   7.217099e-20 1.000000e+00
8   4.601010e-22 1.000000e+00
9   2.465788e-18 1.000000e+00
10  1.487810e-17 1.000000e+00
11  4.431033e-18 1.000000e+00
12  1.048311e-23 1.000000e+00
13  1.624114e-19 1.000000e+00
14  8.535574e-17 1.000000e+00
15  9.154080e-19 1.000000e+00
16  2.775977e-20 1.000000e+00
17  3.751780e-19 1.000000e+00
18  1.074618e-14 1.000000e+00
19  3.429499e-19 1.000000e+00
20  5.383558e-18 1.000000e+00
21  8.954243e-15 1.000000e+00
22  8.071920e-17 1.000000e+00
23  3.636239e-18 1.000000e+00
24  5.106286e-20 1.000000e+00
25  3.644339e-17 1.000000e+00
26  1.171056e-21 1.000000e+00
27  1.186961e-19 1.000000e+00
28  1.506209e-14 1.000000e+00
29  5.704580e-19 1.000000e+00
30  5.336798e-19 1.000000e+00
31  1.202214e-17 1.000000e+00
32  1.410158e-12 1.000000e+00
33  1.841029e-16 1.000000e+00
34  1.571870e-21 1.000000e+00
35  2.531196e-23 1.000000e+00
36  1.134933e-21 1.000000e+00
37  8.624019e-20 1.000000e+00
38  8.734216e-18 1.000000e+00
39  3.199024e-20 1.000000e+00
40  1.589164e-15 1.000000e+00
41  6.669018e-21 1.000000e+00
42  1.013342e-18 1.000000e+00
43  7.838956e-18 1.000000e+00
44  9.027838e-15 1.000000e+00
45  4.032961e-18 1.000000e+00
46  1.606951e-13 1.000000e+00
47  1.326813e-15 1.000000e+00
48  6.837973e-17 1.000000e+00
49  1.112480e-18 1.000000e+00
50  5.127967e-18 1.000000e+00
51  6.227700e-20 1.000000e+00
52  5.071705e-22 1.000000e+00
53  1.910355e-16 1.000000e+00
54  1.315540e-15 1.000000e+00
55  1.489717e-20 1.000000e+00
56  3.086665e-17 1.000000e+00
57  1.051878e-14 1.000000e+00
58  2.876305e-21 1.000000e+00
59  1.715890e-19 1.000000e+00
60  1.321604e-15 1.000000e+00
61  9.535076e-18 1.000000e+00
62  9.190270e-20 1.000000e+00
63  2.424449e-16 1.000000e+00
64  7.904951e-23 1.000000e+00
65  1.599877e-22 1.000000e+00
66  2.884337e-19 1.000000e+00
67  6.949903e-17 1.000000e+00
68  1.967578e-14 1.000000e+00
69  1.408407e-17 1.000000e+00
70  3.518169e-15 1.000000e+00
71  2.106024e-17 1.000000e+00
72  2.756480e-16 1.000000e+00
73  4.318563e-15 1.000000e+00
74  1.844605e-23 1.000000e+00
75  1.737188e-17 1.000000e+00
76  1.314989e-21 1.000000e+00
77  6.142480e-13 1.000000e+00
78  2.824823e-19 1.000000e+00
79  4.868013e-15 1.000000e+00
80  1.192237e-17 1.000000e+00
81  9.999999e-01 5.541482e-08
82  1.000000e+00 1.687982e-09
83  1.000000e+00 1.237469e-08
84  1.000000e+00 2.646909e-11
85  1.000000e+00 2.743526e-11
86  1.000000e+00 2.225111e-12
87  1.000000e+00 3.498192e-09
88  1.000000e+00 3.840669e-10
89  1.000000e+00 4.912742e-09
90  1.000000e+00 4.347078e-10
91  1.000000e+00 6.570052e-11
92  1.000000e+00 9.025890e-10
93  1.000000e+00 7.647597e-11
94  1.000000e+00 2.499976e-10
95  1.000000e+00 1.745678e-08
96  1.000000e+00 3.376374e-10
97  1.000000e+00 7.724646e-09
98  1.000000e+00 3.138129e-09
99  1.000000e+00 7.196847e-09
100 1.000000e+00 3.432416e-09
101 1.000000e+00 3.378189e-11
102 1.000000e+00 6.094947e-10
103 1.000000e+00 3.903087e-10
104 1.000000e+00 1.463033e-09
105 1.000000e+00 3.266175e-08
106 9.999997e-01 2.691744e-07
107 1.000000e+00 2.165185e-10
108 1.000000e+00 4.417719e-08
109 1.000000e+00 2.613364e-10
110 1.000000e+00 1.855564e-10
111 1.000000e+00 1.247697e-08
112 9.999999e-01 1.177873e-07
113 1.000000e+00 2.975804e-09
114 1.000000e+00 1.558266e-09
115 1.000000e+00 1.849239e-09
116 1.000000e+00 1.031145e-09
117 1.000000e+00 7.985077e-10
118 1.000000e+00 4.550103e-09
119 1.000000e+00 4.156113e-10
120 1.000000e+00 3.206135e-10
121 1.000000e+00 2.233346e-08
122 9.999999e-01 8.120600e-08
123 1.000000e+00 5.954043e-10
124 1.000000e+00 3.026458e-11
125 1.000000e+00 1.424766e-09
126 1.000000e+00 8.130362e-10
127 1.000000e+00 6.150022e-10
128 1.000000e+00 9.444136e-09
129 1.000000e+00 2.328948e-11
130 1.000000e+00 1.563132e-09
131 1.000000e+00 7.070481e-12
132 1.000000e+00 2.430529e-12
133 1.000000e+00 1.825761e-09
134 1.000000e+00 6.650520e-09
135 1.000000e+00 1.370102e-11
136 1.000000e+00 1.025182e-09
137 1.000000e+00 1.227042e-09
138 1.000000e+00 2.044575e-09
139 1.000000e+00 5.253969e-09
140 1.000000e+00 3.989507e-08
141 1.000000e+00 6.667896e-10
142 1.000000e+00 6.031685e-11
143 1.000000e+00 9.281411e-11
144 1.000000e+00 3.580571e-09
145 1.000000e+00 5.328298e-13
146 1.000000e+00 2.029222e-12
147 1.000000e+00 3.769147e-09
148 1.000000e+00 2.288466e-09
149 1.000000e+00 1.052566e-08
150 1.000000e+00 3.274685e-08
151 1.000000e+00 2.471731e-26
152 1.000000e+00 8.469879e-29
153 1.000000e+00 1.695606e-31
154 1.000000e+00 1.193504e-30
155 1.000000e+00 8.066763e-25
156 1.000000e+00 3.073319e-26
157 1.000000e+00 1.101320e-34
158 1.000000e+00 2.275015e-31
159 1.000000e+00 2.911820e-35
160 1.000000e+00 2.330360e-32
161 1.000000e+00 1.275205e-41
162 1.000000e+00 3.527563e-25
163 1.000000e+00 5.453885e-33
164 1.000000e+00 5.219838e-32
165 1.000000e+00 4.904097e-30
166 1.000000e+00 4.439441e-29
167 1.000000e+00 1.565170e-28
168 1.000000e+00 4.165053e-28
169 1.000000e+00 7.260723e-33
170 1.000000e+00 2.191086e-36
171 1.000000e+00 1.604882e-33
172 1.000000e+00 7.948701e-31
173 1.000000e+00 2.416387e-34
174 1.000000e+00 2.302696e-31
175 1.000000e+00 1.701659e-35
176 1.000000e+00 1.088226e-32
177 1.000000e+00 4.202723e-30
178 1.000000e+00 2.132956e-32
179 1.000000e+00 1.985948e-32
180 1.000000e+00 2.624163e-24
181 1.000000e+00 1.952051e-29
182 1.000000e+00 6.747477e-26
183 1.000000e+00 7.691041e-35
184 1.000000e+00 2.337359e-30
185 1.000000e+00 3.671425e-27
186 1.000000e+00 1.975782e-30
187 1.000000e+00 2.035569e-39
188 1.000000e+00 4.969319e-28
189 1.000000e+00 4.456554e-38
190 1.000000e+00 1.971673e-33
191 1.000000e+00 5.329902e-25
192 1.000000e+00 1.312492e-29
193 1.000000e+00 1.176425e-25
194 1.000000e+00 3.285058e-31
195 1.000000e+00 5.007537e-31
196 1.000000e+00 7.281389e-36
197 1.000000e+00 5.466923e-24
198 1.000000e+00 4.488507e-31
199 1.000000e+00 4.130770e-33
200 1.000000e+00 5.307266e-28
> 
> 
> 
> cleanEx()
> nameEx("predict.lcModel")
> ### * predict.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.lcModel
> ### Title: lcModel predictions
> ### Aliases: predict.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.019 secs)
---------------------------------------------------------------------------
> 
> predFitted <- predict(model) # same result as fitted(model)
> 
> # Cluster trajectory of cluster A
> predCluster <- predict(model, newdata = data.frame(Cluster = "A", Time = time(model)))
> 
> # Prediction for id S1 given cluster A membership
> predId <- predict(model, newdata = data.frame(Cluster = "A", Id = "S1", Time = time(model)))
> 
> # Prediction matrix for id S1 for all clusters
> predIdAll <- predict(model, newdata = data.frame(Id = "S1", Time = time(model)))
> 
> 
> 
> cleanEx()
> nameEx("predictAssignments")
> ### * predictAssignments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predictAssignments
> ### Title: Predict the cluster assignments for new trajectories
> ### Aliases: predictAssignments predictAssignments,lcModel-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(latrendData)
> ##D if (require("kml")) {
> ##D   model <- latrend(method = lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
> ##D   predictAssignments(model, newdata = data.frame(Id = 999, Y = 0, Time = 0))
> ##D }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("predictForCluster")
> ### * predictForCluster
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predictForCluster
> ### Title: lcModel prediction conditional on a cluster
> ### Aliases: predictForCluster predictForCluster,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.018 secs)
---------------------------------------------------------------------------
> 
> predictForCluster(
+   model,
+   newdata = data.frame(Time = c(0, 1)),
+   cluster = "B"
+ )
[1] 0.09202386 0.03729362
> 
> # all fitted values under cluster B
> predictForCluster(model, cluster = "B")
   [1]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
   [7] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
  [13]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
  [19] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
  [25]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
  [31]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
  [37] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
  [43]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
  [49] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
  [55]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
  [61]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
  [67] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
  [73]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
  [79] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
  [85]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
  [91]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
  [97] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [103]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [109] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [115]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [121]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [127] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [133]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [139] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [145]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [151]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [157] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [163]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [169] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [175]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [181]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [187] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [193]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [199] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [205]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [211]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [217] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [223]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [229] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [235]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [241]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [247] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [253]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [259] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [265]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [271]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [277] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [283]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [289] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [295]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [301]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [307] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [313]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [319] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [325]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [331]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [337] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [343]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [349] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [355]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [361]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [367] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [373]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [379] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [385]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [391]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [397] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [403]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [409] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [415]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [421]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [427] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [433]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [439] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [445]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [451]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [457] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [463]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [469] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [475]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [481]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [487] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [493]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [499] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [505]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [511]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [517] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [523]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [529] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [535]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [541]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [547] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [553]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [559] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [565]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [571]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [577] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [583]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [589] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [595]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [601]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [607] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [613]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [619] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [625]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [631]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [637] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [643]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [649] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [655]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [661]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [667] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [673]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [679] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [685]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [691]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [697] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [703]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [709] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [715]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [721]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [727] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [733]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [739] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [745]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [751]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [757] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [763]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [769] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [775]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [781]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [787] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [793]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [799] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [805]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [811]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [817] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [823]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [829] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [835]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [841]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [847] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [853]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [859] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [865]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [871]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [877] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [883]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [889] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [895]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [901]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [907] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [913]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [919] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [925]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [931]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [937] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [943]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [949] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [955]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [961]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [967] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
 [973]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
 [979] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
 [985]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
 [991]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
 [997] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1003]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1009] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1015]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1021]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1027] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1033]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1039] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1045]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1051]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1057] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1063]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1069] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1075]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1081]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1087] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1093]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1099] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1105]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1111]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1117] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1123]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1129] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1135]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1141]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1147] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1153]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1159] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1165]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1171]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1177] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1183]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1189] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1195]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1201]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1207] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1213]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1219] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1225]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1231]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1237] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1243]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1249] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1255]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1261]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1267] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1273]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1279] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1285]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1291]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1297] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1303]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1309] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1315]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1321]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1327] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1333]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1339] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1345]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1351]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1357] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1363]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1369] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1375]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1381]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1387] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1393]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1399] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1405]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1411]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1417] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1423]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1429] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1435]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1441]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1447] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1453]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1459] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1465]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1471]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1477] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1483]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1489] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1495]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1501]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1507] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1513]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1519] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1525]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1531]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1537] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1543]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1549] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1555]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1561]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1567] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1573]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1579] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1585]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1591]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1597] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1603]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1609] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1615]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1621]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1627] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1633]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1639] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1645]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1651]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1657] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1663]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1669] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1675]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1681]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1687] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1693]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1699] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1705]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1711]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1717] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1723]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1729] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1735]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1741]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1747] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1753]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1759] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1765]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1771]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1777] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1783]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1789] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1795]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1801]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1807] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1813]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1819] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1825]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1831]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1837] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1843]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1849] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1855]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1861]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1867] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1873]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1879] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1885]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1891]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1897] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1903]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1909] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1915]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1921]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1927] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1933]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1939] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1945]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1951]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1957] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1963]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1969] -0.24801613 -0.34779054  0.09202386  0.10921565  0.11104821  0.09712083
[1975]  0.06140180  0.01318545 -0.05804444 -0.13662404 -0.24801613 -0.34779054
[1981]  0.09202386  0.10921565  0.11104821  0.09712083  0.06140180  0.01318545
[1987] -0.05804444 -0.13662404 -0.24801613 -0.34779054  0.09202386  0.10921565
[1993]  0.11104821  0.09712083  0.06140180  0.01318545 -0.05804444 -0.13662404
[1999] -0.24801613 -0.34779054
> 
> 
> 
> cleanEx()
> nameEx("qqPlot")
> ### * qqPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qqPlot
> ### Title: Quantile-quantile plot
> ### Aliases: qqPlot qqPlot,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.022 secs)
---------------------------------------------------------------------------
> 
> if (require("ggplot2") && require("qqplotr")) {
+   qqPlot(model)
+ }
Loading required package: ggplot2
Loading required package: qqplotr

Attaching package: ‘qqplotr’

The following objects are masked from ‘package:ggplot2’:

    StatQqLine, stat_qq_line

> 
> 
> 
> cleanEx()

detaching ‘package:qqplotr’, ‘package:ggplot2’

> nameEx("responseVariable")
> ### * responseVariable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: responseVariable
> ### Title: Extract the response variable
> ### Aliases: responseVariable responseVariable,lcMethod-method
> ###   responseVariable,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time)
> responseVariable(method) # "Y"
[1] "Y"
> data(latrendData)
> method <- lcMethodRandom("Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.009 secs)
---------------------------------------------------------------------------
> responseVariable(model) # "Y"
[1] "Y"
> 
> 
> 
> cleanEx()
> nameEx("strip")
> ### * strip
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: strip
> ### Title: Reduce the lcModel memory footprint for serialization
> ### Aliases: strip strip,lcMethod-method strip,ANY-method
> ###   strip,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.023 secs)
---------------------------------------------------------------------------
> newModel <- strip(model)
> 
> 
> 
> cleanEx()
> nameEx("subset.lcModels")
> ### * subset.lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subset.lcModels
> ### Title: Subsetting a lcModels list based on method arguments
> ### Aliases: subset.lcModels
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> 
> model1 <- latrend(method, latrendData, nClusters = 1)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      1
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.01 secs)
---------------------------------------------------------------------------
> model2 <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.027 secs)
---------------------------------------------------------------------------
> model3 <- latrend(method, latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.021 secs)
---------------------------------------------------------------------------
> 
> rngMethod <- lcMethodRandom("Y", id = "Id", time = "Time")
> rngModel <- latrend(rngMethod, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.009 secs)
---------------------------------------------------------------------------
> 
> models <- lcModels(model1, model2, model3, rngModel)
> 
> subset(models, nClusters > 1 & .method == 'lmkm')
List of 2 lcModels with
  .name .method nClusters
1     1    lmkm         2
2     2    lmkm         3
> 
> 
> 
> cleanEx()
> nameEx("test")
> ### * test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test
> ### Title: Test a condition
> ### Aliases: test
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Not run: 
> ##D test('gt', 2 > 1)
> ##D test('eq', 1 + 1, 2)
> ##D test('lt', 2 < 1, onFail = "warn")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("test.latrend")
> ### * test.latrend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test.latrend
> ### Title: Test the implementation of an lcMethod and associated lcModel
> ###   subclasses
> ### Aliases: test.latrend
> 
> ### ** Examples
> 
> test.latrend("lcMethodRandom", tests = c("method", "basic"), clusterRecovery = "skip")
=== Testing lcMethod class "lcMethodRandom" ===
== Running tests from "method" ==
Tests succeeded.
== Running tests from "basic" ==
Tests succeeded.

~~ Successfully passed all tests! ~~
[1] TRUE
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("timeVariable")
> ### * timeVariable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timeVariable
> ### Title: Extract the time variable
> ### Aliases: timeVariable timeVariable,lcMethod-method
> ###   timeVariable,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> timeVariable(method) # "Time"
[1] "Time"
> data(latrendData)
> method <- lcMethodRandom("Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: random
---------------------------------------------------------------------------
Method arguments:
 alpha:          10
 center:         meanNA
 time:           "Time"
 id:             "Id"
 nClusters:      2
 name:           "random"
 response:       "Y"
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
Fitting the method...
Done fitting the method (0.009 secs)
---------------------------------------------------------------------------
> timeVariable(model) # "Time"
[1] "Time"
> 
> 
> 
> cleanEx()
> nameEx("trajectoryAssignments")
> ### * trajectoryAssignments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trajectoryAssignments
> ### Title: Get the cluster membership of each trajectory
> ### Aliases: trajectoryAssignments trajectoryAssignments,matrix-method
> ###   trajectoryAssignments,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.024 secs)
---------------------------------------------------------------------------
> trajectoryAssignments(model)
  [1] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
 [38] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
 [75] A A A A A A B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
[112] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
[149] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
[186] B B B B B B B B B B B B B B B
Levels: A B
> 
> # assign trajectories at random using weighted sampling
> trajectoryAssignments(model, strategy = which.weight)
  [1] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
 [38] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
 [75] A A A A A A B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
[112] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
[149] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
[186] B B B B B B B B B B B B B B B
Levels: A B
> 
> 
> 
> cleanEx()
> nameEx("update.lcMethod")
> ### * update.lcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update.lcMethod
> ### Title: Update a method specification
> ### Aliases: update.lcMethod
> 
> ### ** Examples
> 
> method <- lcMethodLMKM(Y ~ 1, nClusters = 2)
> method2 <- update(method, formula = ~ . + Time)
> 
> method3 <- update(method2, nClusters = 3)
> 
> k <- 2
> method4 <- update(method, nClusters = k) # nClusters: k
> 
> method5 <- update(method, nClusters = k, .eval = TRUE) # nClusters: 2
> 
> 
> 
> 
> cleanEx()
> nameEx("update.lcModel")
> ### * update.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update.lcModel
> ### Title: Update a lcModel
> ### Aliases: update.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time")
> model2 <- latrend(method, latrendData, nClusters = 2)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      2
 center:         meanNA
 standardize:    scale
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.021 secs)
---------------------------------------------------------------------------
> 
> # fit for a different number of clusters
> model3 <- update(model2, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using: lm-kmeans
---------------------------------------------------------------------------
Method arguments:
 time:           "Time"
 id:             "Id"
 nClusters:      3
 center:         function (x, ...) {    mean(x, ..., na.r
 standardize:    function (x, center = TRUE, scale = TRUE
 method:         "qr"
 model:          TRUE
 y:              FALSE
 qr:             TRUE
 singular.ok:    TRUE
 contrasts:      NULL
 iter.max:       10
 nstart:         1
 algorithm:      "Hartigan-Wong", "Lloyd", "Forgy", "MacQ
 formula:        Y ~ Time
---------------------------------------------------------------------------
Checking and transforming the training data format.
Preparing the training data for fitting...
 Representation step...
Fitting the method...
 Cluster step...
Done fitting the method (0.023 secs)
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("which.weight")
> ### * which.weight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: which.weight
> ### Title: Sample an index of a vector weighted by the elements
> ### Aliases: which.weight
> 
> ### ** Examples
> 
> x = c(.01, .69, .3)
> which.weight(x) #1, 2, or 3
[1] 2
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  55.959 9.925 68.559 0.006 0.012 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
