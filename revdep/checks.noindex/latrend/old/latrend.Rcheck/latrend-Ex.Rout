
R version 4.0.5 (2021-03-31) -- "Shake and Throw"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "latrend"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('latrend')
Warning in fun(libname, pkgname) : couldn't connect to display ""
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("as.list.lcMethod")
> ### * as.list.lcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.list.lcMethod
> ### Title: Extract the method arguments as a list
> ### Aliases: as.list.lcMethod
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodKML("Y", id = "Id", time = "Time")
> as.list(method)
$nbRedrawing
[1] 20

$maxIt
[1] 200

$imputationMethod
[1] "copyMean"

$distanceName
[1] "euclidean"

$power
[1] 2

$distance
function () 
{
}
<environment: 0x7fa35d63aa78>

$centerMethod
function (x) 
{
    mean(x, na.rm = TRUE)
}
<bytecode: 0x7fa35b974d98>
<environment: namespace:longitudinalData>

$startingCond
[1] "nearlyAll"

$nbCriterion
[1] 1000

$scale
[1] TRUE

$response
[1] "Y"

$time
[1] "Time"

$id
[1] "Id"

$nClusters
[1] 2

> 
> as.list(method, args = c('id', 'time'))
$id
[1] "Id"

$time
[1] "Time"

> 
> # select arguments used by kml()
> as.list(method, args = kml::kml)
$nbRedrawing
[1] 20

> 
> # select arguments used by either kml() or parALGO()
> as.list(method, args = c(kml::kml, kml::parALGO))
$nbRedrawing
[1] 20

$maxIt
[1] 200

$imputationMethod
[1] "copyMean"

$distanceName
[1] "euclidean"

$power
[1] 2

$distance
function () 
{
}
<environment: 0x7fa35d63aa78>

$centerMethod
function (x) 
{
    mean(x, na.rm = TRUE)
}
<bytecode: 0x7fa35b974d98>
<environment: namespace:longitudinalData>

$startingCond
[1] "nearlyAll"

$nbCriterion
[1] 1000

$scale
[1] TRUE

> 
> 
> 
> cleanEx()
> nameEx("cash")
> ### * cash
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: $,lcMethod-method
> ### Title: Retrieve and evaluate a lcMethod argument by name
> ### Aliases: $,lcMethod-method
> 
> ### ** Examples
> 
> m <- lcMethodKML(nClusters = 3)
> m$nClusters # 3
[1] 3
> 
> 
> 
> cleanEx()
> nameEx("clusterNames-set")
> ### * clusterNames-set
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterNames<-
> ### Title: Update the cluster names
> ### Aliases: clusterNames<-
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> clusterNames(model) <- c("Group 1", "Group 2")
> 
> 
> 
> cleanEx()
> nameEx("clusterNames")
> ### * clusterNames
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterNames
> ### Title: Get the cluster names
> ### Aliases: clusterNames
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> clusterNames(model) # A, B
[1] "A" "B"
> 
> 
> 
> cleanEx()
> nameEx("clusterProportions")
> ### * clusterProportions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterProportions
> ### Title: Proportional size of each cluster
> ### Aliases: clusterProportions clusterProportions,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> clusterProportions(model)
        A         B 
0.5496504 0.4503496 
> 
> 
> 
> cleanEx()
> nameEx("clusterSizes")
> ### * clusterSizes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterSizes
> ### Title: Number of strata per cluster
> ### Aliases: clusterSizes
> 
> ### ** Examples
> 
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> clusterSizes(model)
  A   B 
110  90 
> 
> 
> 
> cleanEx()
> nameEx("clusterTrajectories")
> ### * clusterTrajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: clusterTrajectories
> ### Title: Extract the cluster trajectories
> ### Aliases: clusterTrajectories clusterTrajectories,lcModel-method
> 
> ### ** Examples
> 
> model <- latrend(method = lcMethodLcmmGMM(fixed = Y ~ Time, mixture = fixed),
+   id = "Id", time = "Time", data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        fixed
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.28 seconds 
---------------------------------------------------------------------------
> clusterTrajectories(model)
    Cluster      Time            Y
 1:       A 0.0000000  0.112810460
 2:       A 0.2222222  0.082933574
 3:       A 0.4444444  0.053056688
 4:       A 0.6666667  0.023179803
 5:       A 0.8888889 -0.006697083
 6:       A 1.1111111 -0.036573969
 7:       A 1.3333333 -0.066450855
 8:       A 1.5555556 -0.096327740
 9:       A 1.7777778 -0.126204626
10:       A 2.0000000 -0.156081512
11:       B 0.0000000 -0.729474282
12:       B 0.2222222 -0.574460323
13:       B 0.4444444 -0.419446364
14:       B 0.6666667 -0.264432405
15:       B 0.8888889 -0.109418446
16:       B 1.1111111  0.045595513
17:       B 1.3333333  0.200609472
18:       B 1.5555556  0.355623431
19:       B 1.7777778  0.510637390
20:       B 2.0000000  0.665651349
> 
> clusterTrajectories(model, at = c(0, .5, 1))
   Cluster Time           Y
1:       A  0.0  0.11281046
2:       A  0.5  0.04558747
3:       A  1.0 -0.02163553
4:       B  0.0 -0.72947428
5:       B  0.5 -0.38069287
6:       B  1.0 -0.03191147
> 
> 
> 
> cleanEx()
> nameEx("confusionMatrix")
> ### * confusionMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confusionMatrix
> ### Title: Compute the posterior confusion matrix
> ### Aliases: confusionMatrix
> 
> ### ** Examples
> 
> data(latrendData)
> model = latrend(lcMethodLcmmGMM(
+   fixed = Y ~ Time, mixture = ~ Time, random = ~ 1,
+   id = "Id", time = "Time"),
+   data=latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.28 seconds 
---------------------------------------------------------------------------
> confusionMatrix(model)
             A            B
A 9.998034e-01 0.0001965752
B 3.070110e-09 0.9999999969
> 
> 
> 
> cleanEx()
> nameEx("createTestDataFold")
> ### * createTestDataFold
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createTestDataFold
> ### Title: Create the test fold data for validation
> ### Aliases: createTestDataFold
> 
> ### ** Examples
> 
> data(latrendData)
> trainDataList <- createTrainDataFolds(latrendData, id = "Id", folds = 10)
> testData1 <- createTestDataFold(latrendData, trainDataList[[1]], id = "Id")
> 
> 
> 
> cleanEx()
> nameEx("createTestDataFolds")
> ### * createTestDataFolds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createTestDataFolds
> ### Title: Create all k test folds from the training data
> ### Aliases: createTestDataFolds
> 
> ### ** Examples
> 
> data(latrendData)
> trainDataList <- createTrainDataFolds(latrendData, folds = 10, id = "Id")
> testDataList <- createTestDataFolds(latrendData, trainDataList)
> 
> 
> 
> cleanEx()
> nameEx("createTrainDataFolds")
> ### * createTrainDataFolds
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createTrainDataFolds
> ### Title: Create the training data for each of the k models in k-fold
> ###   cross validation evaluation
> ### Aliases: createTrainDataFolds
> 
> ### ** Examples
> 
> data(latrendData)
> trainFolds <- createTrainDataFolds(latrendData, folds = 10, id = "Id")
> 
> trainFolds <- createTrainDataFolds(latrendData, folds = 10, id = "Id", seed = 1)
> 
> 
> 
> cleanEx()
> nameEx("externalMetric")
> ### * externalMetric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: externalMetric,lcModel,lcModel-method
> ### Title: Compute external model metric(s)
> ### Aliases: externalMetric,lcModel,lcModel-method externalMetric
> ###   externalMetric,lcModels,missing-method
> ###   externalMetric,lcModels,character-method
> ###   externalMetric,lcModels,lcModel-method
> ###   externalMetric,lcModels,lcModels-method
> ###   externalMetric,list,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> model1 <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> model2 <- latrend(lcMethodLcmmGMM(fixed = Y ~ Time, mixture = ~ Time,
+    id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.27 seconds 
---------------------------------------------------------------------------
> ari <- externalMetric(model1, model2, 'adjustedRand')
> 
> 
> 
> cleanEx()
> nameEx("formula.lcMethod")
> ### * formula.lcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula.lcMethod
> ### Title: Extract formula
> ### Aliases: formula.lcMethod
> 
> ### ** Examples
> 
> m <- lcMethodMixtoolsGMM(formula = Y ~ Time + (1 | Id))
> formula(m) # Y ~ Time + (1 | Id)
Y ~ Time + (1 | Id)
<environment: 0x7fa3629e7750>
> 
> 
> 
> cleanEx()
> nameEx("generateLongData")
> ### * generateLongData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generateLongData
> ### Title: Generate longitudinal test data
> ### Aliases: generateLongData
> 
> ### ** Examples
> 
> longdata <- generateLongData(sizes = c(40, 70), id = "Id",
+                             cluster = ~poly(Time, 2, raw = TRUE),
+                             clusterCoefs = cbind(c(1, 2, 5), c(-3, 4, .2)))
> plotTrajectories(longdata, response = "Value", id = "Id", time = "Time")
> 
> 
> 
> cleanEx()
> nameEx("getLcMethod")
> ### * getLcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: getLcMethod
> ### Title: Get the method specification of a lcModel
> ### Aliases: getLcMethod
> 
> ### ** Examples
> 
> model = latrend(method=lcMethodKML("Y", id = "Id", time = "Time"), data=latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> getLcMethod(model)
lcMethodKML as "longitudinal k-means (KML)"
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   function (x) {    mean(x, na.rm = TRUE)}
 distance:       function () {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
> 
> 
> 
> cleanEx()
> nameEx("idVariable")
> ### * idVariable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: idVariable
> ### Title: Extract the trajectory identifier variable
> ### Aliases: idVariable idVariable,lcMethod-method
> ###   idVariable,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodKML(id = "Traj")
> idVariable(method) # "Traj"
[1] "Traj"
> 
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> idVariable(model) # "Id"
[1] "Id"
> 
> 
> 
> 
> cleanEx()
> nameEx("ids")
> ### * ids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ids
> ### Title: Get the unique ids included in this model
> ### Aliases: ids
> 
> ### ** Examples
> 
> model = latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> ids(model) # S1, S2, ..., S500
  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18
 [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36
 [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54
 [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72
 [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90
 [91]  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108
[109] 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126
[127] 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144
[145] 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162
[163] 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180
[181] 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198
[199] 199 200
> 
> 
> 
> cleanEx()
> nameEx("indexy")
> ### * indexy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: [[,lcMethod-method
> ### Title: Retrieve and evaluate a lcMethod argument by name
> ### Aliases: [[,lcMethod-method
> 
> ### ** Examples
> 
> m = lcMethodKML(nClusters = 5)
> m[["nClusters"]] # 5
[1] 5
> 
> k = 2
> m = lcMethodKML(nClusters = k)
> m[["nClusters", eval=FALSE]] # k
k
> 
> 
> 
> cleanEx()
> nameEx("latrend")
> ### * latrend
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrend
> ### Title: Cluster longitudinal data
> ### Aliases: latrend
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> 
> method <- lcMethodKML("Y", id = "Id", time = "Time")
> model <- latrend(method, data = latrendData, nClusters = 3)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> 
> model <- latrend(method, data = latrendData, nClusters = 3, seed = 1)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 seed:           1
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
Setting seed 1.
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("latrendBatch")
> ### * latrendBatch
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendBatch
> ### Title: Cluster longitudinal data for a list of model specifications
> ### Aliases: latrendBatch
> 
> ### ** Examples
> 
> data(latrendData)
> methods <- lcMethods(lcMethodKML("Y", id = "Id", time = "Time"), nClusters = 1:3)
> models <- latrendBatch(methods, data = latrendData)
---------------------------------------------------------------------------
- Batch estimation (N=3) for longitudinal clustering
---------------------------------------------------------------------------
Calling latrend for each method...
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
 time:           "Time"
 id:             "Id"
 nClusters:      1
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
 time:           "Time"
 id:             "Id"
 nClusters:      2
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
 time:           "Time"
 id:             "Id"
 nClusters:      3
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
Done fitting 3 models.
> 
> models <- latrendBatch(lcMethods(lcMethodKML("Y", id = "Id", time = "Time"), nClusters = 1:2),
+    data = .(subset(latrendData, Time > .5),
+             subset(latrendData, Time < .5))) # different data per method
---------------------------------------------------------------------------
- Batch estimation (N=2) for longitudinal clustering
---------------------------------------------------------------------------
Calling latrend for each method...
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
 time:           "Time"
 id:             "Id"
 nClusters:      1
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
 time:           "Time"
 id:             "Id"
 nClusters:      2
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
 time:           "Time"
 id:             "Id"
 nClusters:      1
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nbRedrawing:    20
 maxIt:          200
 imputationMethod:"copyMean"
 distanceName:   "euclidean"
 power:          2
 distance:       function() {}
 centerMethod:   meanNA
 startingCond:   "nearlyAll"
 nbCriterion:    1000
 scale:          TRUE
 response:       "Y"
 time:           "Time"
 id:             "Id"
 nClusters:      2
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
Done fitting 2 models.
> 
> 
> 
> 
> cleanEx()
> nameEx("latrendBoot")
> ### * latrendBoot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendBoot
> ### Title: Cluster longitudinal data using bootstrapping
> ### Aliases: latrendBoot
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodKML("Y", id = "Id", time = "Time")
> model <- latrendBoot(method, latrendData, samples = 10)
---------------------------------------------------------------------------
- Longitudinal cluster estimation using 10 bootstrap samples
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Batch estimation (N=10) for longitudinal clustering
---------------------------------------------------------------------------
Calling latrend for each method...
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
Done fitting 10 models.
> 
> 
> 
> cleanEx()
> nameEx("latrendCV")
> ### * latrendCV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendCV
> ### Title: Cluster longitudinal data over k folds
> ### Aliases: latrendCV
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodKML("Y", id = "Id", time = "Time")
> model <- latrendCV(method, latrendData, folds = 5)
---------------------------------------------------------------------------
- Longitudinal clustering with 5-fold cross validation
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Batch estimation (N=1) for longitudinal clustering
---------------------------------------------------------------------------
Calling latrend for each method...
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
Done fitting 1 models.
> 
> model <- latrendCV(method, subset(latrendData, Time < .5), folds = 5, seed = 1)
---------------------------------------------------------------------------
- Longitudinal clustering with 5-fold cross validation
---------------------------------------------------------------------------
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Batch estimation (N=1) for longitudinal clustering
---------------------------------------------------------------------------
Calling latrend for each method...
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
Done fitting 1 models.
> 
> 
> 
> cleanEx()
> nameEx("latrendRep")
> ### * latrendRep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: latrendRep
> ### Title: Cluster longitudinal data repeatedly
> ### Aliases: latrendRep
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodKML("Y", id = "Id", time = "Time")
> models <- latrendRep(method, data = latrendData, .rep = 5) # 5 repeated runs
---------------------------------------------------------------------------
- Repeated (5) longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------

Preparing......
Preparing......done
Fitting model 1/5 for seed 1140350788...
Setting seed 1140350788.
 ~ Fast KmL ~
********************S
Fitting model 2/5 for seed 312928385...
Setting seed 312928385.
 ~ Fast KmL ~
********************S
Fitting model 3/5 for seed 866248189...
Setting seed 866248189.
 ~ Fast KmL ~
********************S
Fitting model 4/5 for seed 1909893419...
Setting seed 1909893419.
 ~ Fast KmL ~
********************S
Fitting model 5/5 for seed 554504146...
Setting seed 554504146.
 ~ Fast KmL ~
********************S
> 
> models <- latrendRep(method, data = latrendData, .seed = 1, .rep = 3)
---------------------------------------------------------------------------
- Repeated (3) longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Generating method seeds for seed = 1.
Preparing......
Preparing......done
Fitting model 1/3 for seed 1140350788...
Setting seed 1140350788.
 ~ Fast KmL ~
********************S
Fitting model 2/3 for seed 312928385...
Setting seed 312928385.
 ~ Fast KmL ~
********************S
Fitting model 3/3 for seed 866248189...
Setting seed 866248189.
 ~ Fast KmL ~
********************S
> 
> 
> 
> cleanEx()
> nameEx("lcMethod-class")
> ### * lcMethod-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethod-class
> ### Title: lcMethod class
> ### Aliases: lcMethod-class compose compose,lcMethod-method fit
> ###   fit,lcMethod-method getLabel getLabel,lcMethod-method getName
> ###   getName,lcMethod-method getShortName getShortName,lcMethod-method
> ###   length,lcMethod-method names,lcMethod-method preFit
> ###   preFit,lcMethod-method prepareData prepareData,lcMethod-method
> ###   postFit postFit,lcMethod-method validate validate,lcMethod-method
> 
> ### ** Examples
> 
> getName(lcMethodKML("Y")) # "longitudinal k-means"
[1] "longitudinal k-means (KML)"
> getShortName(lcMethodKML("Y")) # "KML"
[1] "kml"
> m = lcMethodKML("Y")
> names(m)
 [1] "nbRedrawing"      "maxIt"            "imputationMethod" "distanceName"    
 [5] "power"            "distance"         "centerMethod"     "startingCond"    
 [9] "nbCriterion"      "scale"            "response"         "time"            
[13] "id"               "nClusters"       
> 
> 
> 
> cleanEx()
> nameEx("lcMethod.call")
> ### * lcMethod.call
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethod.call
> ### Title: Create a lcMethod object from a call
> ### Aliases: lcMethod.call
> 
> ### ** Examples
> 
> data(latrendData)
> lcMethodKML2 <- function(response = "Y", id = "Id", time = "Time", nClusters = 2, ...) {
+   lcMethod.call("lcMethodKML", call = stackoverflow::match.call.defaults(),
+     defaults = c(kml::kml, kml::parALGO),
+     excludeArgs = c("object", "nbClusters", "parAlgo", "toPlot", "saveFreq"))
+ }
> method <- lcMethodKML2(nClusters = 3)
> latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 time:           "Time"
 id:             "Id"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
Longitudinal cluster model using longitudinal k-means (KML)
 nClusters:      3
 time:           "Time"
 id:             "Id"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   function (x) {    mean(x, na.rm = TRUE)}
 distance:       function () {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20

Cluster sizes (K=3):
          A           B           C 
105 (52.5%)  52 (26.2%)  43 (21.3%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-4.32707 -0.61431 -0.01003  0.00000  0.64212  5.19705 

> 
> 
> 
> cleanEx()
> nameEx("lcMethodAkmedoids")
> ### * lcMethodAkmedoids
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodAkmedoids
> ### Title: Specify AKMedoids method
> ### Aliases: lcMethodAkmedoids
> 
> ### ** Examples
> 
> library(akmedoids)
> data(latrendData)
> method <- lcMethodAkmedoids(response = "Y", time = "Time", id = "Id", nClusters = 3)
> model <- latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "anchored k-medoids"
---------------------------------------------------------------------------
Method arguments:
 clusterCenter:  median
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 quality_plot:   FALSE
 crit:           "Calinski_Harabasz"
 method:         "linear"
---------------------------------------------------------------------------
Fitting model
[1] "Processing...."
[1] ".............."
[1] "solution of k = 3 determined!"
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:akmedoids’

> nameEx("lcMethodCrimCV")
> ### * lcMethodCrimCV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodCrimCV
> ### Title: Specify a zero-inflated repeated-measures GBTM method
> ### Aliases: lcMethodCrimCV
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lcMethodCustom")
> ### * lcMethodCustom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodCustom
> ### Title: Specify a custom method based on a model function
> ### Aliases: lcMethodCustom
> 
> ### ** Examples
> 
> data(latrendData)
> # Stratification based on the mean response level
> clusfun <- function(data, response, id, time, ...) {
+    clusters <- data.table::as.data.table(data)[, mean(Y) > 0, by = Id]$V1
+    lcModelCustom(data = data,
+      trajectoryAssignments = factor(clusters, levels = c(FALSE, TRUE), labels = c("Low", "High")),
+      response = response,
+      time = time,
+      id = id)
+ }
> method <- lcMethodCustom(response = "Y", fun = clusfun, id = "Id", time = "Time")
> model <- latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "custom"
---------------------------------------------------------------------------
Method arguments:
 name:           "custom"
 id:             "Id"
 time:           "Time"
 center:         meanNA
 fun:            clusfun
 response:       "Y"
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("lcMethodDtwclust")
> ### * lcMethodDtwclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodDtwclust
> ### Title: Specify time series clustering via dtwclust
> ### Aliases: lcMethodDtwclust
> 
> ### ** Examples
> 
> library(dtwclust)
Loading required package: proxy

Attaching package: ‘proxy’

The following objects are masked from ‘package:stats’:

    as.dist, dist

The following object is masked from ‘package:base’:

    as.matrix

Loading required package: dtw
Loaded dtw v1.22-3. See ?dtw for help, citation("dtw") for use in publication.

dtwclust:
Setting random number generator to L'Ecuyer-CMRG (see RNGkind()).
To read the included vignettes type: browseVignettes("dtwclust").
See news(package = "dtwclust") after package updates.
> data(latrendData)
> method <- lcMethodDtwclust("Y", id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "time series clustering with dtw_basic-dissimilarity"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 error.check:    TRUE
 seed:           NULL
 args:           tsclust_args()
 control:        do.call(paste0(type, "_control"), list()
 centroid:       ifelse(type == "fuzzy", "fcm", "pam")
 distance:       "dtw_basic"
 preproc:        NULL
 type:           "partitional"
---------------------------------------------------------------------------
Fitting model


	Precomputing distance matrix...

Iteration 1: Changes / Distsum = 200 / 423.6364
Iteration 2: Changes / Distsum =  8 / 404.464
Iteration 3: Changes / Distsum =  0 / 404.464

	Elapsed time is 0.129 seconds.

---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:dtwclust’, ‘package:dtw’, ‘package:proxy’

> nameEx("lcMethodFlexmix")
> ### * lcMethodFlexmix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodFlexmix
> ### Title: Method interface to flexmix()
> ### Aliases: lcMethodFlexmix
> 
> ### ** Examples
> 
> library(flexmix)
Loading required package: lattice
> data(latrendData)
> method <- lcMethodFlexmix(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "flexmix"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 formula.mb:     ~1
 formula:        Y ~ Time
 weights:        NULL
 control:        NULL
 model:          NULL
 cluster:        NULL
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:flexmix’, ‘package:lattice’

> nameEx("lcMethodFlexmixGBTM")
> ### * lcMethodFlexmixGBTM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodFlexmixGBTM
> ### Title: Group-based trajectory modeling using flexmix
> ### Aliases: lcMethodFlexmixGBTM
> 
> ### ** Examples
> 
> library(flexmix)
Loading required package: lattice
> data(latrendData)
> method <- lcMethodFlexmixGBTM(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "group-based trajectory model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 formula.mb:     ~1
 offset:         NULL
 family:         c("gaussian", "binomial", "poisson", "Ga
 formula:        Y ~ Time
 weights:        NULL
 control:        NULL
 concomitant:    NULL
 model:          NULL
 cluster:        NULL
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:flexmix’, ‘package:lattice’

> nameEx("lcMethodFunFEM")
> ### * lcMethodFunFEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodFunFEM
> ### Title: Specify a FunFEM method
> ### Aliases: lcMethodFunFEM
> 
> ### ** Examples
> 
> library(funFEM)
Loading required package: MASS
Loading required package: fda
Loading required package: splines
Loading required package: Matrix
Loading required package: fds
Loading required package: rainbow
Loading required package: pcaPP
Loading required package: RCurl

Attaching package: ‘fda’

The following object is masked from ‘package:graphics’:

    matplot

Loading required package: elasticnet
Loading required package: lars
Loaded lars 1.2

> library(fda)
> data(latrendData)
> method <- lcMethodFunFEM("Y", id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "functional subspace clustering with FunFEM"
---------------------------------------------------------------------------
Method arguments:
 basis:          function(time) fda::create.bspline.basis
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 lambda:         0
 eps:            1e-06
 maxit:          50
 Tinit:          c()
 init:           "hclust"
 crit:           "bic"
 model:          "AkjBk"
---------------------------------------------------------------------------
Fitting model
The "ward" method has been renamed to "ward.D"; note new "ward.D2"
---------------------------------------------------------------------------
> 
> method <- lcMethodFunFEM("Y",
+    basis = function(time) {
+       create.bspline.basis(time,
+         nbasis = 10, norder = 4)
+ })
> 
> 
> 
> cleanEx()

detaching ‘package:funFEM’, ‘package:elasticnet’, ‘package:lars’,
  ‘package:fda’, ‘package:fds’, ‘package:RCurl’, ‘package:rainbow’,
  ‘package:pcaPP’, ‘package:Matrix’, ‘package:splines’, ‘package:MASS’

> nameEx("lcMethodGCKM")
> ### * lcMethodGCKM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodGCKM
> ### Title: Two-step clustering through linear mixed modeling and k-means
> ### Aliases: lcMethodGCKM
> 
> ### ** Examples
> 
> library(lme4)
Loading required package: Matrix
> data(latrendData)
> method <- lcMethodGCKM(Y ~ (Time | Id), id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "two-step using LME and k-means"
---------------------------------------------------------------------------
Method arguments:
 center:         meanNA
 nClusters:      3
 id:             "Id"
 time:           "Time"
 formula:        Y ~ (Time | Id)
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 nstart:         1
 iter.max:       10
 devFunOnly:     FALSE
 contrasts:      NULL
 start:          NULL
 control:        lmerControl()
 REML:           TRUE
---------------------------------------------------------------------------
Fitting model
Representation step...
Cluster step...
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:lme4’, ‘package:Matrix’

> nameEx("lcMethodKML")
> ### * lcMethodKML
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodKML
> ### Title: Specify a longitudinal k-means (KML) method
> ### Aliases: lcMethodKML
> 
> ### ** Examples
> 
> library(kml)
Loading required package: clv
Loading required package: cluster
Loading required package: class
Loading required package: longitudinalData
Loading required package: rgl
Loading required package: misc3d
> data(latrendData)
> method <- lcMethodKML("Y", id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:kml’, ‘package:longitudinalData’, ‘package:misc3d’,
  ‘package:rgl’, ‘package:clv’, ‘package:class’, ‘package:cluster’

> nameEx("lcMethodLMKM")
> ### * lcMethodLMKM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodLMKM
> ### Title: Two-step clustering through linear regression modeling and
> ###   k-means
> ### Aliases: lcMethodLMKM
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLMKM(Y ~ Time, id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "glm-kmeans"
---------------------------------------------------------------------------
Method arguments:
 standardize:    scale
 nClusters:      3
 id:             "Id"
 time:           "Time"
 formula:        Y ~ Time
 algorithm:      c("Hartigan-Wong", "Lloyd", "Forgy", "Ma
 nstart:         1
 iter.max:       10
 contrasts:      NULL
 singular.ok:    TRUE
 qr:             TRUE
 y:              FALSE
 model:          TRUE
 method:         "qr"
---------------------------------------------------------------------------
Representation step...
Fitting model
Cluster step...
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()
> nameEx("lcMethodLcmmGBTM")
> ### * lcMethodLcmmGBTM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodLcmmGBTM
> ### Title: Specify GBTM method
> ### Aliases: lcMethodLcmmGBTM
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLcmmGBTM(fixed = Y ~ Time, mixture = ~ 1,
+    id = "Id", time = "Time", nClusters = 3)
> gbtm <- latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "group-based trajectory modeling using lcmm"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 mixture:        ~1
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 subset:         NULL
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.28 seconds 
---------------------------------------------------------------------------
> summary(gbtm)
Longitudinal cluster model using group-based trajectory modeling using lcmm
 nClusters:      3
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 mixture:        ~1
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 subset:         NULL
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE

Cluster sizes (K=3):
          A           B           C 
  13 (6.2%) 160 (78.3%)  27 (15.4%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
-4.2435 -0.5433  0.1265  0.0000  0.6868  2.5551 

> 
> method <- lcMethodLcmmGBTM(fixed = Y ~ Time, mixture = ~ Time,
+     id = "Id", time = "Time", nClusters = 3)
> 
> 
> 
> cleanEx()
> nameEx("lcMethodLcmmGMM")
> ### * lcMethodLcmmGMM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodLcmmGMM
> ### Title: Specify GMM method using lcmm
> ### Aliases: lcMethodLcmmGMM
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodLcmmGMM(fixed = Y ~ Time,
+    mixture = ~ Time, random = ~ 1,
+    id = "Id", time = "Time", , nClusters = 3)
> gmm <- latrend(method, data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.62 seconds 
---------------------------------------------------------------------------
> summary(gmm)
Longitudinal cluster model using growth mixture model
 nClusters:      3
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE

Cluster sizes (K=3):
         A          B          C 
32 (15.9%) 78 (39.1%)   90 (45%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-3.44863 -0.61421  0.06616  0.00000  0.67860  3.26730 

> 
> method <- lcMethodLcmmGMM(fixed = Y ~ Time,
+     mixture = ~ Time, random = ~ Time,
+     id = "Id", time = "Time", nClusters = 3)
> 
> 
> 
> cleanEx()
> nameEx("lcMethodLongclust")
> ### * lcMethodLongclust
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodLongclust
> ### Title: Specify Longclust method
> ### Aliases: lcMethodLongclust
> 
> ### ** Examples
> 
> library(longclust)
> data(latrendData)
> method <- lcMethodLongclust("Y", id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longclust"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 gaussian:       FALSE
 equalDF:        FALSE
 criteria:       "BIC"
 initWithKMeans: FALSE
 modelSubset:    NULL
 linearMeans:    FALSE
 class:          NULL
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:longclust’

> nameEx("lcMethodMclustLLPA")
> ### * lcMethodMclustLLPA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMclustLLPA
> ### Title: Longitudinal latent profile analysis
> ### Aliases: lcMethodMclustLLPA
> 
> ### ** Examples
> 
> library(mclust)
Package 'mclust' version 5.4.7
Type 'citation("mclust")' for citing this R package in publications.
> data(latrendData)
> method <- lcMethodMclustLLPA("Y", id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal latent profile analysis"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 x:              NULL
 warn:           mclust.options("warn")
 initialization: NULL
 control:        emControl()
 prior:          NULL
 modelNames:     NULL
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:mclust’

> nameEx("lcMethodMixAK_GLMM")
> ### * lcMethodMixAK_GLMM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixAK_GLMM
> ### Title: Specify a GLMM iwht a normal mixture in the random effects
> ### Aliases: lcMethodMixAK_GLMM
> 
> ### ** Examples
> 
> data(latrendData)
> # this example only runs when the mixAK package is installed
> try({
+  method <- lcMethodMixAK_GLMM(fixed = Y ~ 1, random = ~ Time,
+   id = "Id", time = "Time", nClusters = 3)
+  model <- latrend(method, latrendData)
+  summary(model)
+ })
Error in loadNamespace(name) : there is no package called ‘mixAK’
> 
> 
> 
> cleanEx()
> nameEx("lcMethodMixTVEM")
> ### * lcMethodMixTVEM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixTVEM
> ### Title: Specify a MixTVEM
> ### Aliases: lcMethodMixTVEM
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lcMethodMixtoolsGMM")
> ### * lcMethodMixtoolsGMM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixtoolsGMM
> ### Title: Specify mixed mixture regression model using mixtools
> ### Aliases: lcMethodMixtoolsGMM
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("lcMethodMixtoolsNPRM")
> ### * lcMethodMixtoolsNPRM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodMixtoolsNPRM
> ### Title: Specify non-parametric estimation for independent repeated
> ###   measures
> ### Aliases: lcMethodMixtoolsNPRM
> 
> ### ** Examples
> 
> library(mixtools)
mixtools package, version 1.2.0, Released 2020-02-05
This package is based upon work supported by the National Science Foundation under Grant No. SES-0518772.

> data(latrendData)
> method <- lcMethodMixtoolsNPRM("Y", id = "Id", time = "Time", nClusters = 3)
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "non-parametric estimation for independent repeated measurements using mixtools"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 stochastic:     FALSE
 maxiter:        500
 eps:            1e-08
 h:              NULL
 samebw:         TRUE
 bw:             NULL
 blockid:        NULL
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> 
> 
> 
> cleanEx()

detaching ‘package:mixtools’

> nameEx("lcMethodRandom")
> ### * lcMethodRandom
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodRandom
> ### Title: Specify a random-partitioning method
> ### Aliases: lcMethodRandom
> 
> ### ** Examples
> 
> data(latrendData)
> method <- lcMethodRandom(response = "Y", id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "random"
---------------------------------------------------------------------------
Method arguments:
 name:           "random"
 nClusters:      2
 id:             "Id"
 time:           "Time"
 center:         meanNA
 alpha:          10
 response:       "Y"
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> 
> # uniform clusters
> method <- lcMethodRandom(alpha = 1e3, nClusters = 3, response = "Y", id = "Id", time = "Time")
> 
> # single large cluster
> method <- lcMethodRandom(alpha = c(100, 1, 1, 1), nClusters = 4,
+   response = "Y", id = "Id", time = "Time")
> 
> 
> 
> cleanEx()
> nameEx("lcMethodStratify")
> ### * lcMethodStratify
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethodStratify
> ### Title: Specify a stratification method
> ### Aliases: lcMethodStratify
> 
> ### ** Examples
> 
> data(latrendData)
> # Stratification based on the mean response level
> method <- lcMethodStratify("Y", mean(Y) > 0,
+    clusterNames = c("Low", "High"), id = "Id", time = "Time")
> model <- latrend(method, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "stratify"
---------------------------------------------------------------------------
Method arguments:
 name:           "stratify"
 id:             "Id"
 time:           "Time"
 clusterNames:   c("Low", "High")
 nClusters:      NaN
 center:         meanNA
 stratify:       mean(Y) > 0
 response:       "Y"
---------------------------------------------------------------------------
Fitting model
---------------------------------------------------------------------------
> summary(model)
Longitudinal cluster model using stratify
 name:           "stratify"
 id:             "Id"
 time:           "Time"
 clusterNames:   "Low", "High"
 nClusters:      NaN
 center:         function (x) {    mean(x, na.rm = TRUE)}
 stratify:       mean(Y) > 0
 response:       "Y"

Cluster sizes (K=2):
      Low      High 
110 (55%)  90 (45%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-3.65815 -0.61743  0.03451  0.00000  0.68764  2.78631 

> 
> # Stratification function
> stratfun <- function(trajdata) {
+    trajmean <- mean(trajdata$Y)
+    factor(trajmean > 1.7,
+       levels = c(FALSE, TRUE),
+       labels = c("Low", "High"))
+ }
> method <- lcMethodStratify("Y", stratfun, id = "Id", time = "Time")
> 
> # Multiple clusters
> stratfun3 <- function(trajdata) {
+    trajmean <- mean(trajdata$Y)
+    cut(trajmean,
+       c(-Inf, .5, 2, Inf),
+       labels = c("Low", "Medium", "High"))
+ }
> method <- lcMethodStratify("Y", stratfun3, id = "Id", time = "Time")
> 
> 
> 
> cleanEx()
> nameEx("lcMethods")
> ### * lcMethods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcMethods
> ### Title: Generate a list of lcMethod objects
> ### Aliases: lcMethods
> 
> ### ** Examples
> 
> data(latrendData)
> baseMethod <- lcMethodKML("Y", id = "Id", time = "Time")
> methods <- lcMethods(baseMethod, nClusters = 1:6)
> 
> nclus <- 1:6
> methods <- lcMethods(baseMethod, nClusters = nclus)
> 
> methods <- lcMethods(baseMethod, nClusters = 3, center = .(mean, mean, median))
> length(methods) # 3
[1] 3
> 
> methods <- lcMethods(baseMethod, nClusters = 1:3, center = .(mean, mean, median))
> length(methods) # 9
[1] 9
> 
> 
> 
> cleanEx()
> nameEx("lcModels")
> ### * lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: lcModels
> ### Title: Construct a flat (named) list of lcModel objects
> ### Aliases: lcModels
> 
> ### ** Examples
> 
> data(latrendData)
> kml <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> gmm <- latrend(lcMethodLcmmGMM(fixed = Y ~ Time, mixture = ~ Time,
+    id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.28 seconds 
---------------------------------------------------------------------------
> lcModels(kml, gmm)
List of 2 lcModels with
  .name .method response scale nbCriterion startingCond
1     1     kml        Y  TRUE        1000    nearlyAll
2     2     gmm     <NA>    NA          NA         <NA>
                              centerMethod       distance power distanceName
1 function (x) {    mean(x, na.rm = TRUE)} function () {}     2    euclidean
2                                     <NA>           <NA>    NA         <NA>
  imputationMethod maxIt nbRedrawing classmb random mixture    fixed na.action
1         copyMean   200          20    <NA>   <NA>    <NA>     <NA>        NA
2             <NA>    NA          NA      ~1     ~1   ~Time Y ~ Time         1
  maxiter convG convL convB   nwg idiag
1      NA    NA    NA    NA    NA    NA
2     500 1e-04 1e-04 1e-04 FALSE FALSE
> 
> lcModels(defaults = c(kml, gmm))
List of 2 lcModels with
      .name .method response scale nbCriterion startingCond
1 defaults1     kml        Y  TRUE        1000    nearlyAll
2 defaults2     gmm     <NA>    NA          NA         <NA>
                              centerMethod       distance power distanceName
1 function (x) {    mean(x, na.rm = TRUE)} function () {}     2    euclidean
2                                     <NA>           <NA>    NA         <NA>
  imputationMethod maxIt nbRedrawing classmb random mixture    fixed na.action
1         copyMean   200          20    <NA>   <NA>    <NA>     <NA>        NA
2             <NA>    NA          NA      ~1     ~1   ~Time Y ~ Time         1
  maxiter convG convL convB   nwg idiag
1      NA    NA    NA    NA    NA    NA
2     500 1e-04 1e-04 1e-04 FALSE FALSE
> 
> 
> 
> cleanEx()
> nameEx("max.lcModels")
> ### * max.lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: max.lcModels
> ### Title: Select the lcModel with the highest metric value
> ### Aliases: max.lcModels
> 
> ### ** Examples
> 
> data(latrendData)
> baseMethod <- lcMethodKML(response = "Y", id = "Id", time = "Time")
> kml1 <- latrend(baseMethod, nClusters = 1, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      1
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml2 <- latrend(baseMethod, nClusters = 2, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml3 <- latrend(baseMethod, nClusters = 3, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> models <- lcModels(kml1, kml2, kml3)
> max(models, 'WRSS')
Longitudinal cluster model using longitudinal k-means (KML)
 nClusters:      1
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   function (x) {    mean(x, na.rm = TRUE)}
 distance:       function () {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20

Cluster sizes (K=1):
         A 
200 (100%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-3.53676 -0.62869  0.02795  0.00000  0.70160  3.12099 

> 
> 
> 
> cleanEx()
> nameEx("metric")
> ### * metric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: metric
> ### Title: Compute internal model metric(s)
> ### Aliases: metric metric,lcModel-method metric,list-method
> ###   metric,lcModels-method
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodLcmmGMM(fixed = Y ~ Time, mixture = ~ Time,
+    id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.28 seconds 
---------------------------------------------------------------------------
> bic <- metric(model, "BIC")
> 
> ic <- metric(model, c("AIC", "BIC"))
> 
> 
> 
> cleanEx()
> nameEx("min.lcModels")
> ### * min.lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min.lcModels
> ### Title: Select the lcModel with the lowest metric value
> ### Aliases: min.lcModels
> 
> ### ** Examples
> 
> data(latrendData)
> baseMethod <- lcMethodKML(response = "Y", id = "Id", time = "Time")
> kml1 <- latrend(baseMethod, nClusters = 1, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      1
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml2 <- latrend(baseMethod, nClusters = 2, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml3 <- latrend(baseMethod, nClusters = 3, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> models <- lcModels(kml1, kml2, kml3)
> min(models, 'WRSS')
Longitudinal cluster model using longitudinal k-means (KML)
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   function (x) {    mean(x, na.rm = TRUE)}
 distance:       function () {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20

Cluster sizes (K=3):
          A           B           C 
105 (52.5%)  52 (26.2%)  43 (21.3%) 

Number of obs: 2000, strata (Id): 200

Scaled residuals:
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
-4.32707 -0.61431 -0.01003  0.00000  0.64212  5.19705 

> 
> 
> 
> cleanEx()
> nameEx("plotMetric")
> ### * plotMetric
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotMetric
> ### Title: Plot one or more internal metrics for all lcModels
> ### Aliases: plotMetric
> 
> ### ** Examples
> 
> data(latrendData)
> baseMethod <- lcMethodKML(response = "Y", id = "Id", time = "Time")
> kml1 <- latrend(baseMethod, nClusters = 1, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      1
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml2 <- latrend(baseMethod, nClusters = 2, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml3 <- latrend(baseMethod, nClusters = 3, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> models <- lcModels(kml1, kml2, kml3)
> plotMetric(models, "BIC", by = "nClusters", group = ".name")
geom_path: Each group consists of only one observation. Do you need to adjust
the group aesthetic?
> 
> 
> 
> cleanEx()
> nameEx("plotTrajectories")
> ### * plotTrajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotTrajectories
> ### Title: Plot trajectories
> ### Aliases: plotTrajectories plotTrajectories,data.frame-method
> ###   plotTrajectories,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> plotTrajectories(latrendData, response = "Y", id = "Id", time = "Time")
> 
> plotTrajectories(latrendData, response = quote(exp(Y)), id = "Id", time = "Time")
> 
> 
> 
> cleanEx()
> nameEx("postprob")
> ### * postprob
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: postprob
> ### Title: Posterior probability per fitted id
> ### Aliases: postprob postprob,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodLcmmGMM(fixed = Y ~ Time, mixture = ~ Time,
+    id = "Id", time = "Time"), data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.27 seconds 
---------------------------------------------------------------------------
> postprob(model)
               A            B
1   6.094836e-14 1.000000e+00
2   4.630007e-18 1.000000e+00
3   1.212455e-15 1.000000e+00
4   1.271357e-16 1.000000e+00
5   2.743807e-07 9.999997e-01
6   1.388858e-18 1.000000e+00
7   3.523932e-16 1.000000e+00
8   4.040640e-18 1.000000e+00
9   7.943661e-15 1.000000e+00
10  3.822148e-14 1.000000e+00
11  1.363469e-14 1.000000e+00
12  1.411164e-19 1.000000e+00
13  6.952666e-16 1.000000e+00
14  1.696446e-13 1.000000e+00
15  3.366902e-15 1.000000e+00
16  1.488732e-16 1.000000e+00
17  1.479892e-15 1.000000e+00
18  1.315933e-11 1.000000e+00
19  1.405337e-15 1.000000e+00
20  1.581633e-14 1.000000e+00
21  1.117063e-11 1.000000e+00
22  1.741506e-13 1.000000e+00
23  1.105956e-14 1.000000e+00
24  2.412701e-16 1.000000e+00
25  8.518372e-14 1.000000e+00
26  9.077329e-18 1.000000e+00
27  5.331405e-16 1.000000e+00
28  1.660183e-11 1.000000e+00
29  2.124231e-15 1.000000e+00
30  2.043708e-15 1.000000e+00
31  3.272026e-14 1.000000e+00
32  9.490985e-10 1.000000e+00
33  3.570118e-13 1.000000e+00
34  1.175207e-17 1.000000e+00
35  2.948955e-19 1.000000e+00
36  8.683968e-18 1.000000e+00
37  4.020963e-16 1.000000e+00
38  2.383722e-14 1.000000e+00
39  1.736212e-16 1.000000e+00
40  2.424831e-12 1.000000e+00
41  4.193586e-17 1.000000e+00
42  3.559848e-15 1.000000e+00
43  2.219355e-14 1.000000e+00
44  1.121084e-11 1.000000e+00
45  1.197760e-14 1.000000e+00
46  1.368139e-10 1.000000e+00
47  2.046872e-12 1.000000e+00
48  1.506056e-13 1.000000e+00
49  3.872330e-15 1.000000e+00
50  1.534282e-14 1.000000e+00
51  3.059325e-16 1.000000e+00
52  4.266348e-18 1.000000e+00
53  3.698763e-13 1.000000e+00
54  1.959000e-12 1.000000e+00
55  8.932948e-17 1.000000e+00
56  7.716027e-14 1.000000e+00
57  1.239059e-11 1.000000e+00
58  1.953543e-17 1.000000e+00
59  7.556526e-16 1.000000e+00
60  2.009339e-12 1.000000e+00
61  2.753633e-14 1.000000e+00
62  4.250823e-16 1.000000e+00
63  4.594170e-13 1.000000e+00
64  8.394664e-19 1.000000e+00
65  1.543560e-18 1.000000e+00
66  1.186363e-15 1.000000e+00
67  1.423978e-13 1.000000e+00
68  2.268948e-11 1.000000e+00
69  3.671336e-14 1.000000e+00
70  5.063657e-12 1.000000e+00
71  5.269648e-14 1.000000e+00
72  4.978414e-13 1.000000e+00
73  5.806370e-12 1.000000e+00
74  2.276534e-19 1.000000e+00
75  4.271280e-14 1.000000e+00
76  1.010146e-17 1.000000e+00
77  4.500635e-10 1.000000e+00
78  1.160328e-15 1.000000e+00
79  6.417440e-12 1.000000e+00
80  3.111561e-14 1.000000e+00
81  1.529623e-18 1.000000e+00
82  1.383493e-15 1.000000e+00
83  1.084539e-17 1.000000e+00
84  2.631490e-12 1.000000e+00
85  2.314741e-12 1.000000e+00
86  2.723653e-10 1.000000e+00
87  4.725000e-16 1.000000e+00
88  6.625745e-15 1.000000e+00
89  1.099063e-16 1.000000e+00
90  5.120134e-15 1.000000e+00
91  1.000000e+00 8.612438e-13
92  1.000000e+00 3.210331e-09
93  1.000000e+00 2.211650e-11
94  1.000000e+00 7.241184e-14
95  9.995726e-01 4.274158e-04
96  1.000000e+00 1.823681e-10
97  9.999991e-01 8.775081e-07
98  9.999996e-01 4.306497e-07
99  1.000000e+00 1.698036e-08
100 1.000000e+00 1.391719e-09
101 1.000000e+00 1.079552e-10
102 1.000000e+00 2.040777e-12
103 9.999987e-01 1.250272e-06
104 1.000000e+00 2.131711e-10
105 9.992816e-01 7.183921e-04
106 9.847818e-01 1.521815e-02
107 1.000000e+00 6.518141e-11
108 9.999924e-01 7.639373e-06
109 1.000000e+00 5.103413e-13
110 1.000000e+00 1.530184e-10
111 9.999925e-01 7.482212e-06
112 9.999952e-01 4.795223e-06
113 1.000000e+00 5.454529e-10
114 1.000000e+00 6.683506e-11
115 1.000000e+00 1.653213e-09
116 9.999999e-01 1.028521e-07
117 1.000000e+00 4.591758e-11
118 1.000000e+00 5.444775e-09
119 1.000000e+00 3.294286e-13
120 1.000000e+00 8.930437e-10
121 9.999278e-01 7.216748e-05
122 9.982712e-01 1.728813e-03
123 1.000000e+00 1.192408e-08
124 1.000000e+00 2.166083e-16
125 1.000000e+00 1.169248e-08
126 1.000000e+00 3.883090e-09
127 1.000000e+00 5.354965e-11
128 9.999999e-01 7.742764e-08
129 1.000000e+00 1.496868e-14
130 1.000000e+00 3.487923e-08
131 1.000000e+00 2.258830e-14
132 1.000000e+00 1.019793e-17
133 1.000000e+00 3.426519e-10
134 9.999890e-01 1.098877e-05
135 1.000000e+00 7.001833e-14
136 1.000000e+00 2.110545e-08
137 9.999999e-01 7.898108e-08
138 1.000000e+00 2.384016e-09
139 1.000000e+00 2.383926e-09
140 1.000000e+00 3.749220e-08
141 1.000000e+00 1.010200e-08
142 1.000000e+00 3.194993e-14
143 1.000000e+00 3.078345e-11
144 1.000000e+00 1.617524e-09
145 1.000000e+00 2.671040e-20
146 1.000000e+00 1.569017e-17
147 9.999995e-01 5.042925e-07
148 1.000000e+00 1.167892e-09
149 9.999982e-01 1.795883e-06
150 9.978728e-01 2.127225e-03
151 9.999994e-01 6.359520e-07
152 1.000000e+00 1.425804e-08
153 1.000000e+00 2.472034e-12
154 1.000000e+00 6.889234e-09
155 9.998621e-01 1.379468e-04
156 9.990900e-01 9.099670e-04
157 1.000000e+00 1.053472e-12
158 1.000000e+00 2.746284e-10
159 1.000000e+00 3.539677e-11
160 1.000000e+00 6.383894e-12
161 1.000000e+00 3.817576e-20
162 9.997543e-01 2.456544e-04
163 1.000000e+00 1.559022e-11
164 1.000000e+00 1.692391e-10
165 9.999999e-01 6.955017e-08
166 1.000000e+00 7.289040e-09
167 1.000000e+00 4.184033e-08
168 9.999994e-01 5.681460e-07
169 1.000000e+00 1.613882e-11
170 1.000000e+00 4.635963e-15
171 1.000000e+00 5.645866e-32
172 1.000000e+00 1.780525e-29
173 1.000000e+00 5.888252e-32
174 1.000000e+00 3.013651e-29
175 1.000000e+00 7.995007e-33
176 1.000000e+00 8.474014e-32
177 1.000000e+00 1.084940e-27
178 1.000000e+00 8.183979e-31
179 1.000000e+00 8.323907e-31
180 1.000000e+00 5.378987e-23
181 1.000000e+00 1.157012e-28
182 1.000000e+00 1.369172e-23
183 1.000000e+00 1.702047e-32
184 1.000000e+00 2.906194e-28
185 1.000000e+00 5.648346e-26
186 1.000000e+00 1.216597e-27
187 1.000000e+00 1.715868e-36
188 1.000000e+00 9.290595e-25
189 1.000000e+00 6.923974e-35
190 1.000000e+00 2.195192e-30
191 1.000000e+00 9.979971e-23
192 1.000000e+00 1.802353e-28
193 1.000000e+00 4.256618e-23
194 1.000000e+00 2.988482e-30
195 1.000000e+00 1.623742e-28
196 1.000000e+00 2.651906e-34
197 1.000000e+00 7.514542e-22
198 1.000000e+00 3.992701e-29
199 1.000000e+00 3.842357e-30
200 1.000000e+00 1.775567e-26
> 
> 
> 
> cleanEx()
> nameEx("predict.lcModel")
> ### * predict.lcModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: predict.lcModel
> ### Title: lcModel predictions
> ### Aliases: predict.lcModel
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(lcMethodLcmmGMM(
+    fixed = Y ~ Time, mixture = ~ Time,
+    id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.28 seconds 
---------------------------------------------------------------------------
> predFitted <- predict(model) # same result as fitted(model)
> 
> # Cluster trajectory of cluster A
> predCluster <- predict(model, newdata = data.frame(Cluster = "A", Time = time(model)))
> 
> # Prediction for id S1 given cluster A membership
> predId <- predict(model, newdata = data.frame(Cluster = "A", Id = "S1", Time = time(model)))
> 
> # Prediction matrix for id S1 for all clusters
> predIdAll <- predict(model, newdata = data.frame(Id = "S1", Time = time(model)))
> 
> 
> 
> cleanEx()
> nameEx("responseVariable")
> ### * responseVariable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: responseVariable
> ### Title: Extract the response variable
> ### Aliases: responseVariable responseVariable,lcMethod-method
> ###   responseVariable,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodKML("Value")
> responseVariable(method) # "Value"
[1] "Value"
> 
> method <- lcMethodLcmmGBTM(fixed = Value ~ Time, mixture = ~ Time)
> responseVariable(method) # "Value"
[1] "Value"
> 
> data(latrendData)
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> responseVariable(model) # "Value"
[1] "Y"
> 
> 
> 
> cleanEx()
> nameEx("subset.lcModels")
> ### * subset.lcModels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subset.lcModels
> ### Title: Subsetting a lcModels list based on method arguments
> ### Aliases: subset.lcModels
> 
> ### ** Examples
> 
> data(latrendData)
> mKML <- lcMethodKML(response = "Y", id = "Id", time = "Time")
> kml1 <- latrend(mKML, nClusters = 1, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      1
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml2 <- latrend(mKML, nClusters = 2, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> kml3 <- latrend(mKML, nClusters = 3, latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      3
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> gmm <- latrend(lcMethodLcmmGMM(fixed = Y ~ Time, mixture = ~ Time,
+    id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "growth mixture model"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 classmb:        ~1
 random:         ~1
 mixture:        ~Time
 fixed:          Y ~ Time
 posfix:         NULL
 na.action:      1
 maxiter:        500
 convG:          1e-04
 convL:          1e-04
 convB:          1e-04
 cor:            NULL
 nwg:            FALSE
 idiag:          FALSE
---------------------------------------------------------------------------
Fitting model
Be patient, hlme is running ... 
The program took 0.27 seconds 
---------------------------------------------------------------------------
> models <- lcModels(kml1, kml2, kml3, gmm)
> 
> subset(models, nClusters > 1 & .method == 'kml')
List of 2 lcModels with
  .name .method nClusters
1     1     kml         2
2     2     kml         3
> 
> 
> 
> cleanEx()
> nameEx("timeVariable")
> ### * timeVariable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timeVariable
> ### Title: Extract the time variable
> ### Aliases: timeVariable timeVariable,lcMethod-method
> ###   timeVariable,lcModel-method
> 
> ### ** Examples
> 
> method <- lcMethodKML(time = "Assessment")
> timeVariable(method) # "Assessment"
[1] "Assessment"
> 
> data(latrendData)
> model <- latrend(lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> idVariable(model) # "Id"
[1] "Id"
> 
> 
> 
> cleanEx()
> nameEx("trajectories")
> ### * trajectories
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trajectories
> ### Title: Extract the fitted trajectories for all strata
> ### Aliases: trajectories trajectories,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(method = lcMethodKML("Y", id = "Id", time = "Time"), data = latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> trajectories(model)
       Id Cluster      Time          Y
   1:   1       B 0.0000000 0.04839039
   2:   1       B 0.2222222 0.05189640
   3:   1       B 0.4444444 0.06509638
   4:   1       B 0.6666667 0.06698159
   5:   1       B 0.8888889 0.03735418
  ---                                 
1996: 200       A 1.1111111 0.18682776
1997: 200       A 1.3333333 0.31634026
1998: 200       A 1.5555556 0.39384185
1999: 200       A 1.7777778 0.43595169
2000: 200       A 2.0000000 0.43175688
> 
> trajectories(model, at = c(0, .5, 1))
      Id Cluster Time           Y
  1:   1       B  0.0  0.04839039
  2:   1       B  0.5  0.06556768
  3:   1       B  1.0  0.02472587
  4:   2       B  0.0  0.04839039
  5:   2       B  0.5  0.06556768
 ---                             
596: 199       A  0.5 -0.32547817
597: 199       A  1.0  0.12550089
598: 200       A  0.0 -0.98189066
599: 200       A  0.5 -0.32547817
600: 200       A  1.0  0.12550089
> 
> 
> 
> cleanEx()
> nameEx("trajectoryAssignments")
> ### * trajectoryAssignments
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: trajectoryAssignments
> ### Title: Get the cluster membership of each trajectory
> ### Aliases: trajectoryAssignments trajectoryAssignments,lcModel-method
> 
> ### ** Examples
> 
> data(latrendData)
> model <- latrend(method = lcMethodKML("Y", id = "Id", time = "Time"), latrendData)
---------------------------------------------------------------------------
- Longitudinal clustering using "longitudinal k-means (KML)"
---------------------------------------------------------------------------
Method arguments:
 nClusters:      2
 id:             "Id"
 time:           "Time"
 response:       "Y"
 scale:          TRUE
 nbCriterion:    1000
 startingCond:   "nearlyAll"
 centerMethod:   meanNA
 distance:       function() {}
 power:          2
 distanceName:   "euclidean"
 imputationMethod:"copyMean"
 maxIt:          200
 nbRedrawing:    20
---------------------------------------------------------------------------
Fitting model
 ~ Fast KmL ~
********************S
---------------------------------------------------------------------------
> trajectoryAssignments(model)
  [1] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
 [38] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
 [75] B B B B B B B B B B B B B B B B A A A A A A A A A A A A A A A A A A A A A
[112] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
[149] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
[186] A A A A A A A A A A A A A A A
Levels: A B
> 
> # assign ids at random using weighted sampling
> trajectoryAssignments(model, strategy = which.weight)
  [1] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
 [38] B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B
 [75] B B B B B B B B B B B B B B B B A A A A A A A A A A A A A A A A A A A A A
[112] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
[149] A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A
[186] A A A A A A A A A A A A A A A
Levels: A B
> 
> 
> 
> cleanEx()
> nameEx("update.lcMethod")
> ### * update.lcMethod
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update.lcMethod
> ### Title: Update a method specification
> ### Aliases: update.lcMethod
> 
> ### ** Examples
> 
> m <- lcMethodMixtoolsGMM(Value ~ 1)
> m2 <- update(m, formula = ~ . + Time)
> 
> m3 <- update(m2, nClusters = 3)
> 
> k <- 2
> m4 <- update(m, nClusters = k) # nClusters: k
> 
> m5 <- update(m, nClusters = k, .eval = TRUE) # nClusters: 2
> 
> 
> 
> 
> cleanEx()
> nameEx("which.weight")
> ### * which.weight
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: which.weight
> ### Title: Sample an index of a vector weighted by the elements
> ### Aliases: which.weight
> 
> ### ** Examples
> 
> x = c(.01, .69, .3)
> which.weight(x) #1, 2, or 3
[1] 2
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  35.028 3.415 38.761 0.009 0.015 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
