
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MKpower"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('MKpower')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("histSimPower")
> ### * histSimPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hist
> ### Title: Histograms
> ### Aliases: hist hist.sim.power.ttest hist.sim.power.wtest
> ### Keywords: hplot
> 
> ### ** Examples
> 
> res1 <- sim.power.t.test(nx = 5, rx = rnorm, rx.H0 = rnorm, 
+                         ny = 10, ry = function(x) rnorm(x, mean = 3, sd = 3), 
+                         ry.H0 = function(x) rnorm(x, sd = 3))
> hist(res1)
> res2 <- sim.power.wilcox.test(nx = 6, rx = rnorm, rx.H0 = rnorm,
+                       ny = 6, ry = function(x) rnorm(x, mean = 2), 
+                       ry.H0 = rnorm)
> hist(res2)
> 
> 
> 
> cleanEx()
> nameEx("power.ancova")
> ### * power.ancova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.ancova
> ### Title: Power Calculation for ANCOVA
> ### Aliases: power.ancova
> ### Keywords: htest
> 
> ### ** Examples
> 
> ## Default matrix of contrasts
> ## 3 groups
> cbind(rep(1,2), -diag(2))
     [,1] [,2] [,3]
[1,]    1   -1    0
[2,]    1    0   -1
> ## 4 groups
> cbind(rep(1,3), -diag(3))
     [,1] [,2] [,3] [,4]
[1,]    1   -1    0    0
[2,]    1    0   -1    0
[3,]    1    0    0   -1
> 
> ## Table 1 in Shieh (2020)
> power.ancova(mu=c(400, 450, 500), var = 9900, power = 0.8)

     ANCOVA power calculation 

             ns = 20.46314, 20.46314, 20.46314
             mu = 400, 450, 500
            var = 9900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 63

> power.ancova(n = rep(63/3, 3), mu=c(400, 450, 500), var = 9900)

     ANCOVA power calculation 

             ns = 21, 21, 21
             mu = 400, 450, 500
            var = 9900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8115591

NOTE: Total sample size: 63

> power.ancova(mu=c(400, 450, 500), var = 9900, power = 0.8, nr.covs = 10)

     ANCOVA power calculation 

             ns = 23.61609, 23.61609, 23.61609
             mu = 400, 450, 500
            var = 9900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 72

> power.ancova(n = rep(72/3, 3), mu=c(400, 450, 500), var = 9900, nr.covs = 10)

     ANCOVA power calculation 

             ns = 24, 24, 24
             mu = 400, 450, 500
            var = 9900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8083228

NOTE: Total sample size: 72

> 
> ## Table 2 in Shieh (2020)
> power.ancova(mu=c(400, 450, 500), var = 7500, power = 0.8)

     ANCOVA power calculation 

             ns = 15.85492, 15.85492, 15.85492
             mu = 400, 450, 500
            var = 7500
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 48

> power.ancova(n = rep(48/3, 3), mu=c(400, 450, 500), var = 7500)

     ANCOVA power calculation 

             ns = 16, 16, 16
             mu = 400, 450, 500
            var = 7500
        nr.covs = 1
      sig.level = 0.05
          power = 0.8041981

NOTE: Total sample size: 48

> power.ancova(mu=c(400, 450, 500), var = 7500, power = 0.8, nr.covs = 10)

     ANCOVA power calculation 

             ns = 19.0415, 19.0415, 19.0415
             mu = 400, 450, 500
            var = 7500
        nr.covs = 10
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 60

> power.ancova(n = rep(60/3, 3), mu=c(400, 450, 500), var = 7500, nr.covs = 10)

     ANCOVA power calculation 

             ns = 20, 20, 20
             mu = 400, 450, 500
            var = 7500
        nr.covs = 10
      sig.level = 0.05
          power = 0.8263188

NOTE: Total sample size: 60

> 
> ## Table 3 in Shieh (2020)
> power.ancova(mu=c(400, 450, 500), var = 1900, power = 0.8)

     ANCOVA power calculation 

             ns = 5.217321, 5.217321, 5.217321
             mu = 400, 450, 500
            var = 1900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 18

> power.ancova(n = rep(18/3, 3), mu=c(400, 450, 500), var = 1900)

     ANCOVA power calculation 

             ns = 6, 6, 6
             mu = 400, 450, 500
            var = 1900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8750844

NOTE: Total sample size: 18

> power.ancova(mu=c(400, 450, 500), var = 1900, power = 0.8, nr.covs = 10)

     ANCOVA power calculation 

             ns = 8.553361, 8.553361, 8.553361
             mu = 400, 450, 500
            var = 1900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 27

> power.ancova(n = rep(27/3, 3), mu=c(400, 450, 500), var = 1900, nr.covs = 10)

     ANCOVA power calculation 

             ns = 9, 9, 9
             mu = 400, 450, 500
            var = 1900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8441553

NOTE: Total sample size: 27

> 
> ## ANOVA approach for Table 1-3
> power.anova.test(groups = 3, between.var = var(c(400, 450, 500)), 
+                  within.var = 10000, power = 0.8)

     Balanced one-way analysis of variance power calculation 

         groups = 3
              n = 20.30205
    between.var = 2500
     within.var = 10000
      sig.level = 0.05
          power = 0.8

NOTE: n is number in each group

> power.anova.test(n = 63/3, groups = 3, between.var = var(c(400, 450, 500)), 
+                  within.var = 10000)

     Balanced one-way analysis of variance power calculation 

         groups = 3
              n = 21
    between.var = 2500
     within.var = 10000
      sig.level = 0.05
          power = 0.8147697

NOTE: n is number in each group

> 
> ## Table 4 in Shieh (2020)
> power.ancova(mu=c(410, 450, 490), var = 9900, power = 0.8)

     ANCOVA power calculation 

             ns = 31.17475, 31.17475, 31.17475
             mu = 410, 450, 490
            var = 9900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 96

> power.ancova(n = rep(96/3, 3), mu=c(410, 450, 490), var = 9900)

     ANCOVA power calculation 

             ns = 32, 32, 32
             mu = 410, 450, 490
            var = 9900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8113679

NOTE: Total sample size: 96

> power.ancova(mu=c(410, 450, 490), var = 9900, power = 0.8, nr.covs = 10)

     ANCOVA power calculation 

             ns = 34.28176, 34.28176, 34.28176
             mu = 410, 450, 490
            var = 9900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 105

> power.ancova(n = rep(105/3, 3), mu=c(410, 450, 490), var = 9900, nr.covs = 10)

     ANCOVA power calculation 

             ns = 35, 35, 35
             mu = 410, 450, 490
            var = 9900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8099276

NOTE: Total sample size: 105

> 
> ## Table 5 in Shieh (2020)
> power.ancova(mu=c(410, 450, 490), var = 7500, power = 0.8)

     ANCOVA power calculation 

             ns = 23.95963, 23.95963, 23.95963
             mu = 410, 450, 490
            var = 7500
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 72

> power.ancova(n = rep(72/3, 3), mu=c(410, 450, 490), var = 7500)

     ANCOVA power calculation 

             ns = 24, 24, 24
             mu = 410, 450, 490
            var = 7500
        nr.covs = 1
      sig.level = 0.05
          power = 0.8007513

NOTE: Total sample size: 72

> power.ancova(mu=c(410, 450, 490), var = 7500, power = 0.8, nr.covs = 10)

     ANCOVA power calculation 

             ns = 27.09381, 27.09381, 27.09381
             mu = 410, 450, 490
            var = 7500
        nr.covs = 10
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 84

> power.ancova(n = rep(84/3, 3), mu=c(410, 450, 490), var = 7500, nr.covs = 10)

     ANCOVA power calculation 

             ns = 28, 28, 28
             mu = 410, 450, 490
            var = 7500
        nr.covs = 10
      sig.level = 0.05
          power = 0.8163034

NOTE: Total sample size: 84

> 
> ## Table 6 in Shieh (2020)
> power.ancova(mu=c(410, 450, 490), var = 1900, power = 0.8)

     ANCOVA power calculation 

             ns = 7.212445, 7.212445, 7.212445
             mu = 410, 450, 490
            var = 1900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 24

> power.ancova(n = rep(24/3, 3), mu=c(410, 450, 490), var = 1900)

     ANCOVA power calculation 

             ns = 8, 8, 8
             mu = 410, 450, 490
            var = 1900
        nr.covs = 1
      sig.level = 0.05
          power = 0.8516283

NOTE: Total sample size: 24

> power.ancova(mu=c(410, 450, 490), var = 1900, power = 0.8, nr.covs = 10)

     ANCOVA power calculation 

             ns = 10.51576, 10.51576, 10.51576
             mu = 410, 450, 490
            var = 1900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 33

> power.ancova(n = rep(33/3, 3), mu=c(410, 450, 490), var = 1900, nr.covs = 10)

     ANCOVA power calculation 

             ns = 11, 11, 11
             mu = 410, 450, 490
            var = 1900
        nr.covs = 10
      sig.level = 0.05
          power = 0.8325422

NOTE: Total sample size: 33

> 
> ## ANOVA approach for Table 4-6
> power.anova.test(groups = 3, between.var = var(c(410, 450, 490)), 
+                  within.var = 10000, power = 0.8)

     Balanced one-way analysis of variance power calculation 

         groups = 3
              n = 31.12903
    between.var = 1600
     within.var = 10000
      sig.level = 0.05
          power = 0.8

NOTE: n is number in each group

> power.anova.test(n = 96/3, groups = 3, between.var = var(c(410, 450, 490)), 
+                  within.var = 10000)

     Balanced one-way analysis of variance power calculation 

         groups = 3
              n = 32
    between.var = 1600
     within.var = 10000
      sig.level = 0.05
          power = 0.811864

NOTE: n is number in each group

> 
> ###############################################################################
> ## Example from Maxwell and Delaney (2004) according to Shieh (2020)
> ###############################################################################
> ## ANCOVA (balanced design)
> power.ancova(n = rep(30/3, 3), mu=c(7.5366, 11.9849, 13.9785), var = 29.0898)

     ANCOVA power calculation 

             ns = 10, 10, 10
             mu = 7.5366, 11.9849, 13.9785
            var = 29.0898
        nr.covs = 1
      sig.level = 0.05
          power = 0.6145256

NOTE: Total sample size: 30

> power.ancova(mu=c(7.5366, 11.9849, 13.9785), var = 29.0898, power = 0.8)

     ANCOVA power calculation 

             ns = 14.29481, 14.29481, 14.29481
             mu = 7.5366, 11.9849, 13.9785
            var = 29.0898
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 45

> power.ancova(mu=c(7.5366, 11.9849, 13.9785), var = 29.0898, power = 0.9)

     ANCOVA power calculation 

             ns = 18.32456, 18.32456, 18.32456
             mu = 7.5366, 11.9849, 13.9785
            var = 29.0898
        nr.covs = 1
      sig.level = 0.05
          power = 0.9

NOTE: Total sample size: 57

> 
> ## ANOVA
> power.anova.test(n = 30/3, groups = 3, between.var = var(c(7.5366, 11.9849, 13.9785)), 
+                  within.var = 29.0898)

     Balanced one-way analysis of variance power calculation 

         groups = 3
              n = 10
    between.var = 10.87665
     within.var = 29.0898
      sig.level = 0.05
          power = 0.6338728

NOTE: n is number in each group

> power.anova.test(groups = 3, between.var = var(c(7.5366, 11.9849, 13.9785)), 
+                  within.var = 29.0898, power = 0.8)

     Balanced one-way analysis of variance power calculation 

         groups = 3
              n = 13.93289
    between.var = 10.87665
     within.var = 29.0898
      sig.level = 0.05
          power = 0.8

NOTE: n is number in each group

> power.anova.test(groups = 3, between.var = var(c(7.5366, 11.9849, 13.9785)), 
+                  within.var = 29.0898, power = 0.9)

     Balanced one-way analysis of variance power calculation 

         groups = 3
              n = 17.96242
    between.var = 10.87665
     within.var = 29.0898
      sig.level = 0.05
          power = 0.9

NOTE: n is number in each group

>                  
> ## ANCOVA - imbalanced design
> power.ancova(mu=c(7.5366, 11.9849, 13.9785), var = 29.0898, power = 0.8, 
+              group.ratio = c(1, 1.25, 1.5))

     ANCOVA power calculation 

             ns = 12.25390, 15.31738, 18.38085
             mu = 7.5366, 11.9849, 13.9785
            var = 29.0898
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 48

> power.ancova(n = c(13, 16, 19), mu=c(7.5366, 11.9849, 13.9785), var = 29.0898,  
+              group.ratio = c(1, 1.25, 1.5))

     ANCOVA power calculation 

             ns = 13, 16, 19
             mu = 7.5366, 11.9849, 13.9785
            var = 29.0898
        nr.covs = 1
      sig.level = 0.05
          power = 0.8266307

NOTE: Total sample size: 48

> power.ancova(mu=c(7.5366, 11.9849, 13.9785), var = 29.0898, power = 0.8, 
+              group.ratio = c(1, 0.8, 2/3))

     ANCOVA power calculation 

             ns = 16.87449, 13.49959, 11.24966
             mu = 7.5366, 11.9849, 13.9785
            var = 29.0898
        nr.covs = 1
      sig.level = 0.05
          power = 0.8

NOTE: Total sample size: 43

> power.ancova(n = c(17, 14, 12), mu=c(7.5366, 11.9849, 13.9785), var = 29.0898,  
+              group.ratio = c(1, 0.8, 2/3))

     ANCOVA power calculation 

             ns = 17, 14, 12
             mu = 7.5366, 11.9849, 13.9785
            var = 29.0898
        nr.covs = 1
      sig.level = 0.05
          power = 0.8034654

NOTE: Total sample size: 43

> 
> 
> 
> cleanEx()
> nameEx("power.diagnostic.test")
> ### * power.diagnostic.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.diagnostic.test
> ### Title: Power Calculations for Diagnostic Tests
> ### Aliases: power.diagnostic.test ssize.sens.ci ssize.spec.ci
> ### Keywords: htest
> 
> ### ** Examples
> 
> ## see n2 on page 1202 of Chu and Cole (2007)
> power.diagnostic.test(sens = 0.99, delta = 0.14, power = 0.95) # 40

     Diagnostic test exact power calculation 

           sens = 0.99
              n = 40
             n1 = 40
          delta = 0.14
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> power.diagnostic.test(sens = 0.99, delta = 0.13, power = 0.95) # 43

     Diagnostic test exact power calculation 

           sens = 0.99
              n = 43
             n1 = 43
          delta = 0.13
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> power.diagnostic.test(sens = 0.99, delta = 0.12, power = 0.95) # 47

     Diagnostic test exact power calculation 

           sens = 0.99
              n = 47
             n1 = 47
          delta = 0.12
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> 
> power.diagnostic.test(sens = 0.98, delta = 0.13, power = 0.95) # 50

     Diagnostic test exact power calculation 

           sens = 0.98
              n = 50
             n1 = 50
          delta = 0.13
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> power.diagnostic.test(sens = 0.98, delta = 0.11, power = 0.95) # 58

     Diagnostic test exact power calculation 

           sens = 0.98
              n = 58
             n1 = 58
          delta = 0.11
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> 
> ## see page 1201 of Chu and Cole (2007)
> power.diagnostic.test(sens = 0.95, delta = 0.1, n = 93) ## 0.957

     Diagnostic test exact power calculation 

           sens = 0.95
              n = 93
             n1 = 93
          delta = 0.1
      sig.level = 0.05
          power = 0.956769
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> power.diagnostic.test(sens = 0.95, delta = 0.1, n = 93, power = 0.95, 
+                       sig.level = NULL) ## 0.0496

     Diagnostic test exact power calculation 

           sens = 0.95
              n = 93
             n1 = 93
          delta = 0.1
      sig.level = 0.04963266
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> power.diagnostic.test(sens = 0.95, delta = 0.1, n = 102) ## 0.968

     Diagnostic test exact power calculation 

           sens = 0.95
              n = 102
             n1 = 102
          delta = 0.1
      sig.level = 0.05
          power = 0.9682165
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> power.diagnostic.test(sens = 0.95, delta = 0.1, n = 102, power = 0.95, 
+                       sig.level = NULL) ## 0.0471

     Diagnostic test exact power calculation 

           sens = 0.95
              n = 102
             n1 = 102
          delta = 0.1
      sig.level = 0.04708589
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> ## yields 102 not 93!
> power.diagnostic.test(sens = 0.95, delta = 0.1, power = 0.95)

     Diagnostic test exact power calculation 

           sens = 0.95
              n = 102
             n1 = 102
          delta = 0.1
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> 
> ## function only for sensitivity
> ssize.sens.ci(sens = 0.99, delta = 0.14, power = 0.95) # 40

     Diagnostic test exact power calculation 

           sens = 0.99
              n = 40
             n1 = 40
          delta = 0.14
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of cases, n1 is number of controls

> 
> ## function only for specificity
> ssize.spec.ci(spec = 0.99, delta = 0.13, power = 0.95) # 43

     Diagnostic test exact power calculation 

           spec = 0.99
              n = 43
             n1 = 43
          delta = 0.13
      sig.level = 0.05
          power = 0.95
           prev = NULL

NOTE: n is number of controls, n1 is number of cases

> 
> 
> 
> cleanEx()
> nameEx("power.hsu.t.test")
> ### * power.hsu.t.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.hsu.t.test
> ### Title: Power Calculations for Two-sample Hsu t Test
> ### Aliases: power.hsu.t.test
> ### Keywords: htest
> 
> ### ** Examples
> 
>  ## more conservative than classical or Welch t-test
>  power.hsu.t.test(n = 20, delta = 1)

     Two-sample Hsu t test power calculation 

              n = 20
          delta = 1
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.8506046
    alternative = two.sided

NOTE: n is number in *each* group

>  power.hsu.t.test(power = .90, delta = 1)

     Two-sample Hsu t test power calculation 

              n = 23.02186
          delta = 1
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n is number in *each* group

>  power.hsu.t.test(power = .90, delta = 1, alternative = "one.sided")

     Two-sample Hsu t test power calculation 

              n = 18.5674
          delta = 1
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.9
    alternative = one.sided

NOTE: n is number in *each* group

> 
>  ## sd1 = 0.5, sd2 = 1
>  power.welch.t.test(delta = 0.5, sd1 = 0.5, sd2 = 1, power = 0.9)

     Two-sample Welch t test power calculation 

              n = 53.86822
          delta = 0.5
            sd1 = 0.5
            sd2 = 1
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n is number in *each* group

>  power.hsu.t.test(delta = 0.5, sd1 = 0.5, sd2 = 1, power = 0.9)

     Two-sample Hsu t test power calculation 

              n = 54.49421
          delta = 0.5
            sd1 = 0.5
            sd2 = 1
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n is number in *each* group

> 
> 
> 
> 
> cleanEx()
> nameEx("power.mpe.atleast.one")
> ### * power.mpe.atleast.one
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.mpe.atleast.one
> ### Title: Power for at least One Endpoint with Known Covariance
> ### Aliases: power.mpe.atleast.one
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## compute power
> power.mpe.atleast.one(K = 2, delta = c(0.2,0.2), Sigma = diag(c(1,1)), power = 0.8)

 Power calculation for multiple primary endpoints for at least one endpoint 

              n = 218.963
          delta = 0.2, 0.2
             SD = 1, 1
            rho = 0
      sig.level = 0.025
          power = 0.8

Sigma =
     [,1] [,2]
[1,]    1    0
[2,]    0    1

NOTE: n is number in *each* group

> 
> ## compute sample size
> power.mpe.atleast.one(K = 2, delta = c(0.2,0.2), Sigma = diag(c(2,2)), power = 0.9)

 Power calculation for multiple primary endpoints for at least one endpoint 

              n = 594.5002
          delta = 0.2, 0.2
             SD = 1.414214, 1.414214
            rho = 0
      sig.level = 0.025
          power = 0.9

Sigma =
     [,1] [,2]
[1,]    2    0
[2,]    0    2

NOTE: n is number in *each* group

> 
> ## known covariance matrix
> Sigma <- matrix(c(1.440, 0.840, 1.296, 0.840,
+                   0.840, 1.960, 0.168, 1.568,
+                   1.296, 0.168, 1.440, 0.420,
+                   0.840, 1.568, 0.420, 1.960), ncol = 4)
> ## compute power
> power.mpe.atleast.one(K = 4, n = 60, delta = c(0.5, 0.75, 0.5, 0.75), Sigma = Sigma)

 Power calculation for multiple primary endpoints for at least one endpoint 

              n = 60
          delta = 0.50, 0.75, 0.50, 0.75
             SD = 1.2, 1.4, 1.2, 1.4
            rho = 0.50, 0.90, 0.50, 0.10, 0.80, 0.25
      sig.level = 0.0125
          power = 0.9024363

Sigma =
      [,1]  [,2]  [,3]  [,4]
[1,] 1.440 0.840 1.296 0.840
[2,] 0.840 1.960 0.168 1.568
[3,] 1.296 0.168 1.440 0.420
[4,] 0.840 1.568 0.420 1.960

NOTE: n is number in *each* group

> ## equivalent: known SDs and correlation rho
> power.mpe.atleast.one(K = 4, n = 60, delta = c(0.5, 0.75, 0.5, 0.75),
+                       SD = c(1.2, 1.4, 1.2, 1.4), 
+                       rho = c(0.5, 0.9, 0.5, 0.1, 0.8, 0.25))

 Power calculation for multiple primary endpoints for at least one endpoint 

              n = 60
          delta = 0.50, 0.75, 0.50, 0.75
             SD = 1.2, 1.4, 1.2, 1.4
            rho = 0.50, 0.90, 0.50, 0.10, 0.80, 0.25
      sig.level = 0.0125
          power = 0.9024375

Sigma =
      [,1]  [,2]  [,3]  [,4]
[1,] 1.440 0.840 1.296 0.840
[2,] 0.840 1.960 0.168 1.568
[3,] 1.296 0.168 1.440 0.420
[4,] 0.840 1.568 0.420 1.960

NOTE: n is number in *each* group

> 
> 
> 
> cleanEx()
> nameEx("power.mpe.known.var")
> ### * power.mpe.known.var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.mpe.known.var
> ### Title: Multiple Co-Primary Endpoints with Known Covariance
> ### Aliases: power.mpe.known.var
> ### Keywords: htest multivariate
> 
> ### ** Examples
> 
> ## compute power
> power.mpe.known.var(K = 2, n = 20, delta = c(1,1), Sigma = diag(c(1,1)))

 Power calculation for multiple co-primary endpoints (covariance known) 

              n = 20
          delta = 1, 1
             SD = 1, 1
            rho = 0
      sig.level = 0.05
          power = 0.8750109

Sigma =
     [,1] [,2]
[1,]    1    0
[2,]    0    1

NOTE: n is number in *each* group

> 
> ## compute sample size
> power.mpe.known.var(K = 2, delta = c(1,1), Sigma = diag(c(2,2)), power = 0.9,
+                     sig.level = 0.025)

 Power calculation for multiple co-primary endpoints (covariance known) 

              n = 51.61514
          delta = 1, 1
             SD = 1.414214, 1.414214
            rho = 0
      sig.level = 0.025
          power = 0.9

Sigma =
     [,1] [,2]
[1,]    2    0
[2,]    0    2

NOTE: n is number in *each* group

> 
> ## known covariance matrix
> Sigma <- matrix(c(1.440, 0.840, 1.296, 0.840,
+                   0.840, 1.960, 0.168, 1.568,
+                   1.296, 0.168, 1.440, 0.420,
+                   0.840, 1.568, 0.420, 1.960), ncol = 4)
> ## compute power
> power.mpe.known.var(K = 4, n = 60, delta = c(0.5, 0.75, 0.5, 0.75), Sigma = Sigma)

 Power calculation for multiple co-primary endpoints (covariance known) 

              n = 60
          delta = 0.50, 0.75, 0.50, 0.75
             SD = 1.2, 1.4, 1.2, 1.4
            rho = 0.50, 0.90, 0.50, 0.10, 0.80, 0.25
      sig.level = 0.05
          power = 0.6207681

Sigma =
      [,1]  [,2]  [,3]  [,4]
[1,] 1.440 0.840 1.296 0.840
[2,] 0.840 1.960 0.168 1.568
[3,] 1.296 0.168 1.440 0.420
[4,] 0.840 1.568 0.420 1.960

NOTE: n is number in *each* group

> ## equivalent: known SDs and correlation rho
> power.mpe.known.var(K = 4, n = 60,delta = c(0.5, 0.75, 0.5, 0.75),
+                     SD = c(1.2, 1.4, 1.2, 1.4), 
+                     rho = c(0.5, 0.9, 0.5, 0.1, 0.8, 0.25))

 Power calculation for multiple co-primary endpoints (covariance known) 

              n = 60
          delta = 0.50, 0.75, 0.50, 0.75
             SD = 1.2, 1.4, 1.2, 1.4
            rho = 0.50, 0.90, 0.50, 0.10, 0.80, 0.25
      sig.level = 0.05
          power = 0.6208335

Sigma =
      [,1]  [,2]  [,3]  [,4]
[1,] 1.440 0.840 1.296 0.840
[2,] 0.840 1.960 0.168 1.568
[3,] 1.296 0.168 1.440 0.420
[4,] 0.840 1.568 0.420 1.960

NOTE: n is number in *each* group

> 
> 
> 
> cleanEx()
> nameEx("power.mpe.unknown.var")
> ### * power.mpe.unknown.var
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.mpe.unknown.var
> ### Title: Multiple Co-Primary Endpoints with Unknown Covariance
> ### Aliases: power.mpe.unknown.var
> ### Keywords: htest multivariate
> 
> ### ** Examples
> 
> ## compute power
> ## Not run: 
> ##D power.mpe.unknown.var(K = 2, n = 20, delta = c(1,1), Sigma = diag(c(1,1)))
> ##D 
> ##D ## To compute sample size, first assume covariance as known
> ##D power.mpe.known.var(K = 2, delta = c(1,1), Sigma = diag(c(2,2)), power = 0.9,
> ##D                   sig.level = 0.025)
> ##D 
> ##D ## The value of n, which is 51, is used as n.min and n.max must be larger
> ##D ## then n.min so we try 60.
> ##D power.mpe.unknown.var(K = 2, delta = c(1,1), Sigma = diag(c(2,2)), power = 0.9,
> ##D                   sig.level = 0.025, n.min = 51, n.max = 60)
> ##D 
> ##D ## More complex example with unknown covariance matrix assumed to be
> ##D Sigma <- matrix(c(1.440, 0.840, 1.296, 0.840,
> ##D                   0.840, 1.960, 0.168, 1.568,
> ##D                   1.296, 0.168, 1.440, 0.420,
> ##D                   0.840, 1.568, 0.420, 1.960), ncol = 4)
> ##D ## compute power
> ##D power.mpe.unknown.var(K = 4, n = 90, delta = c(0.5, 0.75, 0.5, 0.75), Sigma = Sigma)
> ##D ## equivalent: unknown SDs and correlation rho
> ##D power.mpe.unknown.var(K = 4, n = 90, delta = c(0.5, 0.75, 0.5, 0.75),
> ##D                       SD = c(1.2, 1.4, 1.2, 1.4),
> ##D                       rho = c(0.5, 0.9, 0.5, 0.1, 0.8, 0.25))
> ## End(Not run)
> 
> 
> cleanEx()
> nameEx("power.nb.test")
> ### * power.nb.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.nb.test
> ### Title: Power Calculation for Comparing Two Negative Binomial Rates
> ### Aliases: power.nb.test
> ### Keywords: htest
> 
> ### ** Examples
> 
> ## examples from Table I in Zhu and Lakkis (2014)
> ## theta = 1/k, RR = rr, mu0 = r0, duration = mu_t
> power.nb.test(mu0 = 0.8, RR = 0.85, theta = 1/0.4, duration = 0.75, power = 0.8, approach = 1)

     Power calculation for comparing two negative binomial rates 

              n = 1254.229
             n1 = 1254.229
            mu0 = 0.8
             RR = 0.85
          theta = 2.5
       duration = 0.75
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 0.8, RR = 0.85, theta = 1/0.4, duration = 0.75, power = 0.8, approach = 2)

     Power calculation for comparing two negative binomial rates 

              n = 1315.69
             n1 = 1315.69
            mu0 = 0.8
             RR = 0.85
          theta = 2.5
       duration = 0.75
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 0.8, RR = 0.85, theta = 1/0.4, duration = 0.75, power = 0.8, approach = 3)

     Power calculation for comparing two negative binomial rates 

              n = 1310.73
             n1 = 1310.73
            mu0 = 0.8
             RR = 0.85
          theta = 2.5
       duration = 0.75
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> power.nb.test(mu0 = 1.4, RR = 1.15, theta = 1/1.5, duration = 0.75, power = 0.8, approach = 1)

     Power calculation for comparing two negative binomial rates 

              n = 1955.761
             n1 = 1955.761
            mu0 = 1.4
             RR = 1.15
          theta = 0.6666667
       duration = 0.75
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 1.4, RR = 1.15, theta = 1/1.5, duration = 0.75, power = 0.8, approach = 2)

     Power calculation for comparing two negative binomial rates 

              n = 1920.908
             n1 = 1920.908
            mu0 = 1.4
             RR = 1.15
          theta = 0.6666667
       duration = 0.75
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 1.4, RR = 1.15, theta = 1/1.5, duration = 0.75, power = 0.8, approach = 3)

     Power calculation for comparing two negative binomial rates 

              n = 1918.472
             n1 = 1918.472
            mu0 = 1.4
             RR = 1.15
          theta = 0.6666667
       duration = 0.75
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> 
> ## examples from Table II in Zhu and Lakkis (2014) - seem to be total sample sizes
> ## can reproduce the results with mu_t = 1.0 (not 0.7!)
> power.nb.test(mu0 = 2.0, RR = 0.5, theta = 1, duration = 1.0, ssize.ratio = 1,
+               power = 0.8, approach = 1)

     Power calculation for comparing two negative binomial rates 

              n = 51.39692
             n1 = 51.39692
            mu0 = 2
             RR = 0.5
          theta = 1
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 2.0, RR = 0.5, theta = 1, duration = 1.0, ssize.ratio = 1,
+               power = 0.8, approach = 2)

     Power calculation for comparing two negative binomial rates 

              n = 57.17745
             n1 = 57.17745
            mu0 = 2
             RR = 0.5
          theta = 1
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 2.0, RR = 0.5, theta = 1, duration = 1.0, ssize.ratio = 1,
+               power = 0.8, approach = 3)

     Power calculation for comparing two negative binomial rates 

              n = 55.26567
             n1 = 55.26567
            mu0 = 2
             RR = 0.5
          theta = 1
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> power.nb.test(mu0 = 10.0, RR = 1.5, theta = 1/5, duration = 1.0, ssize.ratio = 3/2,
+               power = 0.8, approach = 1)

     Power calculation for comparing two negative binomial rates 

              n = 405.4882
             n1 = 608.2323
            mu0 = 10
             RR = 1.5
          theta = 0.2
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 10.0, RR = 1.5, theta = 1/5, duration = 1.0, ssize.ratio = 3/2,
+               power = 0.8, approach = 2)

     Power calculation for comparing two negative binomial rates 

              n = 404.7462
             n1 = 607.1192
            mu0 = 10
             RR = 1.5
          theta = 0.2
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 10.0, RR = 1.5, theta = 1/5, duration = 1.0, ssize.ratio = 3/2,
+               power = 0.8, approach = 3)

     Power calculation for comparing two negative binomial rates 

              n = 404.2037
             n1 = 606.3055
            mu0 = 10
             RR = 1.5
          theta = 0.2
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> 
> ## examples from Table III in Zhu and Lakkis (2014)
> power.nb.test(mu0 = 5.0, RR = 2.0, theta = 1/0.5, duration = 1, power = 0.8, approach = 1)

     Power calculation for comparing two negative binomial rates 

              n = 22.37386
             n1 = 22.37386
            mu0 = 5
             RR = 2
          theta = 2
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 5.0, RR = 2.0, theta = 1/0.5, duration = 1, power = 0.8, approach = 2)

     Power calculation for comparing two negative binomial rates 

              n = 21.23734
             n1 = 21.23734
            mu0 = 5
             RR = 2
          theta = 2
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 5.0, RR = 2.0, theta = 1/0.5, duration = 1, power = 0.8, approach = 3)

     Power calculation for comparing two negative binomial rates 

              n = 20.85564
             n1 = 20.85564
            mu0 = 5
             RR = 2
          theta = 2
       duration = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> 
> ## examples from Table IV in Zhu and Lakkis (2014)
> power.nb.test(mu0 = 5.9/3, RR = 0.4, theta = 0.49, duration = 3, power = 0.9, approach = 1)

     Power calculation for comparing two negative binomial rates 

              n = 56.57115
             n1 = 56.57115
            mu0 = 1.966667
             RR = 0.4
          theta = 0.49
       duration = 3
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 5.9/3, RR = 0.4, theta = 0.49, duration = 3, power = 0.9, approach = 2)

     Power calculation for comparing two negative binomial rates 

              n = 58.50562
             n1 = 58.50562
            mu0 = 1.966667
             RR = 0.4
          theta = 0.49
       duration = 3
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 5.9/3, RR = 0.4, theta = 0.49, duration = 3, power = 0.9, approach = 3)

     Power calculation for comparing two negative binomial rates 

              n = 57.6792
             n1 = 57.6792
            mu0 = 1.966667
             RR = 0.4
          theta = 0.49
       duration = 3
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> power.nb.test(mu0 = 13/6, RR = 0.2, theta = 0.52, duration = 6, power = 0.9, approach = 1)

     Power calculation for comparing two negative binomial rates 

              n = 16.71379
             n1 = 16.71379
            mu0 = 2.166667
             RR = 0.2
          theta = 0.52
       duration = 6
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 13/6, RR = 0.2, theta = 0.52, duration = 6, power = 0.9, approach = 2)

     Power calculation for comparing two negative binomial rates 

              n = 17.474
             n1 = 17.474
            mu0 = 2.166667
             RR = 0.2
          theta = 0.52
       duration = 6
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> power.nb.test(mu0 = 13/6, RR = 0.2, theta = 0.52, duration = 6, power = 0.9, approach = 3)

     Power calculation for comparing two negative binomial rates 

              n = 16.96846
             n1 = 16.96846
            mu0 = 2.166667
             RR = 0.2
          theta = 0.52
       duration = 6
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> 
> ## see Section 5 of Zhu and Lakkis (2014)
> power.nb.test(mu0 = 0.66, RR = 0.8, theta = 1/0.8, duration = 0.9, power = 0.9)

     Power calculation for comparing two negative binomial rates 

              n = 1130.989
             n1 = 1130.989
            mu0 = 0.66
             RR = 0.8
          theta = 1.25
       duration = 0.9
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n = sample size of control group, n1 = sample size of treatment group

> 
> 
> 
> cleanEx()
> nameEx("power.prop1.test")
> ### * power.prop1.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.prop1.test
> ### Title: Power Calculations for One-Sample Test for Proportions
> ### Aliases: power.prop1.test
> ### Keywords: htest
> 
> ### ** Examples
> 
> power.prop1.test(p1 = 0.4, power = 0.8)

     Power calculation for testing a given proportion (with continuity correction) 

              n = 203.7246
          delta = 0.1
             p1 = 0.4
             p0 = 0.5
      sig.level = 0.05
exact.sig.level = 0.04205139
          power = 0.8
    exact.power = 0.8008049
    alternative = two.sided

NOTE: n = total sample size

> power.prop1.test(p1 = 0.4, power = 0.8, cont.corr = FALSE)

     Power calculation for testing a given proportion 

              n = 193.8473
          delta = 0.1
             p1 = 0.4
             p0 = 0.5
      sig.level = 0.05
exact.sig.level = 0.05228312
          power = 0.8
    exact.power = 0.8067065
    alternative = two.sided

NOTE: n = total sample size

> power.prop1.test(p1 = 0.6, power = 0.8)

     Power calculation for testing a given proportion (with continuity correction) 

              n = 203.7246
          delta = 0.1
             p1 = 0.6
             p0 = 0.5
      sig.level = 0.05
exact.sig.level = 0.04205139
          power = 0.8
    exact.power = 0.8008049
    alternative = two.sided

NOTE: n = total sample size

> power.prop1.test(n = 204, power = 0.8)

     Power calculation for testing a given proportion (with continuity correction) 

              n = 204
          delta = 0.09990315
             p1 = 0.5999032
             p0 = 0.5
      sig.level = 0.05
exact.sig.level = 0.04205139
          power = 0.8
    exact.power = 0.8000115
    alternative = two.sided

NOTE: n = total sample size

> power.prop1.test(n = 204, p1 = 0.4, power = 0.8, sig.level = NULL)

     Power calculation for testing a given proportion (with continuity correction) 

              n = 204
          delta = 0.1
             p1 = 0.4
             p0 = 0.5
      sig.level = 0.04976943
exact.sig.level = 0.04205139
          power = 0.8
    exact.power = 0.8008049
    alternative = two.sided

NOTE: n = total sample size

> power.prop1.test(n = 194, p1 = 0.4, power = 0.8, sig.level = NULL, 
+                  cont.corr = FALSE)

     Power calculation for testing a given proportion 

              n = 194
          delta = 0.1
             p1 = 0.4
             p0 = 0.5
      sig.level = 0.04987195
exact.sig.level = 0.05228312
          power = 0.8
    exact.power = 0.8067065
    alternative = two.sided

NOTE: n = total sample size

> 
> power.prop1.test(p1 = 0.1, p0 = 0.3, power = 0.8, alternative = "less")

     Power calculation for testing a given proportion (with continuity correction) 

              n = 30.10603
          delta = 0.2
             p1 = 0.1
             p0 = 0.3
      sig.level = 0.05
exact.sig.level = 0.02390343
          power = 0.8
    exact.power = 0.8067985
    alternative = less

NOTE: n = total sample size

> power.prop1.test(p1 = 0.1, p0 = 0.3, power = 0.8, alternative = "less", 
+                  cont.corr = FALSE)

     Power calculation for testing a given proportion 

              n = 25.31363
          delta = 0.2
             p1 = 0.1
             p0 = 0.3
      sig.level = 0.05
exact.sig.level = 0.02595652
          power = 0.8
    exact.power = 0.7409416
    alternative = less

NOTE: n = total sample size

> power.prop1.test(n = 31, p0 = 0.3, power = 0.8, alternative = "less")

     Power calculation for testing a given proportion (with continuity correction) 

              n = 31
          delta = 0.2269786
             p1 = 0.07302137
             p0 = 0.3
      sig.level = 0.05
exact.sig.level = 0.02390343
          power = 0.8
    exact.power = 0.9280065
    alternative = less

NOTE: n = total sample size

> power.prop1.test(n = 31, p1 = 0.1, p0 = 0.3, power = 0.8, sig.level = NULL, 
+                  alternative = "less")

     Power calculation for testing a given proportion (with continuity correction) 

              n = 31
          delta = 0.2
             p1 = 0.1
             p0 = 0.3
      sig.level = 0.04618409
exact.sig.level = 0.02390343
          power = 0.8
    exact.power = 0.8067985
    alternative = less

NOTE: n = total sample size

> 
> 
> power.prop1.test(p1 = 0.5, p0 = 0.3, power = 0.8, alternative = "greater")

     Power calculation for testing a given proportion (with continuity correction) 

              n = 39.33189
          delta = 0.2
             p1 = 0.5
             p0 = 0.3
      sig.level = 0.05
exact.sig.level = 0.01477705
          power = 0.8
    exact.power = 0.682086
    alternative = greater

NOTE: n = total sample size

> power.prop1.test(p1 = 0.5, p0 = 0.3, power = 0.8, alternative = "greater", 
+                  cont.corr = FALSE)

     Power calculation for testing a given proportion 

              n = 34.49079
          delta = 0.2
             p1 = 0.5
             p0 = 0.3
      sig.level = 0.05
exact.sig.level = 0.03588222
          power = 0.8
    exact.power = 0.7502201
    alternative = greater

NOTE: n = total sample size

> power.prop1.test(n = 40, p0 = 0.3, power = 0.8, alternative = "greater")

     Power calculation for testing a given proportion (with continuity correction) 

              n = 40
          delta = 0.1982163
             p1 = 0.4982163
             p0 = 0.3
      sig.level = 0.05
exact.sig.level = 0.01477705
          power = 0.8
    exact.power = 0.6739502
    alternative = greater

NOTE: n = total sample size

> power.prop1.test(n = 40, p1 = 0.5, p0 = 0.3, power = 0.8, sig.level = NULL, 
+                  alternative = "greater")

     Power calculation for testing a given proportion (with continuity correction) 

              n = 40
          delta = 0.2
             p1 = 0.5
             p0 = 0.3
      sig.level = 0.04751295
exact.sig.level = 0.01477705
          power = 0.8
    exact.power = 0.682086
    alternative = greater

NOTE: n = total sample size

> 
> 
> 
> cleanEx()
> nameEx("power.welch.t.test")
> ### * power.welch.t.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: power.welch.t.test
> ### Title: Power Calculations for Two-sample Welch t Test
> ### Aliases: power.welch.t.test
> ### Keywords: htest
> 
> ### ** Examples
> 
>  ## identical results as power.t.test, since sd = sd1 = sd2 = 1
>  power.welch.t.test(n = 20, delta = 1)

     Two-sample Welch t test power calculation 

              n = 20
          delta = 1
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.8689528
    alternative = two.sided

NOTE: n is number in *each* group

>  power.welch.t.test(power = .90, delta = 1)

     Two-sample Welch t test power calculation 

              n = 22.0211
          delta = 1
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n is number in *each* group

>  power.welch.t.test(power = .90, delta = 1, alternative = "one.sided")

     Two-sample Welch t test power calculation 

              n = 17.84713
          delta = 1
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.9
    alternative = one.sided

NOTE: n is number in *each* group

> 
>   ## sd1 = 0.5, sd2 = 1
>  power.welch.t.test(delta = 2, sd1 = 0.5, sd2 = 1, power = 0.9)

     Two-sample Welch t test power calculation 

              n = 4.888383
          delta = 2
            sd1 = 0.5
            sd2 = 1
      sig.level = 0.05
          power = 0.9
    alternative = two.sided

NOTE: n is number in *each* group

> 
> 
> 
> 
> cleanEx()
> nameEx("print.power.mpe.test")
> ### * print.power.mpe.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.power.mpe.test
> ### Title: Print Methods for Hypothesis Tests, Sample size and Power
> ###   Calculations
> ### Aliases: print.power.mpe.test
> ### Keywords: htest power.htest
> 
> ### ** Examples
> 
> (pkv <- power.mpe.known.var(K = 2, delta = c(1,1), Sigma = diag(c(2,2)), power = 0.9,
+                             sig.level = 0.025))

 Power calculation for multiple co-primary endpoints (covariance known) 

              n = 51.61514
          delta = 1, 1
             SD = 1.414214, 1.414214
            rho = 0
      sig.level = 0.025
          power = 0.9

Sigma =
     [,1] [,2]
[1,]    2    0
[2,]    0    2

NOTE: n is number in *each* group

> print(pkv, digits =  4) # using less digits than default

 Power calculation for multiple co-primary endpoints (covariance known) 

              n = 51.62
          delta = 1, 1
             SD = 1.414, 1.414
            rho = 0
      sig.level = 0.025
          power = 0.9

Sigma =
     [,1] [,2]
[1,]    2    0
[2,]    0    2

NOTE: n is number in *each* group

> print(pkv, digits = 12) # using more digits than default

 Power calculation for multiple co-primary endpoints (covariance known) 

              n = 51.6151370364
          delta = 1, 1
             SD = 1.41421356237, 1.41421356237
            rho = 0
      sig.level = 0.025
          power = 0.9

Sigma =
     [,1] [,2]
[1,]    2    0
[2,]    0    2

NOTE: n is number in *each* group

> 
> 
> 
> cleanEx()
> nameEx("qqunifSimPower")
> ### * qqunifSimPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qqunif
> ### Title: qq-Plots for Uniform Distribution
> ### Aliases: qqunif qqunif.default qqunif.sim.power.ttest
> ###   qqunif.sim.power.wtest
> ### Keywords: hplot
> 
> ### ** Examples
> 
> ## default
> qqunif(runif(100))
> 
> ## visualization of empirical power and type-I-error
> res1 <- sim.power.t.test(nx = 5, rx = rnorm, rx.H0 = rnorm, 
+                         ny = 10, ry = function(x) rnorm(x, mean = 3, sd = 3), 
+                         ry.H0 = function(x) rnorm(x, sd = 3))
> qqunif(res1, alpha = 0.1)
> 
> res2 <- sim.power.wilcox.test(nx = 6, rx = rnorm, rx.H0 = rnorm,
+                       ny = 6, ry = function(x) rnorm(x, mean = 2), 
+                       ry.H0 = rnorm)
> qqunif(res2)
> 
> 
> 
> cleanEx()
> nameEx("sim.power.t.test")
> ### * sim.power.t.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim.power.t.test
> ### Title: Monte Carlo Simulations for Empirical Power of Two-sample
> ###   t-Tests
> ### Aliases: sim.power.t.test
> ### Keywords: htest
> 
> ### ** Examples
> 
> ## Equal variance, small sample size
> power.t.test(n = 5, delta = 2)

     Two-sample t test power calculation 

              n = 5
          delta = 2
             sd = 1
      sig.level = 0.05
          power = 0.7905416
    alternative = two.sided

NOTE: n is number in *each* group

> power.welch.t.test(n = 5, delta = 2)

     Two-sample Welch t test power calculation 

              n = 5
          delta = 2
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.7905416
    alternative = two.sided

NOTE: n is number in *each* group

> power.hsu.t.test(n = 5, delta = 2)

     Two-sample Hsu t test power calculation 

              n = 5
          delta = 2
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.662509
    alternative = two.sided

NOTE: n is number in *each* group

> sim.power.t.test(nx = 5, rx = rnorm, rx.H0 = rnorm,
+                  ny = 5, ry = function(x) rnorm(x, mean = 2), ry.H0 = rnorm)

    Simulation Set-up
             nx = 5
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 5
             ry = function (x) , rnorm(x, mean = 2)
          ry.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.7899
emp.type.I.error = 0.0538

    Welch Two-sample t-Test
       emp.power = 0.7650
emp.type.I.error = 0.0467

    Hsu Two-sample t-Test
       emp.power = 0.6488
emp.type.I.error = 0.0266

> 
> ## Equal variance, moderate sample size
> power.t.test(n = 25, delta = 0.8)

     Two-sample t test power calculation 

              n = 25
          delta = 0.8
             sd = 1
      sig.level = 0.05
          power = 0.7914502
    alternative = two.sided

NOTE: n is number in *each* group

> power.welch.t.test(n = 25, delta = 0.8)

     Two-sample Welch t test power calculation 

              n = 25
          delta = 0.8
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.7914502
    alternative = two.sided

NOTE: n is number in *each* group

> power.hsu.t.test(n = 25, delta = 0.8)

     Two-sample Hsu t test power calculation 

              n = 25
          delta = 0.8
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.7745063
    alternative = two.sided

NOTE: n is number in *each* group

> sim.power.t.test(nx = 25, rx = rnorm, rx.H0 = rnorm,
+                  ny = 25, ry = function(x) rnorm(x, mean = 0.8), ry.H0 = rnorm)

    Simulation Set-up
             nx = 25
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 25
             ry = function (x) , rnorm(x, mean = 0.8)
          ry.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.7959
emp.type.I.error = 0.0517

    Welch Two-sample t-Test
       emp.power = 0.7954
emp.type.I.error = 0.0513

    Hsu Two-sample t-Test
       emp.power = 0.7802
emp.type.I.error = 0.0453

> 
> ## Equal variance, high sample size
> power.t.test(n = 100, delta = 0.4)

     Two-sample t test power calculation 

              n = 100
          delta = 0.4
             sd = 1
      sig.level = 0.05
          power = 0.8036466
    alternative = two.sided

NOTE: n is number in *each* group

> power.welch.t.test(n = 100, delta = 0.4)

     Two-sample Welch t test power calculation 

              n = 100
          delta = 0.4
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.8036466
    alternative = two.sided

NOTE: n is number in *each* group

> power.hsu.t.test(n = 100, delta = 0.4)

     Two-sample Hsu t test power calculation 

              n = 100
          delta = 0.4
            sd1 = 1
            sd2 = 1
      sig.level = 0.05
          power = 0.7998052
    alternative = two.sided

NOTE: n is number in *each* group

> sim.power.t.test(nx = 100, rx = rnorm, rx.H0 = rnorm,
+                  ny = 100, ry = function(x) rnorm(x, mean = 0.4), ry.H0 = rnorm)

    Simulation Set-up
             nx = 100
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 100
             ry = function (x) , rnorm(x, mean = 0.4)
          ry.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.8033
emp.type.I.error = 0.0512

    Welch Two-sample t-Test
       emp.power = 0.8033
emp.type.I.error = 0.0512

    Hsu Two-sample t-Test
       emp.power = 0.8008
emp.type.I.error = 0.0497

> 
> ## Unequal variance, small sample size
> power.welch.t.test(n = 5, delta = 5, sd1 = 1, sd2 = 3)

     Two-sample Welch t test power calculation 

              n = 5
          delta = 5
            sd1 = 1
            sd2 = 3
      sig.level = 0.05
          power = 0.7996606
    alternative = two.sided

NOTE: n is number in *each* group

> power.hsu.t.test(n = 5, delta = 5, sd1 = 1, sd2 = 3)

     Two-sample Hsu t test power calculation 

              n = 5
          delta = 5
            sd1 = 1
            sd2 = 3
      sig.level = 0.05
          power = 0.7528383
    alternative = two.sided

NOTE: n is number in *each* group

> sim.power.t.test(nx = 5, rx = rnorm, rx.H0 = rnorm, 
+                  ny = 5, ry = function(x) rnorm(x, mean = 5, sd = 3), 
+                  ry.H0 = function(x) rnorm(x, sd = 3))

    Simulation Set-up
             nx = 5
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 5
             ry = function (x) , rnorm(x, mean = 5, sd = 3)
          ry.H0 = function (x) , rnorm(x, sd = 3)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.8641
emp.type.I.error = 0.0612

    Welch Two-sample t-Test
       emp.power = 0.7922
emp.type.I.error = 0.0470

    Hsu Two-sample t-Test
       emp.power = 0.7592
emp.type.I.error = 0.0336

>                  
> ## Unequal variance, moderate sample size
> power.welch.t.test(n = 25, delta = 1.8, sd1 = 1, sd2 = 3)

     Two-sample Welch t test power calculation 

              n = 25
          delta = 1.8
            sd1 = 1
            sd2 = 3
      sig.level = 0.05
          power = 0.7857111
    alternative = two.sided

NOTE: n is number in *each* group

> power.hsu.t.test(n = 25, delta = 1.8, sd1 = 1, sd2 = 3)

     Two-sample Hsu t test power calculation 

              n = 25
          delta = 1.8
            sd1 = 1
            sd2 = 3
      sig.level = 0.05
          power = 0.7795434
    alternative = two.sided

NOTE: n is number in *each* group

> sim.power.t.test(nx = 25, rx = rnorm, rx.H0 = rnorm, 
+                  ny = 25, ry = function(x) rnorm(x, mean = 1.8, sd = 3), 
+                  ry.H0 = function(x) rnorm(x, sd = 3))

    Simulation Set-up
             nx = 25
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 25
             ry = function (x) , rnorm(x, mean = 1.8, sd = 3)
          ry.H0 = function (x) , rnorm(x, sd = 3)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.8036
emp.type.I.error = 0.0525

    Welch Two-sample t-Test
       emp.power = 0.7938
emp.type.I.error = 0.0496

    Hsu Two-sample t-Test
       emp.power = 0.7894
emp.type.I.error = 0.0470

>                  
> ## Unequal variance, high sample size
> power.welch.t.test(n = 100, delta = 0.9, sd1 = 1, sd2 = 3)

     Two-sample Welch t test power calculation 

              n = 100
          delta = 0.9
            sd1 = 1
            sd2 = 3
      sig.level = 0.05
          power = 0.8060351
    alternative = two.sided

NOTE: n is number in *each* group

> power.hsu.t.test(n = 100, delta = 0.9, sd1 = 1, sd2 = 3)

     Two-sample Hsu t test power calculation 

              n = 100
          delta = 0.9
            sd1 = 1
            sd2 = 3
      sig.level = 0.05
          power = 0.8046573
    alternative = two.sided

NOTE: n is number in *each* group

> sim.power.t.test(nx = 100, rx = rnorm, rx.H0 = rnorm, 
+                  ny = 100, ry = function(x) rnorm(x, mean = 0.9, sd = 3), 
+                  ry.H0 = function(x) rnorm(x, sd = 3))

    Simulation Set-up
             nx = 100
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 100
             ry = function (x) , rnorm(x, mean = 0.9, sd = 3)
          ry.H0 = function (x) , rnorm(x, sd = 3)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.8049
emp.type.I.error = 0.0496

    Welch Two-sample t-Test
       emp.power = 0.8036
emp.type.I.error = 0.0492

    Hsu Two-sample t-Test
       emp.power = 0.8025
emp.type.I.error = 0.0487

>                  
> ## Unequal variance, unequal sample sizes
> ## small sample sizes
> sim.power.t.test(nx = 10, rx = rnorm, rx.H0 = rnorm, 
+                  ny = 5, ry = function(x) rnorm(x, mean = 5, sd = 3), 
+                  ry.H0 = function(x) rnorm(x, sd = 3))

    Simulation Set-up
             nx = 10
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 5
             ry = function (x) , rnorm(x, mean = 5, sd = 3)
          ry.H0 = function (x) , rnorm(x, sd = 3)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.9714
emp.type.I.error = 0.1586

    Welch Two-sample t-Test
       emp.power = 0.7929
emp.type.I.error = 0.0568

    Hsu Two-sample t-Test
       emp.power = 0.7705
emp.type.I.error = 0.0410

> sim.power.t.test(nx = 5, rx = rnorm, rx.H0 = rnorm, 
+                  ny = 10, ry = function(x) rnorm(x, mean = 3, sd = 3), 
+                  ry.H0 = function(x) rnorm(x, sd = 3))

    Simulation Set-up
             nx = 5
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 10
             ry = function (x) , rnorm(x, mean = 3, sd = 3)
          ry.H0 = function (x) , rnorm(x, sd = 3)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.5189
emp.type.I.error = 0.0171

    Welch Two-sample t-Test
       emp.power = 0.7392
emp.type.I.error = 0.0506

    Hsu Two-sample t-Test
       emp.power = 0.5553
emp.type.I.error = 0.0172

> 
> ## Unequal variance, unequal sample sizes
> ## moderate sample sizes
> sim.power.t.test(nx = 25, rx = rnorm, rx.H0 = rnorm, 
+                  ny = 50, ry = function(x) rnorm(x, mean = 1.5, sd = 3), 
+                  ry.H0 = function(x) rnorm(x, sd = 3))

    Simulation Set-up
             nx = 25
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 50
             ry = function (x) , rnorm(x, mean = 1.5, sd = 3)
          ry.H0 = function (x) , rnorm(x, sd = 3)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.7152
emp.type.I.error = 0.0124

    Welch Two-sample t-Test
       emp.power = 0.8860
emp.type.I.error = 0.0509

    Hsu Two-sample t-Test
       emp.power = 0.8702
emp.type.I.error = 0.0448

> 
> ## Unequal variance, unequal sample sizes
> ## high sample sizes
> sim.power.t.test(nx = 100, rx = rnorm, rx.H0 = rnorm, 
+                  ny = 200, ry = function(x) rnorm(x, mean = 0.6, sd = 3), 
+                  ry.H0 = function(x) rnorm(x, sd = 3))

    Simulation Set-up
             nx = 100
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 200
             ry = function (x) , rnorm(x, mean = 0.6, sd = 3)
          ry.H0 = function (x) , rnorm(x, sd = 3)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000

    Classical Two-sample t-Test
       emp.power = 0.4819
emp.type.I.error = 0.0118

    Welch Two-sample t-Test
       emp.power = 0.7170
emp.type.I.error = 0.0505

    Hsu Two-sample t-Test
       emp.power = 0.7110
emp.type.I.error = 0.0483

> 
> 
> 
> cleanEx()
> nameEx("sim.power.wilcox.test")
> ### * sim.power.wilcox.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim.power.wilcox.test
> ### Title: Monte Carlo Simulations for Empirical Power of
> ###   Wilcoxon-Mann-Whitney Tests
> ### Aliases: sim.power.wilcox.test
> ### Keywords: htest
> 
> ### ** Examples
> 
> ## Equal variance, small sample size
> power.t.test(n = 5, power = 0.8)

     Two-sample t test power calculation 

              n = 5
          delta = 2.024438
             sd = 1
      sig.level = 0.05
          power = 0.8
    alternative = two.sided

NOTE: n is number in *each* group

> sim.ssize.wilcox.test(rx = rnorm, ry = function(x) rnorm(x, mean = 2), 
+                       power = 0.8, n.min = 3, n.max = 10, step.size = 1)

     Wilcoxon rank sum test 

              n = 4, 5, 6
             rx = .Call(C_rnorm, n, mean, sd)
             ry = rnorm(x, mean = 2)
      sig.level = 0.05
      emp.power = 0.4929, 0.6803, 0.8263
    alternative = two.sided

NOTE: n is number in *each* group

> sim.power.wilcox.test(nx = 6, rx = rnorm, rx.H0 = rnorm,
+                       ny = 6, ry = function(x) rnorm(x, mean = 2), 
+                       ry.H0 = rnorm)

    Simulation Set-up
             nx = 6
             rx = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
          rx.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
             ny = 6
             ry = function (x) , rnorm(x, mean = 2)
          ry.H0 = function (n, mean = 0, sd = 1) , .Call(C_rnorm, n, mean, sd)
      sig.level = 0.05
             mu = 0
    alternative = two.sided
           iter = 10000
       conf.int = FALSE
    approximate = FALSE
           ties = FALSE

    Exact Wilcoxon-Mann-Whitney Test
       emp.power = 0.8267
emp.type.I.error = 0.0406

    Asymptotic Wilcoxon-Mann-Whitney Test
       emp.power = 0.8267
emp.type.I.error = 0.0406

> 
> 
> 
> cleanEx()
> nameEx("sim.ssize.wilcox.test")
> ### * sim.ssize.wilcox.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sim.ssize.wilcox.test
> ### Title: Sample Size for Wilcoxon Rank Sum and Signed Rank Tests
> ### Aliases: sim.ssize.wilcox.test
> ### Keywords: htest
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("ssize.auc.ci")
> ### * ssize.auc.ci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssize.auc.ci
> ### Title: Sample Size Calculations for AUC
> ### Aliases: ssize.auc.ci
> ### Keywords: htest
> 
> ### ** Examples
> 
> ## compute n
> ssize.auc.ci(AUC = 0.9, delta = 0.05, power = 0.8)

     

            AUC = 0.9
              n = 126.4292
             n1 = 126.4292
          delta = 0.05
      sig.level = 0.05
          power = 0.8
           prev = 0.5

NOTE: n is number of cases, n1 is number of controls

> ## compute delta
> ssize.auc.ci(AUC = 0.9, n = 254, power = 0.8)

     

            AUC = 0.9
              n = 127
             n1 = 127
          delta = 0.04987028
      sig.level = 0.05
          power = 0.8
           prev = 0.5

NOTE: n is number of cases, n1 is number of controls

> ## compute power
> ssize.auc.ci(AUC = 0.9, n = 254, delta = 0.05)

     

            AUC = 0.9
              n = 127
             n1 = 127
          delta = 0.05
      sig.level = 0.05
          power = 0.8016039
           prev = 0.5

NOTE: n is number of cases, n1 is number of controls

> ## compute sig.level
> ssize.auc.ci(AUC = 0.9, n = 254, delta = 0.05, power = 0.8, sig.level = NULL)

     

            AUC = 0.9
              n = 127
             n1 = 127
          delta = 0.05
      sig.level = 0.04942423
          power = 0.8
           prev = 0.5

NOTE: n is number of cases, n1 is number of controls

> 
> 
> 
> cleanEx()
> nameEx("ssize.pcc")
> ### * ssize.pcc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssize.pcc
> ### Title: Sample Size Planning for Developing Classifiers Using High
> ###   Dimensional Data
> ### Aliases: ssize.pcc
> ### Keywords: htest
> 
> ### ** Examples
> 
> ## see Table 2 of Dobbin et al. (2008)
> g <- 0.1
> fc <- 1.6
> ssize.pcc(gamma = g, stdFC = fc, nrFeatures = 22000)

     Sample Size Planning for Developing Classifiers Using High Dimensional Data 

          gamma = 0.1
           prev = 0.5
     nrFeatures = 22000
             n1 = 21
             n2 = 21

NOTE: n1 is number of cases, n2 is number of controls

> 
> ## see Table 3 of Dobbin et al. (2008)
> g <- 0.05
> fc <- 1.1
> ssize.pcc(gamma = g, stdFC = fc, nrFeatures = 22000)

     Sample Size Planning for Developing Classifiers Using High Dimensional Data 

          gamma = 0.05
           prev = 0.5
     nrFeatures = 22000
             n1 = 47
             n2 = 47

NOTE: n1 is number of cases, n2 is number of controls

> 
> 
> 
> cleanEx()
> nameEx("ssize.propCI")
> ### * ssize.propCI
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssize.propCI
> ### Title: Sample Size Calculation for Confidence Interval of a Proportion
> ### Aliases: ssize.propCI ssize.prop.ci
> ### Keywords: htest
> 
> ### ** Examples
> 
> ssize.propCI(prop = 0.1, width = 0.1)

     Sample size calculation by method of wald-cc 

              n = 157.6582
           prop = 0.1
          width = 0.1
     conf.level = 0.95

NOTE: Two-sided confidence interval

> ssize.propCI(prop = 0.3, width = 0.1)

     Sample size calculation by method of wald-cc 

              n = 342.3905
           prop = 0.3
          width = 0.1
     conf.level = 0.95

NOTE: Two-sided confidence interval

> ssize.propCI(prop = 0.3, width = 0.1, method = "wald")

     Sample size calculation by method of wald 

              n = 322.6825
           prop = 0.3
          width = 0.1
     conf.level = 0.95

NOTE: Two-sided confidence interval

> ssize.propCI(prop = 0.3, width = 0.1, method = "jeffreys")

     Sample size calculation by method of jeffreys 

              n = 322.6825
           prop = 0.3
          width = 0.1
     conf.level = 0.95

NOTE: Two-sided confidence interval

> ssize.propCI(prop = 0.3, width = 0.1, method = "clopper-pearson")

     Sample size calculation by method of clopper-pearson 

              n = 343
           prop = 0.3
          width = 0.1
     conf.level = 0.95

NOTE: Two-sided confidence interval

> ssize.propCI(prop = 0.3, width = 0.1, method = "wilson")

     Sample size calculation by method of wilson 

              n = 327.2541
           prop = 0.3
          width = 0.1
     conf.level = 0.95

NOTE: Two-sided confidence interval

> ssize.propCI(prop = 0.3, width = 0.1, method = "agresti-coull")

     Sample size calculation by method of agresti-coull 

              n = 318.8411
           prop = 0.3
          width = 0.1
     conf.level = 0.95

NOTE: Two-sided confidence interval

> 
> 
> 
> cleanEx()
> nameEx("ssize.reference.range")
> ### * ssize.reference.range
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ssize.reference.range
> ### Title: Power Calculations for Two-sample Hsu t Test
> ### Aliases: ssize.reference.range
> ### Keywords: htest
> 
> ### ** Examples
> 
>   ## see Table 1 in Jennen-Steinmetz and Wellek (2005)
>   ssize.reference.range(delta = 0.03, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 76.75793
          delta = 0.03
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ## 135 vs 125 (error in Table 1)
>   ssize.reference.range(delta = 0.03, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 134.2273
          delta = 0.03
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.03, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 75.23317
          delta = 0.03
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.03, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 142.7926
          delta = 0.03
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.025, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 109.4726
          delta = 0.025
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.025, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 195.4125
          delta = 0.025
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.025, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 108.3358
          delta = 0.025
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.025, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 205.6213
          delta = 0.025
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.02, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 170.1423
          delta = 0.02
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ## 314 vs. 305 (error Table 1?)
>   ssize.reference.range(delta = 0.02, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 313.6031
          delta = 0.02
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.02, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 169.2746
          delta = 0.02
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.02, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 321.2833
          delta = 0.02
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.015, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 301.617
          delta = 0.015
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.015, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 558.22
          delta = 0.015
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.015, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 300.9327
          delta = 0.015
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.015, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 571.1703
          delta = 0.015
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.01, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 677.7219
          delta = 0.01
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.01, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 1275.296
          delta = 0.01
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.01, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 677.0985
          delta = 0.01
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.01, ref.prob = 0.9, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 1285.133
          delta = 0.01
       ref.prob = 0.9
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.015, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 122.9682
          delta = 0.015
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.015, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 256.5194
          delta = 0.015
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.015, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 119.9662
          delta = 0.015
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.015, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 293.1005
          delta = 0.015
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.0125, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 175.0131
          delta = 0.0125
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.0125, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 396.2929
          delta = 0.0125
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.0125, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 172.7514
          delta = 0.0125
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.0125, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 422.0648
          delta = 0.0125
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.01, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 271.6691
          delta = 0.01
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.01, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 635.2654
          delta = 0.01
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.01, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 269.9241
          delta = 0.01
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.01, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 659.4762
          delta = 0.01
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.0075, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 481.3139
          delta = 0.0075
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.0075, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 1152.062
          delta = 0.0075
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.0075, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 479.865
          delta = 0.0075
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.0075, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 1172.402
          delta = 0.0075
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   ssize.reference.range(delta = 0.005, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE)

     Reference range sample size calculation 

              n = 1080.887
          delta = 0.005
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact method for normal distribution

>   ssize.reference.range(delta = 0.005, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE)

     Reference range sample size calculation 

              n = 2606.398
          delta = 0.005
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.005, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE)

     Reference range sample size calculation 

              n = 1079.696
          delta = 0.005
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.005, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE)

     Reference range sample size calculation 

              n = 2637.905
          delta = 0.005
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = two.sided

NOTE: Approximate non-parametric method

>   
>   
>   ## results are equivalent to one-sided reference range with coverage of 
>   ## 95 percent instead of 90 percent; for example
>   ssize.reference.range(delta = 0.03, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = TRUE, alternative = "one.sided")

     Reference range sample size calculation 

              n = 76.75793
          delta = 0.03
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = one.sided

NOTE: Exact method for normal distribution

>   ## 135 vs 125 (error in Table 1)
>   ssize.reference.range(delta = 0.03, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = TRUE, alternative = "one.sided")

     Reference range sample size calculation 

              n = 134.2273
          delta = 0.03
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = one.sided

NOTE: Exact non-parametric method

>   ssize.reference.range(delta = 0.03, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "parametric", exact = FALSE, alternative = "one.sided")

     Reference range sample size calculation 

              n = 75.23317
          delta = 0.03
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = one.sided

NOTE: Approximate method for normal distribution

>   ssize.reference.range(delta = 0.03, ref.prob = 0.95, conf.prob = 0.9, 
+                         method = "nonparametric", exact = FALSE, alternative = "one.sided")

     Reference range sample size calculation 

              n = 142.7926
          delta = 0.03
       ref.prob = 0.95
      conf.prob = 0.9
    alternative = one.sided

NOTE: Approximate non-parametric method

> 
> 
> 
> 
> cleanEx()
> nameEx("volcanoSimPower")
> ### * volcanoSimPower
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: volcano
> ### Title: Volcano Plots
> ### Aliases: volcano volcano.sim.power.ttest volcano.sim.power.wtest
> ### Keywords: hplot
> 
> ### ** Examples
> 
> res1 <- sim.power.t.test(nx = 5, rx = rnorm, rx.H0 = rnorm, 
+                         ny = 10, ry = function(x) rnorm(x, mean = 3, sd = 3), 
+                         ry.H0 = function(x) rnorm(x, sd = 3))
> volcano(res1)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.727 0.493 7.429 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
